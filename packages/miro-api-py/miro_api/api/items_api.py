"""
    Miro Developer Platform

    <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro's Developer Platform 2.0.   # noqa: E501

    The version of the OpenAPI document: v2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from miro_api.api_client import ApiClient, Endpoint as _Endpoint
from miro_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from miro_api.model.create_frame_item400_response import CreateFrameItem400Response
from miro_api.model.generic_item import GenericItem
from miro_api.model.generic_item_cursor_paged import GenericItemCursorPaged
from miro_api.model.generic_item_update import GenericItemUpdate


class ItemsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_item_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v2/boards/{board_id_Platform}/items/{item_id}',
                'operation_id': 'delete_item',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'board_id_platform',
                    'item_id',
                ],
                'required': [
                    'board_id_platform',
                    'item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'board_id_platform':
                        (str,),
                    'item_id':
                        (str,),
                },
                'attribute_map': {
                    'board_id_platform': 'board_id_Platform',
                    'item_id': 'item_id',
                },
                'location_map': {
                    'board_id_platform': 'path',
                    'item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_item_experimental_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v2-experimental/boards/{board_id}/items/{item_id}',
                'operation_id': 'delete_item_experimental',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'board_id',
                    'item_id',
                ],
                'required': [
                    'board_id',
                    'item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'board_id':
                        (str,),
                    'item_id':
                        (str,),
                },
                'attribute_map': {
                    'board_id': 'board_id',
                    'item_id': 'item_id',
                },
                'location_map': {
                    'board_id': 'path',
                    'item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_items_endpoint = _Endpoint(
            settings={
                'response_type': (GenericItemCursorPaged,),
                'auth': [],
                'endpoint_path': '/v2/boards/{board_id_Platform}/items',
                'operation_id': 'get_items',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'board_id_platform',
                    'limit',
                    'type',
                    'cursor',
                ],
                'required': [
                    'board_id_platform',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                    },
                },
                'allowed_values': {
                    ('type',): {

                        "TEXT": "text",
                        "SHAPE": "shape",
                        "STICKY_NOTE": "sticky_note",
                        "IMAGE": "image",
                        "DOCUMENT": "document",
                        "CARD": "card",
                        "APP_CARD": "app_card",
                        "PREVIEW": "preview",
                        "FRAME": "frame",
                        "EMBED": "embed"
                    },
                },
                'openapi_types': {
                    'board_id_platform':
                        (str,),
                    'limit':
                        (str,),
                    'type':
                        (str,),
                    'cursor':
                        (str,),
                },
                'attribute_map': {
                    'board_id_platform': 'board_id_Platform',
                    'limit': 'limit',
                    'type': 'type',
                    'cursor': 'cursor',
                },
                'location_map': {
                    'board_id_platform': 'path',
                    'limit': 'query',
                    'type': 'query',
                    'cursor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_items_within_frame_endpoint = _Endpoint(
            settings={
                'response_type': (GenericItemCursorPaged,),
                'auth': [],
                'endpoint_path': '/v2/boards/{board_id}/items',
                'operation_id': 'get_items_within_frame',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'board_id',
                    'parent_item_id',
                    'limit',
                    'type',
                    'cursor',
                ],
                'required': [
                    'board_id',
                    'parent_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent_item_id',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('parent_item_id',): {

                    },
                    ('limit',): {

                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'board_id':
                        (str,),
                    'parent_item_id':
                        (str,),
                    'limit':
                        (str,),
                    'type':
                        (str,),
                    'cursor':
                        (str,),
                },
                'attribute_map': {
                    'board_id': 'board_id',
                    'parent_item_id': 'parent_item_id',
                    'limit': 'limit',
                    'type': 'type',
                    'cursor': 'cursor',
                },
                'location_map': {
                    'board_id': 'path',
                    'parent_item_id': 'query',
                    'limit': 'query',
                    'type': 'query',
                    'cursor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_specific_item_endpoint = _Endpoint(
            settings={
                'response_type': (GenericItem,),
                'auth': [],
                'endpoint_path': '/v2/boards/{board_id_Platform}/items/{item_id}',
                'operation_id': 'get_specific_item',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'board_id_platform',
                    'item_id',
                ],
                'required': [
                    'board_id_platform',
                    'item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'board_id_platform':
                        (str,),
                    'item_id':
                        (str,),
                },
                'attribute_map': {
                    'board_id_platform': 'board_id_Platform',
                    'item_id': 'item_id',
                },
                'location_map': {
                    'board_id_platform': 'path',
                    'item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_item_position_or_parent_endpoint = _Endpoint(
            settings={
                'response_type': (GenericItem,),
                'auth': [],
                'endpoint_path': '/v2/boards/{board_id_Platform}/items/{item_id}',
                'operation_id': 'update_item_position_or_parent',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'board_id_platform',
                    'item_id',
                    'generic_item_update',
                ],
                'required': [
                    'board_id_platform',
                    'item_id',
                    'generic_item_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'board_id_platform':
                        (str,),
                    'item_id':
                        (str,),
                    'generic_item_update':
                        (GenericItemUpdate,),
                },
                'attribute_map': {
                    'board_id_platform': 'board_id_Platform',
                    'item_id': 'item_id',
                },
                'location_map': {
                    'board_id_platform': 'path',
                    'item_id': 'path',
                    'generic_item_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def delete_item(
        self,
        board_id_platform,
        item_id,
        **kwargs
    ):
        """Delete item  # noqa: E501

        Deletes an item from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_item(board_id_platform, item_id, async_req=True)
        >>> result = thread.get()

        Args:
            board_id_platform (str): Unique identifier (ID) of the board from which you want to delete the item.
            item_id (str): Unique identifier (ID) of the item that you want to delete.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['board_id_platform'] = \
            board_id_platform
        kwargs['item_id'] = \
            item_id
        return self.delete_item_endpoint.call_with_http_info(**kwargs)

    def delete_item_experimental(
        self,
        board_id,
        item_id,
        **kwargs
    ):
        """Delete item  # noqa: E501

        Deletes an item from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_item_experimental(board_id, item_id, async_req=True)
        >>> result = thread.get()

        Args:
            board_id (str): Unique identifier (ID) of the board from which you want to delete the item.
            item_id (str): Unique identifier (ID) of the item that you want to delete.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['board_id'] = \
            board_id
        kwargs['item_id'] = \
            item_id
        return self.delete_item_experimental_endpoint.call_with_http_info(**kwargs)

    def get_items(
        self,
        board_id_platform,
        **kwargs
    ):
        """Get items on board  # noqa: E501

        Retrieves a list of items for a specific board. You can retrieve all items on the board, a list of child items inside a parent item, or a list of specific types of items by specifying URL query parameter values.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_items(board_id_platform, async_req=True)
        >>> result = thread.get()

        Args:
            board_id_platform (str): Unique identifier (ID) of the board for which you want to retrieve the list of available items.

        Keyword Args:
            limit (str): [optional] if omitted the server will use the default value of "10"
            type (str): [optional]
            cursor (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GenericItemCursorPaged
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['board_id_platform'] = \
            board_id_platform
        return self.get_items_endpoint.call_with_http_info(**kwargs)

    def get_items_within_frame(
        self,
        board_id,
        parent_item_id,
        **kwargs
    ):
        """Get items within frame  # noqa: E501

        Retrieves a list of items within a specific frame. A frame is a parent item and all items within a frame are child items. This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_items_within_frame(board_id, parent_item_id, async_req=True)
        >>> result = thread.get()

        Args:
            board_id (str): Unique identifier (ID) of the board that contains the frame for which you want to retrieve the list of available items.
            parent_item_id (str): ID of the frame for which you want to retrieve the list of available items.

        Keyword Args:
            limit (str): [optional] if omitted the server will use the default value of "10"
            type (str): [optional]
            cursor (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GenericItemCursorPaged
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['board_id'] = \
            board_id
        kwargs['parent_item_id'] = \
            parent_item_id
        return self.get_items_within_frame_endpoint.call_with_http_info(**kwargs)

    def get_specific_item(
        self,
        board_id_platform,
        item_id,
        **kwargs
    ):
        """Get specific item on board  # noqa: E501

        Retrieves information for a specific item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_specific_item(board_id_platform, item_id, async_req=True)
        >>> result = thread.get()

        Args:
            board_id_platform (str): Unique identifier (ID) of the board from which you want to retrieve a specific item.
            item_id (str): Unique identifier (ID) of the item that you want to retrieve.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GenericItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['board_id_platform'] = \
            board_id_platform
        kwargs['item_id'] = \
            item_id
        return self.get_specific_item_endpoint.call_with_http_info(**kwargs)

    def update_item_position_or_parent(
        self,
        board_id_platform,
        item_id,
        generic_item_update,
        **kwargs
    ):
        """Update item position or parent  # noqa: E501

        Updates the position or the parent of an item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_item_position_or_parent(board_id_platform, item_id, generic_item_update, async_req=True)
        >>> result = thread.get()

        Args:
            board_id_platform (str): Unique identifier (ID) of the board where you want to update the item.
            item_id (str): Unique identifier (ID) of the item that you want to update.
            generic_item_update (GenericItemUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GenericItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['board_id_platform'] = \
            board_id_platform
        kwargs['item_id'] = \
            item_id
        kwargs['generic_item_update'] = \
            generic_item_update
        return self.update_item_position_or_parent_endpoint.call_with_http_info(**kwargs)

