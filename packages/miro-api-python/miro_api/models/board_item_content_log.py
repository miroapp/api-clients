# coding: utf-8

"""
    Miro Developer Platform

    <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro's Developer Platform 2.0. 

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from miro_api.models.actor import Actor
from typing import Optional, Set
from typing_extensions import Self


class BoardItemContentLog(BaseModel):
    """
    Contains information about the content log of for a board item.
    """  # noqa: E501

    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the content log.")
    content_id: Optional[StrictStr] = Field(
        default=None, description="Unique identifier of the board where the action happened.", alias="contentId"
    )
    action_type: Optional[StrictStr] = Field(
        default=None,
        description="Type of action within the board, such as creation of a widget, update of a comment message, and so on.",
        alias="actionType",
    )
    action_time: Optional[datetime] = Field(
        default=None,
        description="Date and time when the action happened.<br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)). ",
        alias="actionTime",
    )
    actor: Optional[Actor] = None
    item_type: Optional[StrictStr] = Field(
        default=None, description="Type of the board item on which the action happened.", alias="itemType"
    )
    item_id: Optional[StrictStr] = Field(
        default=None,
        description="Unique identifier of the board item on which the action happened. For example, the widget ID.",
        alias="itemId",
    )
    state: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Object that contains information about the state of the board item after the action was performed.",
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "id",
        "contentId",
        "actionType",
        "actionTime",
        "actor",
        "itemType",
        "itemId",
        "state",
    ]

    @field_validator("action_type")
    def action_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["create", "update", "delete"]):
            raise ValueError("must be one of enum values ('create', 'update', 'delete')")
        return value

    @field_validator("item_type")
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["widget", "comment_thread", "comment_message"]):
            raise ValueError("must be one of enum values ('widget', 'comment_thread', 'comment_message')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoardItemContentLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict["actor"] = self.actor.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoardItemContentLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "contentId": obj.get("contentId"),
                "actionType": obj.get("actionType"),
                "actionTime": obj.get("actionTime"),
                "actor": Actor.from_dict(obj["actor"]) if obj.get("actor") is not None else None,
                "itemType": obj.get("itemType"),
                "itemId": obj.get("itemId"),
                "state": obj.get("state"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
