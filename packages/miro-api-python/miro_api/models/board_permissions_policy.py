# coding: utf-8

"""
    Miro Developer Platform

    <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro's Developer Platform 2.0. 

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class BoardPermissionsPolicy(BaseModel):
    """
    Defines the permissions policies for the board.
    """  # noqa: E501

    collaboration_tools_start_access: Optional[StrictStr] = Field(
        default="all_editors",
        description="Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.",
        alias="collaborationToolsStartAccess",
    )
    copy_access: Optional[StrictStr] = Field(
        default="anyone",
        description="Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.",
        alias="copyAccess",
    )
    sharing_access: Optional[StrictStr] = Field(
        default="team_members_with_editing_rights",
        description="Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.",
        alias="sharingAccess",
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "collaborationToolsStartAccess",
        "copyAccess",
        "sharingAccess",
    ]

    @field_validator("collaboration_tools_start_access")
    def collaboration_tools_start_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["all_editors", "board_owners_and_coowners"]):
            raise ValueError(
                "must be one of enum values ('all_editors', 'board_owners_and_coowners')"
            )
        return value

    @field_validator("copy_access")
    def copy_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["anyone", "team_members", "team_editors", "board_owner"]):
            raise ValueError(
                "must be one of enum values ('anyone', 'team_members', 'team_editors', 'board_owner')"
            )
        return value

    @field_validator("sharing_access")
    def sharing_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["team_members_with_editing_rights", "owner_and_coowners"]):
            raise ValueError(
                "must be one of enum values ('team_members_with_editing_rights', 'owner_and_coowners')"
            )
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoardPermissionsPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoardPermissionsPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "collaborationToolsStartAccess": (
                    obj.get("collaborationToolsStartAccess")
                    if obj.get("collaborationToolsStartAccess") is not None
                    else "all_editors"
                ),
                "copyAccess": (
                    obj.get("copyAccess")
                    if obj.get("copyAccess") is not None
                    else "anyone"
                ),
                "sharingAccess": (
                    obj.get("sharingAccess")
                    if obj.get("sharingAccess") is not None
                    else "team_members_with_editing_rights"
                ),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
