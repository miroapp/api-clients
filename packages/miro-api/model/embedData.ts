/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export class EmbedData {
  /**
   * Type of the embedded item\'s content.
   */
  'contentType'?: string
  /**
   * Short description of the embedded item.
   */
  'description'?: string
  /**
   * Html code of the embedded item.
   */
  'html'?: string
  /**
   * Defines how the content in the embed item is displayed on the board. `inline`: The embedded content is displayed directly on the board. `modal`: The embedded content is displayed inside a modal overlay on the board. Possible values: `inline`, `modal`
   */
  'mode'?: string | typeof EmbedData.ModeEnum[keyof typeof EmbedData.ModeEnum]
  /**
   * Name of the content\'s provider.
   */
  'providerName'?: string
  /**
   * Url of the content\'s provider.
   */
  'providerUrl'?: string
  /**
   * Title of the embedded item.
   */
  'title'?: string
  /**
   * A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.
   */
  'url'?: string

  /** @ignore */
  static discriminator: string | undefined = undefined

  /** @ignore */
  static attributeTypeMap: Array<{name: string; baseName: string; type: string}> = [
    {
      name: 'contentType',
      baseName: 'contentType',
      type: 'string',
    },
    {
      name: 'description',
      baseName: 'description',
      type: 'string',
    },
    {
      name: 'html',
      baseName: 'html',
      type: 'string',
    },
    {
      name: 'mode',
      baseName: 'mode',
      type: 'EmbedData.ModeEnum',
    },
    {
      name: 'providerName',
      baseName: 'providerName',
      type: 'string',
    },
    {
      name: 'providerUrl',
      baseName: 'providerUrl',
      type: 'string',
    },
    {
      name: 'title',
      baseName: 'title',
      type: 'string',
    },
    {
      name: 'url',
      baseName: 'url',
      type: 'string',
    },
  ]

  /** @ignore */
  static getAttributeTypeMap() {
    return EmbedData.attributeTypeMap
  }
}

export namespace EmbedData {
  export const ModeEnum = {
    Inline: 'inline',
    Modal: 'modal',
  } as const
}
