/**
 * Miro Developer Platform
 * <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro\'s Developer Platform 2.0.
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @internal
 * Contains information about the style of a connector, such as the color or caption font size
 */
export class ConnectorStyle {
  /**
   * Hex value representing the color for the captions on the connector. Default: `#1a1a1a`
   */
  'color'?: string
  /**
   * The decoration cap of the connector end, like an arrow or circle. Default: stealth.
   */
  'endStrokeCap'?: string | (typeof ConnectorStyle.EndStrokeCapEnum)[keyof typeof ConnectorStyle.EndStrokeCapEnum]
  /**
   * Defines the font size, in dp, for the captions on the connector. Default: 14
   */
  'fontSize'?: string
  /**
   * The decoration cap of the connector end, like an arrow or circle. Default: none.
   */
  'startStrokeCap'?: string | (typeof ConnectorStyle.StartStrokeCapEnum)[keyof typeof ConnectorStyle.StartStrokeCapEnum]
  /**
   * Hex value of the color of the connector line. Default: #000000.
   */
  'strokeColor'?: string
  /**
   * The stroke pattern of the connector line. Default: normal.
   */
  'strokeStyle'?: string | (typeof ConnectorStyle.StrokeStyleEnum)[keyof typeof ConnectorStyle.StrokeStyleEnum]
  /**
   * The thickness of the connector line, in dp. Default: 1.0.
   */
  'strokeWidth'?: string
  /**
   * The captions orientation relatively to the connector line curvature. Default: aligned.
   */
  'textOrientation'?:
    | string
    | (typeof ConnectorStyle.TextOrientationEnum)[keyof typeof ConnectorStyle.TextOrientationEnum]

  /** @ignore */
  static discriminator: string | undefined = undefined

  /** @ignore */
  static attributeTypeMap: Array<{name: string; baseName: string; type: string}> = [
    {
      name: 'color',
      baseName: 'color',
      type: 'string',
    },
    {
      name: 'endStrokeCap',
      baseName: 'endStrokeCap',
      type: 'ConnectorStyle.EndStrokeCapEnum',
    },
    {
      name: 'fontSize',
      baseName: 'fontSize',
      type: 'string',
    },
    {
      name: 'startStrokeCap',
      baseName: 'startStrokeCap',
      type: 'ConnectorStyle.StartStrokeCapEnum',
    },
    {
      name: 'strokeColor',
      baseName: 'strokeColor',
      type: 'string',
    },
    {
      name: 'strokeStyle',
      baseName: 'strokeStyle',
      type: 'ConnectorStyle.StrokeStyleEnum',
    },
    {
      name: 'strokeWidth',
      baseName: 'strokeWidth',
      type: 'string',
    },
    {
      name: 'textOrientation',
      baseName: 'textOrientation',
      type: 'ConnectorStyle.TextOrientationEnum',
    },
  ]

  /** @ignore */
  static getAttributeTypeMap() {
    return ConnectorStyle.attributeTypeMap
  }
}

export namespace ConnectorStyle {
  export const EndStrokeCapEnum = {
    None: 'none',
    Stealth: 'stealth',
    Diamond: 'diamond',
    FilledDiamond: 'filled_diamond',
    Oval: 'oval',
    FilledOval: 'filled_oval',
    Arrow: 'arrow',
    Triangle: 'triangle',
    FilledTriangle: 'filled_triangle',
    ErdOne: 'erd_one',
    ErdMany: 'erd_many',
    ErdOnlyOne: 'erd_only_one',
    ErdZeroOrOne: 'erd_zero_or_one',
    ErdOneOrMany: 'erd_one_or_many',
    ErdZeroOrMany: 'erd_zero_or_many',
  } as const
  export const StartStrokeCapEnum = {
    None: 'none',
    Stealth: 'stealth',
    Diamond: 'diamond',
    FilledDiamond: 'filled_diamond',
    Oval: 'oval',
    FilledOval: 'filled_oval',
    Arrow: 'arrow',
    Triangle: 'triangle',
    FilledTriangle: 'filled_triangle',
    ErdOne: 'erd_one',
    ErdMany: 'erd_many',
    ErdOnlyOne: 'erd_only_one',
    ErdZeroOrOne: 'erd_zero_or_one',
    ErdOneOrMany: 'erd_one_or_many',
    ErdZeroOrMany: 'erd_zero_or_many',
  } as const
  export const StrokeStyleEnum = {
    Normal: 'normal',
    Dotted: 'dotted',
    Dashed: 'dashed',
  } as const
  export const TextOrientationEnum = {
    Horizontal: 'horizontal',
    Aligned: 'aligned',
  } as const
}
