/**
 * Miro Developer Platform
 * <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro\'s Developer Platform 2.0.
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @internal
 * Contains shape item data, such as the content or the type of the shape.
 */
export class ShapeData {
  /**
   * The text you want to display on the shape.
   */
  'content'?: string
  /**
   * Defines the geometric shape of the item when it is rendered on the board.
   */
  'shape'?: string | (typeof ShapeData.ShapeEnum)[keyof typeof ShapeData.ShapeEnum] = ShapeData.ShapeEnum.Rectangle

  /** @ignore */
  static discriminator: string | undefined = undefined

  /** @ignore */
  static attributeTypeMap: Array<{name: string; baseName: string; type: string}> = [
    {
      name: 'content',
      baseName: 'content',
      type: 'string',
    },
    {
      name: 'shape',
      baseName: 'shape',
      type: 'ShapeData.ShapeEnum',
    },
  ]

  /** @ignore */
  static getAttributeTypeMap() {
    return ShapeData.attributeTypeMap
  }
}

export namespace ShapeData {
  export const ShapeEnum = {
    Rectangle: 'rectangle',
    RoundRectangle: 'round_rectangle',
    Circle: 'circle',
    Triangle: 'triangle',
    Rhombus: 'rhombus',
    Parallelogram: 'parallelogram',
    Trapezoid: 'trapezoid',
    Pentagon: 'pentagon',
    Hexagon: 'hexagon',
    Octagon: 'octagon',
    WedgeRoundRectangleCallout: 'wedge_round_rectangle_callout',
    Star: 'star',
    FlowChartPredefinedProcess: 'flow_chart_predefined_process',
    Cloud: 'cloud',
    Cross: 'cross',
    Can: 'can',
    RightArrow: 'right_arrow',
    LeftArrow: 'left_arrow',
    LeftRightArrow: 'left_right_arrow',
    LeftBrace: 'left_brace',
    RightBrace: 'right_brace',
  } as const
}
