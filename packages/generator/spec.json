{
  "openapi": "3.0.1",
  "info": {
    "description": "Miro API",
    "title": "Miro API",
    "version": "0.1"
  },
  "servers": [
    {
      "url": "https://api.miro.com/"
    }
  ],
  "paths": {
    "/v1/oauth/revoke": {
      "post": {
        "summary": "Revoke token",
        "description": "Revoke the current access token. Revoking an access token means that the access token will no longer work. When an access token is revoked, the refresh token is also revoked and no longer valid. This does not uninstall the application for the user.",
        "operationId": "revoke-token",
        "parameters": [
          {
            "description": "Access token that you want to revoke",
            "in": "query",
            "name": "access_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Token revoked"
          },
          "400": {
            "description": "Failed to revoke token"
          }
        }
      }
    },
    "/v2/boards": {
      "post": {
        "description": "Creates a board with the specified name and sharing policies.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "create-board",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardChanges"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardWithLinks"
                }
              }
            },
            "description": "Board created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create board",
        "tags": ["boards"]
      },
      "get": {
        "description": "Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven't been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins. Note that you only get results instantaneously when you filter by `team_id`. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-boards",
        "parameters": [
          {
            "in": "query",
            "name": "team_id",
            "schema": {
              "type": "string",
              "description": "The team_id for which you want to retrieve the list of boards. If this parameter is sent in the request, the `query` and `owner` parameters are ignored."
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "maxLength": 500,
              "type": "string",
              "description": "Retrieves a list of boards that contain the query string provided in the board content or board name. For example, if you want to retrieve a list of boards that contain the word `beta` within the board itself (board content), add `beta` as the `query` parameter value. You can use the `query` parameter with the owner parameter to narrow down the board search results."
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string",
              "description": "Retrieves a list of boards that belong to a specific owner ID. You must pass the owner ID (for example, 3074457353169356300), not the owner name. You can use the 'owner' parameter with the `query` parameter to narrow down the board search results. Note that if you pass the `team_id` in the same request, the `owner` parameter is ignored."
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "string",
              "description": "The maximum number of boards to retrieve.\nDefault: `20`"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string",
              "description": "The (zero-based) offset of the first item in the collection to return.\nDefault: `0`."
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "description": "Sort order in which you want to view the result set. Options `last_created` and `alphabetically` are applicable only when you search for boards by team.\n* `default` - If `team_id` is present, `last_created`. Otherwise, `last_opened`.\n* `last_modified` - sort by the date and time when the board was last modified.\n* `last_opened` - sort by the date and time when the board was last opened.\n* `last_created` - sort by the date and time when the board was created.\n* `alphabetically` - sort by the board name (alphabetically).",
              "default": "default",
              "enum": ["default", "last_modified", "last_opened", "last_created", "alphabetically"]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardsPagedResponse"
                }
              }
            },
            "description": "Board search results."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get boards",
        "tags": ["boards"]
      },
      "put": {
        "description": "Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 4</a><br/>",
        "operationId": "copy-board",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to copy.",
            "in": "query",
            "name": "copy_from",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardChanges"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardWithLinks"
                }
              }
            },
            "description": "Board copied"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Copy board",
        "tags": ["boards"]
      }
    },
    "/v2/boards/{board_id}": {
      "get": {
        "description": "Retrieves information about a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-specific-board",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to retrieve.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardWithLinks"
                }
              }
            },
            "description": "Board retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get specific board",
        "tags": ["boards"]
      },
      "patch": {
        "operationId": "update-board",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to update.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardChanges"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardWithLinks"
                }
              }
            },
            "description": "Board updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update board",
        "tags": ["boards"]
      },
      "delete": {
        "operationId": "delete-board",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to delete.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Board deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete board",
        "tags": ["boards"]
      }
    },
    "/v2/boards/{board_id}/app_cards": {
      "post": {
        "description": "Adds an app card item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-app-card-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppCardCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppCardItem"
                }
              }
            },
            "description": "App card item created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create app card item",
        "tags": ["app_cards"]
      }
    },
    "/v2/boards/{board_id}/app_cards/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific app card item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-app-card-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppCardItem"
                }
              }
            },
            "description": "App card item retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get app card item",
        "tags": ["app_cards"]
      },
      "patch": {
        "description": "Updates an app card item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-app-card-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppCardUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppCardItem"
                }
              }
            },
            "description": "Card item updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update app card item",
        "tags": ["app_cards"]
      },
      "delete": {
        "description": "Deletes an app card item from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-app-card-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete an item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "App card item deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete app card item",
        "tags": ["app_cards"]
      }
    },
    "/v2/boards/{board_id}/cards": {
      "post": {
        "description": "Adds a card item to a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-card-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardItem"
                }
              }
            },
            "description": "Card item created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create card item",
        "tags": ["cards"]
      }
    },
    "/v2/boards/{board_id}/cards/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific card item on a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-card-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardItem"
                }
              }
            },
            "description": "Card item retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get card item",
        "tags": ["cards"]
      },
      "patch": {
        "description": "Updates a card item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-card-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardItem"
                }
              }
            },
            "description": "Card item updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update card item",
        "tags": ["cards"]
      },
      "delete": {
        "description": "Deletes a card item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-card-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Card item deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete card item",
        "tags": ["cards"]
      }
    },
    "/v2/boards/{board_id}/documents": {
      "post": {
        "description": "Adds a document item to a board by specifying the URL where the document is hosted.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-document-item-using-url",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentItem"
                }
              }
            },
            "description": "Document item created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create document item using URL",
        "tags": ["documents"]
      }
    },
    "/v2/boards/{board_id}/documents/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific document item on a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-document-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentItem"
                }
              }
            },
            "description": "Document item retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get document item",
        "tags": ["documents"]
      },
      "patch": {
        "description": "Updates a document item on a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-document-item-using-url",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentItem"
                }
              }
            },
            "description": "Document item updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update document item using URL",
        "tags": ["documents"]
      },
      "delete": {
        "description": "Deletes a document item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-document-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Document item deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete document item",
        "tags": ["documents"]
      }
    },
    "/v2/boards/{board_id}/embeds": {
      "post": {
        "description": "Adds an embed item containing external content to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-embed-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbedCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbedItem"
                }
              }
            },
            "description": "Embed item created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create embed item",
        "tags": ["embeds"]
      }
    },
    "/v2/boards/{board_id}/embeds/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific embed item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-embed-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbedItem"
                }
              }
            },
            "description": "Embed item retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get embed item",
        "tags": ["embeds"]
      },
      "patch": {
        "description": "Updates an embed item on a board based on the data properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-embed-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbedUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbedItem"
                }
              }
            },
            "description": "Embed item updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update embed item",
        "tags": ["embeds"]
      },
      "delete": {
        "description": "Deletes an embed item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-embed-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Embed item deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete embed item",
        "tags": ["embeds"]
      }
    },
    "/v2/boards/{board_id}/images": {
      "post": {
        "description": "Adds an image item to a board by specifying an image URL.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-image-item-using-url",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageItem"
                }
              }
            },
            "description": "Image item created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create image item using URL",
        "tags": ["images"]
      }
    },
    "/v2/boards/{board_id}/images/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific image item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-image-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageItem"
                }
              }
            },
            "description": "Image item retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get image item",
        "tags": ["images"]
      },
      "patch": {
        "description": "Updates an image item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-image-item-using-url",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageItem"
                }
              }
            },
            "description": "Image item updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update image item using URL",
        "tags": ["images"]
      },
      "delete": {
        "description": "Deletes an image item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-image-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Image item deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete image item",
        "tags": ["images"]
      }
    },
    "/v2/boards/{board_id}/items": {
      "get": {
        "description": "Retrieves a list of items for a specific board. You can retrieve all items on the board, a list of child items inside a parent item, or a list of specific types of items by specifying URL query parameter values.\n\nThis method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "get-items",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "maximum": 50,
              "minimum": 10,
              "type": "string",
              "description": "The maximum number of results to return per call. If the number of items in the response is greater than the limit specified, the response returns the cursor parameter with a value.",
              "default": "10"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "description": "If you want to get a list of items of a specific type, specify an item type. For example, if you want to retrieve the list of card items, set `type` to `cards`.\n Possible values: `app_card`, `card`, `document`, `embed`, `frame`, `image`, `shape`, `sticky_note`, `text`"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string",
              "description": "A cursor-paginated method returns a portion of the total set of results based on the limit specified and a `cursor` that points to the next portion of the results. To retrieve the next portion of the collection, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request."
            }
          },
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to retrieve the list of available items.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericItemCursorPaged"
                }
              }
            },
            "description": "Items retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get items on board",
        "tags": ["items"]
      }
    },
    "/v2/boards/{board_id}/items/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-specific-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericItem"
                }
              }
            },
            "description": "Item retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get specific item on board",
        "tags": ["items"]
      },
      "patch": {
        "description": "Updates the position or the parent of an item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-item-position-or-parent",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericItemUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericItem"
                }
              }
            },
            "description": "Item updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update item position or parent",
        "tags": ["items"]
      },
      "delete": {
        "description": "Deletes an item from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Item deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete item",
        "tags": ["items"]
      }
    },
    "/v2/boards/{board_id}/members": {
      "post": {
        "description": "Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board's [Sharing policy](https://developers.miro.com/reference/rest-api-policy-data-model#sharing-policy), there might be various scenarios where membership in the team is required in order to share the board with a user. For more information on sharing policy and different scenarios, see [Sharing policy](https://developers.miro.com/reference/rest-api-policy-data-model#sharing-policy).<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "share-board",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) to which the board member belongs.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardMembersInvite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationResult"
                }
              }
            },
            "description": "Board members invited"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Share board",
        "tags": ["board_members"]
      },
      "get": {
        "description": "Retrieves a pageable list of members for a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-board-members",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "string",
              "description": "The maximum number of board members to retrieve.\nDefault: `20`."
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string",
              "description": "The (zero-based) offset of the first item in the collection to return.\nDefault: `0`."
            }
          },
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) to which the board member belongs.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardMembersPagedResponse"
                }
              }
            },
            "description": "Board members retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get all board members",
        "tags": ["board_members"]
      }
    },
    "/v2/boards/{board_id}/members/{board_member_id}": {
      "get": {
        "description": "Retrieves information for a board member.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-specific-board-member",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) to which the board member belongs.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier (ID) of the board member whose role you want to retrieve.",
            "in": "path",
            "name": "board_member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardMemberWithLinks"
                }
              }
            },
            "description": "Board member retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get specific board member",
        "tags": ["board_members"]
      },
      "patch": {
        "description": "Updates the role of a board member.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-board-member",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to update the role of the board member.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier (ID) of the board member whose role you want to update.",
            "in": "path",
            "name": "board_member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardMemberChanges"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardMemberWithLinks"
                }
              }
            },
            "description": "Board member updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update board member",
        "tags": ["board_members"]
      },
      "delete": {
        "description": "Removes a board member from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "remove-board-member",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete an item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier (ID) of the board member whose role you want to delete.",
            "in": "path",
            "name": "board_member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Board member deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Remove board member",
        "tags": ["board_members"]
      }
    },
    "/v2/boards/{board_id}/shapes": {
      "post": {
        "description": "Adds a shape item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-shape-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShapeCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeItem"
                }
              }
            },
            "description": "Shape item created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create shape item",
        "tags": ["shapes"]
      }
    },
    "/v2/boards/{board_id}/shapes/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific shape item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-shape-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeItem"
                }
              }
            },
            "description": "Shape item retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get shape item",
        "tags": ["shapes"]
      },
      "patch": {
        "description": "Updates a shape item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-shape-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShapeUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeItem"
                }
              }
            },
            "description": "Shape item updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update shape item",
        "tags": ["shapes"]
      },
      "delete": {
        "description": "Deletes a shape item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-shape-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Shape item deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete shape item",
        "tags": ["shapes"]
      }
    },
    "/v2/boards/{board_id}/sticky_notes": {
      "post": {
        "description": "Adds a sticky note item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-sticky-note-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StickyNoteCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StickyNoteItem"
                }
              }
            },
            "description": "Sticky Note item created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create sticky note item",
        "tags": ["sticky_notes"]
      }
    },
    "/v2/boards/{board_id}/sticky_notes/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific sticky note item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-sticky-note-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StickyNoteItem"
                }
              }
            },
            "description": "Sticky Note item retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get sticky note item",
        "tags": ["sticky_notes"]
      },
      "patch": {
        "description": "Updates a sticky note item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-sticky-note-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StickyNoteUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StickyNoteItem"
                }
              }
            },
            "description": "Sticky Note item updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update sticky note item",
        "tags": ["sticky_notes"]
      },
      "delete": {
        "description": "Deletes a sticky note item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-sticky-note-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Sticky Note item deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete sticky note item",
        "tags": ["sticky_notes"]
      }
    },
    "/v2/boards/{board_id}/texts": {
      "post": {
        "description": "Adds a text item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-text-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextItem"
                }
              }
            },
            "description": "Text item created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create text item",
        "tags": ["texts"]
      }
    },
    "/v2/boards/{board_id}/texts/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific text item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-text-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextItem"
                }
              }
            },
            "description": "Text item retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get text item",
        "tags": ["texts"]
      },
      "patch": {
        "description": "Updates a text item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-text-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextItem"
                }
              }
            },
            "description": "Text item updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update text item",
        "tags": ["texts"]
      },
      "delete": {
        "description": "Deletes a text item from the board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-text-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Text item deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete text item",
        "tags": ["texts"]
      }
    },
    "/v2/boards/{board_id}/frames": {
      "post": {
        "description": "Adds a frame to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-frame-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create a frame.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FrameCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FrameItem"
                }
              }
            },
            "description": "Frame created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create frame",
        "tags": ["frames"]
      }
    },
    "/v2/boards/{board_id}/frames/{item_id}": {
      "get": {
        "description": "Retrieves information for a specific frame on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-frame-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that contains the frame that you want to retrieve",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the frame](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FrameItem"
                }
              }
            },
            "description": "Frame retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get frame",
        "tags": ["frames"]
      },
      "patch": {
        "description": "Updates a frame on a board based on the data, style, or geometry properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-frame-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the frame.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the frame](https://developers.miro.com/reference/rest-api-item-model) that you want to update.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FrameUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FrameItem"
                }
              }
            },
            "description": "Frame updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update frame",
        "tags": ["frames"]
      },
      "delete": {
        "description": "Deletes a frame from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-frame-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the frame.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the frame](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Frame deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete frame",
        "tags": ["frames"]
      }
    },
    "/v2/boards/{board_id_PlatformContainers}/items": {
      "get": {
        "description": "Retrieves a list of items within a specific frame. A frame is a parent item and all items within a frame are child items. This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "get-items-within-frame",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that contains the frame for which you want to retrieve the list of available items.",
            "in": "path",
            "name": "board_id_PlatformContainers",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the frame for which you want to retrieve the list of available items.",
            "in": "query",
            "name": "parent_item_id",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "maximum": 50,
              "minimum": 10,
              "type": "string",
              "description": "The maximum number of results to return per call. If the number of items in the response is greater than the limit specified, the response returns the cursor parameter with a value.",
              "default": "10"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "description": "If you want to get a list of items of a specific type, specify an item type. For example, if you want to retrieve the list of card items, set `type` to `cards`.\n Possible values: `app_card`, `card`, `document`, `embed`, `frame`, `image`, `shape`, `sticky_note`, `text`"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string",
              "description": "A cursor-paginated method returns a portion of the total set of results based on the limit specified and a `cursor` that points to the next portion of the results. To retrieve the next portion of the collection, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericItemCursorPaged"
                }
              }
            },
            "description": "Items within frame retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get items within frame",
        "tags": ["items"]
      }
    },
    "/v2-experimental/boards/{board_id}/connectors": {
      "post": {
        "description": "Adds a connector to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "create-connector",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to create the connector.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorCreationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorWithLinks"
                }
              }
            },
            "description": "Connector created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create connector",
        "tags": ["connectors"]
      },
      "get": {
        "description": "Retrieves a list of connectors for a specific board.\n\nThis method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "get-connectors",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "maximum": 50,
              "minimum": 10,
              "type": "string",
              "description": "The maximum number of results to return per call. If the number of connectors in the response is greater than the limit specified, the response returns the cursor parameter with a value.",
              "default": "10"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string",
              "description": "A cursor-paginated method returns a portion of the total set of results based on the limit specified and a `cursor` that points to the next portion of the results. To retrieve the next portion of the collection, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request."
            }
          },
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a list of connectors.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorsCursorPaged"
                }
              }
            },
            "description": "Connectors retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get connectors",
        "tags": ["connectors"]
      }
    },
    "/v2-experimental/boards/{board_id}/connectors/{connector_id}": {
      "get": {
        "description": "Retrieves information for a specific connector on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-connector",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific connector.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the connector](https://developers.miro.com/reference/rest-api-connector-model) that you want to retrieve.",
            "in": "path",
            "name": "connector_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorWithLinks"
                }
              }
            },
            "description": "Connector retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get specific connector",
        "tags": ["connectors"]
      },
      "patch": {
        "description": "Updates a connector on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>",
        "operationId": "update-connector",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to update the connector.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the connector](https://developers.miro.com/reference/rest-api-connector-model) that you want to update.",
            "in": "path",
            "name": "connector_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorChangesData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorWithLinks"
                }
              }
            },
            "description": "Connector updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update connector",
        "tags": ["connectors"]
      },
      "delete": {
        "description": "Deletes the specified connector from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>",
        "operationId": "delete-connector",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the connector.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the connector](https://developers.miro.com/reference/rest-api-connector-model) that you want to delete.",
            "in": "path",
            "name": "connector_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Connector deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete connector",
        "tags": ["connectors"]
      }
    },
    "/v2/boards/{board_id}/items/{item_id}/tags": {
      "get": {
        "description": "Retrieves all the tags from the specified item.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-tags-from-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with the item whose tags you want to retrieve.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) whose tags you want to retrieve.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTagsResponse"
                }
              }
            },
            "description": "Get tags from an item"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get tags from item",
        "tags": ["tags"]
      }
    },
    "/v2/boards/{board_id}/tags": {
      "post": {
        "description": "Creates a tag on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "create-tag",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the tag.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagWithLinks"
                }
              }
            },
            "description": "Tag created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create tag",
        "tags": ["tags"]
      },
      "get": {
        "description": "Retrieves all the tags from the specified board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-tags-from-board",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "string",
              "description": "The maximum number of items that can be returned for a single request.\nDefault: `20`."
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string",
              "description": "The displacement of the first item in the collection to return.\nDefault: `0`."
            }
          },
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) whose tags you want to retrieve.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsPagedResponse"
                }
              }
            },
            "description": "Board tags retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get tags from board",
        "tags": ["tags"]
      }
    },
    "/v2/boards/{board_id}/tags/{tag_id}": {
      "get": {
        "description": "Retrieves information for a specific tag.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-tag",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to retrieve a specific tag.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to retrieve.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagWithLinks"
                }
              }
            },
            "description": "Tag retrieved by id"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get tag",
        "tags": ["tags"]
      },
      "patch": {
        "description": "Updates a tag based on the data properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "update-tag",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update a specific tag.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to update.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagWithLinks"
                }
              }
            },
            "description": "Tag updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update tag",
        "tags": ["tags"]
      },
      "delete": {
        "description": "Deletes the specified tag from the board. The tag is also removed from all cards and sticky notes on the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "delete-tag",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to delete a specific tag.",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to delete.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Tag deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete tag",
        "tags": ["tags"]
      }
    },
    "/v2/boards/{board_id_PlatformTags}/items": {
      "get": {
        "description": "Retrieves all the items that have the specified tag.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "get-items-by-tag",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "string",
              "description": "The maximum number of items that can be returned for a single request.\nDefault: `20`."
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string",
              "description": "The displacement of the first item in the collection to return.\nDefault: `0`."
            }
          },
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to retrieve a specific tag.",
            "in": "path",
            "name": "board_id_PlatformTags",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to retrieve.",
            "in": "query",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemPagedResponse"
                }
              }
            },
            "description": "Item with certain tag"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get items by tag",
        "tags": ["tags"]
      }
    },
    "/v2/boards/{board_id_PlatformTags}/items/{item_id}": {
      "post": {
        "description": "Attach an existing tag to the specified item. Card and sticky note items can have up to 8 tags.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "attach-tag-to-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with the item that you want to add a tag to.",
            "in": "path",
            "name": "board_id_PlatformTags",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) to which you want to add a tag.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) you want to add to the item.",
            "in": "query",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Add a tag to an item"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Attach tag to item",
        "tags": ["tags"]
      },
      "delete": {
        "description": "Removes the specified tag from the specified item. The tag still exists on the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>",
        "operationId": "remove-tag-from-item",
        "parameters": [
          {
            "description": "[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with the item that you want to remove a tag from.",
            "in": "path",
            "name": "board_id_PlatformTags",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to remove the tag from.",
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to remove from the item.",
            "in": "query",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Tag removed from an item"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code of the error",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error",
                      "example": "Error message"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Status code of the error",
                      "format": "int32",
                      "example": 400
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the error",
                      "example": "error"
                    }
                  },
                  "description": "Test error obj"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Remove tag from item",
        "tags": ["tags"]
      }
    },
    "/v2/orgs/{org_id}": {
      "get": {
        "description": "Retrieves organization information.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-get-organization",
        "parameters": [
          {
            "description": "id of the organization",
            "example": 3074457345821141000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Organization found"
          }
        },
        "summary": "Get organization info",
        "tags": ["organizations"]
      }
    },
    "/v2/orgs/{org_id}/data-classification-settings": {
      "get": {
        "description": "Retrieves board classification settings for an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-dataclassification-organization-settings-get",
        "parameters": [
          {
            "description": "id of the organization",
            "example": 3074457345821141000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataClassificationOrganizationSettings"
                }
              }
            },
            "description": "Organization board classification settings"
          },
          "400": {
            "description": "Arguments are not valid"
          },
          "401": {
            "description": "Authorization failure"
          },
          "403": {
            "description": "Illegal access"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get organization settings",
        "tags": ["Board classification: Organization level"]
      }
    },
    "/v2/orgs/{org_id}/default_teams_settings": {
      "get": {
        "description": "Retrieves default team settings of an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-get-default-team-settings",
        "parameters": [
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSettings"
                }
              }
            },
            "description": "Team settings"
          }
        },
        "summary": "Get default team settings",
        "tags": ["Team settings api"]
      }
    },
    "/v2/orgs/{org_id}/members": {
      "get": {
        "description": "Retrieves organization members based on the organization ID and the cursor, or based on the user emails provided in the request.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-get-organization-members",
        "parameters": [
          {
            "description": "id of the organization",
            "example": 3074457345821141000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "query to be used for organization members retrieval",
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrganizationMembersSearchQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrganizationMembersSearchResponse"
                    },
                    {
                      "$ref": "#/components/schemas/OrganizationMembersSearchByEmailsResponse"
                    }
                  ]
                }
              }
            },
            "description": "Organization members queries successfully"
          }
        },
        "summary": "Get organization members",
        "tags": ["organizations"]
      }
    },
    "/v2/orgs/{org_id}/members/{member_id}": {
      "get": {
        "description": "Retrieves organization member information for an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-get-organization-member",
        "parameters": [
          {
            "description": "id of the organization",
            "example": 3074457345821141000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the organization member",
            "example": 3055557345821141000,
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMember"
                }
              }
            },
            "description": "Organization member found"
          }
        },
        "summary": "Get organization member",
        "tags": ["organizations"]
      }
    },
    "/v2/orgs/{org_id}/teams": {
      "get": {
        "description": "Retrieves list of teams in an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-get-teams",
        "parameters": [
          {
            "description": "Limit of teams in result list",
            "example": 100,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Team id that will be used to find team next to this id in the sorted list",
            "example": 3055557345821140500,
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering query",
            "example": "name=\"My team\"",
            "in": "query",
            "name": "filterQuery",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            },
            "description": "Team object"
          }
        },
        "summary": "List teams",
        "tags": ["Teams api"]
      },
      "post": {
        "description": "Creates a new team in an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-create-team",
        "parameters": [
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Team object"
          }
        },
        "summary": "Create team",
        "tags": ["Teams api"]
      }
    },
    "/v2/orgs/{org_id}/teams/{team_id}": {
      "delete": {
        "description": "Deletes an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-delete-team",
        "parameters": [
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Deleted successfully"
          }
        },
        "summary": "Delete team",
        "tags": ["Teams api"]
      },
      "get": {
        "description": "Retrieves team information for an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-get-team",
        "parameters": [
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Team object"
          }
        },
        "summary": "Get team",
        "tags": ["Teams api"]
      },
      "patch": {
        "description": "Updates an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-update-team",
        "parameters": [
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamChanges"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Team object"
          }
        },
        "summary": "Update team",
        "tags": ["Teams api"]
      }
    },
    "/v2/orgs/{org_id}/teams/{team_id}/boards/{board_id}/data-classification": {
      "get": {
        "description": "Retrieves board classification for a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-dataclassification-board-get",
        "parameters": [
          {
            "description": "id of the organization",
            "example": 3074457345821141000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the team",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the board that you want to retrieve.",
            "example": "o9J_kzlUDmo=",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardDataClassificationLabel"
                }
              }
            },
            "description": "Board classification"
          },
          "400": {
            "description": "Arguments are not valid"
          },
          "401": {
            "description": "Authorization failure"
          },
          "403": {
            "description": "Illegal access"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get board classification",
        "tags": ["Board classification: Board level"]
      },
      "post": {
        "description": "Updates board classification for an existing board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-dataclassification-board-set",
        "parameters": [
          {
            "description": "id of the organization",
            "example": 3074457345821141000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the team",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the board that you want to update.",
            "example": "o9J_kzlUDmo=",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataClassificationLabelId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardDataClassificationLabel"
                }
              }
            },
            "description": "Board classification"
          },
          "400": {
            "description": "Arguments are not valid"
          },
          "401": {
            "description": "Authorization failure"
          },
          "403": {
            "description": "Illegal access"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Update board classification",
        "tags": ["Board classification: Board level"]
      }
    },
    "/v2/orgs/{org_id}/teams/{team_id}/data-classification": {
      "patch": {
        "description": "Updates board classification for not-classified only or all boards in an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-dataclassification-team-boards-bulk",
        "parameters": [
          {
            "description": "id of the organization",
            "example": 3074457345821141000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the team",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBoardsDataClassificationLabelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBoardsDataClassificationLabel"
                }
              }
            },
            "description": "Number of updated boards"
          },
          "400": {
            "description": "Arguments are not valid"
          },
          "401": {
            "description": "Authorization failure"
          },
          "403": {
            "description": "Illegal access"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Bulk update boards classification",
        "tags": ["Board classification: Team level"]
      }
    },
    "/v2/orgs/{org_id}/teams/{team_id}/data-classification-settings": {
      "get": {
        "description": "Retrieves board classification settings for an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-dataclassification-team-settings-get",
        "parameters": [
          {
            "description": "id of the organization",
            "example": 3074457345821141000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the team",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataClassificationTeamSettings"
                }
              }
            },
            "description": "Team board classification settings"
          },
          "400": {
            "description": "Arguments are not valid"
          },
          "401": {
            "description": "Authorization failure"
          },
          "403": {
            "description": "Illegal access"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get team settings",
        "tags": ["Board classification: Team level"]
      },
      "patch": {
        "description": "Updates board classification settings for an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-dataclassification-team-settings-set",
        "parameters": [
          {
            "description": "id of the organization",
            "example": 3074457345821141000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the team",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataClassificationTeamSettings"
                }
              }
            },
            "description": "Team board classification settings"
          },
          "400": {
            "description": "Arguments are not valid"
          },
          "401": {
            "description": "Authorization failure"
          },
          "403": {
            "description": "Illegal access"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Update team settings",
        "tags": ["Board classification: Team level"]
      }
    },
    "/v2/orgs/{org_id}/teams/{team_id}/members": {
      "get": {
        "description": "Retrieves team members by cursor.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-get-team-members",
        "parameters": [
          {
            "description": "Limit for the number of team members returned in the result list.",
            "example": 100,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the team member used as the reference for pagination. To retrieve the first portion of the collection don't pass a cursor value. To retrieve the next portion of the collection, set the `cursor` parameter value to the ID of the last team member you received in the response of the previous request.",
            "example": 3055557345821140500,
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering query",
            "example": "role=\"member\"",
            "in": "query",
            "name": "filterQuery",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamMember"
                  }
                }
              }
            },
            "description": "Team member object"
          }
        },
        "summary": "List team members",
        "tags": ["Team members api"]
      },
      "post": {
        "description": "Invites a new member to an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-invite-team-member",
        "parameters": [
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamMemberInvite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationResult"
                }
              }
            },
            "description": "Invitation result object"
          }
        },
        "summary": "Invite team members",
        "tags": ["Team members api"]
      }
    },
    "/v2/orgs/{org_id}/teams/{team_id}/members/{member_id}": {
      "delete": {
        "description": "Deletes team member from team by id.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-delete-team-member",
        "parameters": [
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team member.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Deleted successfully"
          }
        },
        "summary": "Delete team member from team",
        "tags": ["Team members api"]
      },
      "get": {
        "description": "Retrieves team member by id.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-get-team-member",
        "parameters": [
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team member.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMember"
                }
              }
            },
            "description": "Team member object"
          }
        },
        "summary": "Get team member",
        "tags": ["Team members api"]
      },
      "patch": {
        "description": "Updates team member role in team by id.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-update-team-member",
        "parameters": [
          {
            "description": "The id of an Organization.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of a Team member.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamMemberChanges"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMember"
                }
              }
            },
            "description": "Team member object"
          }
        },
        "summary": "Update team member",
        "tags": ["Team members api"]
      }
    },
    "/v2/teams_settings/{team_id}": {
      "get": {
        "description": "Retrieves team settings of an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-get-team-settings",
        "parameters": [
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSettings"
                }
              }
            },
            "description": "Team settings"
          }
        },
        "summary": "Get team settings",
        "tags": ["Team settings api"]
      },
      "patch": {
        "description": "Updates team settings of an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>",
        "operationId": "enterprise-update-team-settings",
        "parameters": [
          {
            "description": "The id of a Team.",
            "example": 3074457345618265000,
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamSettingsChanges"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSettings"
                }
              }
            },
            "description": "Team settings"
          }
        },
        "summary": "Update team settings",
        "tags": ["Team settings api"]
      }
    }
  },
  "components": {
    "schemas": {
      "AppCardCreateRequest": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AppCardDataChanges"
          },
          "style": {
            "$ref": "#/components/schemas/AppCardStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "AppCardDataChanges": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A short text description to add context about the app card.",
            "example": "Sample app card description"
          },
          "fields": {
            "type": "array",
            "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "status": {
            "type": "string",
            "description": "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.\nPossible values: `disconnected`, `connected`, `disabled`",
            "default": "disconnected",
            "enum": ["disconnected", "connected", "disabled"]
          },
          "title": {
            "type": "string",
            "description": "A short text header to identify the app card.",
            "default": "sample app card item"
          }
        },
        "description": "For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "AppCardItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "data": {
            "$ref": "#/components/schemas/AppCardData"
          },
          "style": {
            "$ref": "#/components/schemas/AppCardStyle"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "parent": {
            "$ref": "#/components/schemas/ParentLinksEnvelope"
          },
          "links": {
            "$ref": "#/components/schemas/WidgetLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "app_card"
          }
        }
      },
      "AppCardStyle": {
        "type": "object",
        "properties": {
          "fillColor": {
            "type": "string",
            "description": "Hex value of the border color of the app card.\nDefault: `#2d9bf0`.",
            "example": "#2d9bf0"
          }
        },
        "description": "Contains information about the style of an app card item, such as the fill color. For information about the JSON properties, see [Style](https://developers.miro.com/reference/style)."
      },
      "AppCardUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AppCardDataChanges"
          },
          "style": {
            "$ref": "#/components/schemas/AppCardStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "Board": {
        "required": ["description", "id", "name", "type"],
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserInfoShort"
          },
          "currentUserMembership": {
            "$ref": "#/components/schemas/BoardMember"
          },
          "description": {
            "type": "string",
            "description": "Description of the board.",
            "example": "Sample board description"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of the board.",
            "example": "uXjVOD6LSME="
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserInfoShort"
          },
          "name": {
            "type": "string",
            "description": "Name of the board.",
            "example": "Sample board name"
          },
          "owner": {
            "$ref": "#/components/schemas/UserInfoShort"
          },
          "picture": {
            "$ref": "#/components/schemas/Picture"
          },
          "policy": {
            "$ref": "#/components/schemas/BoardPolicy"
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          },
          "type": {
            "type": "string",
            "description": "Type of the object that is returned. In this case, type returns `board`.",
            "example": "board"
          },
          "viewLink": {
            "type": "string",
            "description": "URL to view the board.",
            "example": "https://miro.com/app/board/uXjVOD6LSME="
          }
        },
        "description": "Contains the result data."
      },
      "BoardChanges": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string",
            "description": "Description of the board."
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "description": "Name for the board.",
            "default": "Untitled"
          },
          "policy": {
            "$ref": "#/components/schemas/BoardPolicyChange"
          },
          "teamId": {
            "type": "string",
            "description": "Unique identifier (ID) of the team where the board must be placed."
          }
        }
      },
      "BoardLinks": {
        "type": "object",
        "properties": {
          "related": {
            "type": "string",
            "description": "Link to obtain information about the board members associated with the board.",
            "example": "http://api.miro.com/v2/boards/o9J_k1JKioQ=/members?limit=20&offset=0"
          },
          "self": {
            "type": "string",
            "description": "Link to obtain information about the current board.",
            "example": "http://api.miro.com/v2/boards/o9J_k1JKioQ="
          }
        },
        "description": "Contains applicable links for the board."
      },
      "BoardMember": {
        "required": ["id", "name", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of the user.",
            "format": "int64",
            "example": 3074457353169356300
          },
          "name": {
            "type": "string",
            "description": "Name of the user.",
            "example": "John Smith"
          },
          "role": {
            "type": "string",
            "description": "Role of the board member.\nPossible values: `viewer`, `commenter`, `editor`, `coowner`, `owner`, `guest`",
            "enum": ["viewer", "commenter", "editor", "coowner", "owner", "guest"]
          },
          "type": {
            "type": "string",
            "description": "Type of the object that is returned. In this case, `type` returns `board_member`.",
            "example": "board_member"
          }
        },
        "description": "Contains the current user's board membership details. The current user could be different from the board owner."
      },
      "BoardMemberChanges": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Role of the board member.\nPossible values: `viewer`, `commenter`, `editor`, `coowner`, `owner`, `guest`",
            "default": "commenter",
            "enum": ["viewer", "commenter", "editor", "coowner", "owner", "guest"]
          }
        }
      },
      "BoardMemberWithLinks": {
        "required": ["id", "name", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of the user.",
            "format": "int64",
            "example": 3074457353169356300
          },
          "name": {
            "type": "string",
            "description": "Name of the user.",
            "example": "John Smith"
          },
          "role": {
            "type": "string",
            "description": "Role of the board member.\nPossible values: `viewer`, `commenter`, `editor`, `coowner`, `owner`, `guest`",
            "enum": ["viewer", "commenter", "editor", "coowner", "owner", "guest"]
          },
          "links": {
            "$ref": "#/components/schemas/SelfLink"
          },
          "type": {
            "type": "string",
            "description": "Type of the object that is returned. In this case, `type` returns `board_member`.",
            "example": "board_member"
          }
        }
      },
      "BoardMembersInvite": {
        "required": ["emails"],
        "type": "object",
        "properties": {
          "emails": {
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "description": "Email IDs of the users you want to invite to the board. You can invite up to 20 members per call.",
            "items": {
              "type": "string",
              "description": "Email IDs of the users you want to invite to the board. You can invite up to 20 members per call."
            }
          },
          "role": {
            "type": "string",
            "description": "Role of the board member.\nPossible values: `viewer`, `commenter`, `editor`, `coowner`, `owner`, `guest`",
            "default": "commenter",
            "enum": ["viewer", "commenter", "editor", "coowner", "owner", "guest"]
          },
          "message": {
            "type": "string",
            "description": "The message that will be sent in the invitation email.",
            "example": "Hey there! Join my board and let's collaborate on this project!"
          }
        }
      },
      "BoardMembersPagedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains the result data.",
            "items": {
              "$ref": "#/components/schemas/BoardMember"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).",
            "format": "int64",
            "example": 1
          },
          "size": {
            "type": "integer",
            "description": "Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.",
            "format": "int32",
            "example": 1
          },
          "offset": {
            "type": "integer",
            "description": "Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.",
            "format": "int32",
            "example": 0
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.\n",
            "format": "int32",
            "example": 20
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "BoardPermissionsPolicy": {
        "type": "object",
        "properties": {
          "collaborationToolsStartAccess": {
            "type": "string",
            "description": "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.\nPossible values: `all_editors`, `board_owners_and_coowners`",
            "default": "all_editors",
            "enum": ["all_editors", "board_owners_and_coowners"]
          },
          "copyAccess": {
            "type": "string",
            "description": "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.\nPossible values: `anyone`, `team_members`, `team_editors`, `board_owner`",
            "default": "anyone",
            "enum": ["anyone", "team_members", "team_editors", "board_owner"]
          },
          "sharingAccess": {
            "type": "string",
            "description": "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.\nPossible values: `team_members_with_editing_rights`, `owner_and_coowners`",
            "default": "team_members_with_editing_rights",
            "enum": ["team_members_with_editing_rights", "owner_and_coowners"]
          }
        },
        "description": "Defines the permissions policies for the board. For more information, see [Permissions policy](https://developers.miro.com/reference/rest-api-policy-data-model#permissions-policy)."
      },
      "BoardPolicy": {
        "type": "object",
        "properties": {
          "permissionsPolicy": {
            "$ref": "#/components/schemas/BoardPermissionsPolicy"
          },
          "sharingPolicy": {
            "$ref": "#/components/schemas/BoardSharingPolicy"
          }
        },
        "description": "Defines the permissions policies and sharing policies for the board. For more information, see [Permissions policy](https://developers.miro.com/reference/rest-api-policy-data-model)."
      },
      "BoardPolicyChange": {
        "type": "object",
        "properties": {
          "permissionsPolicy": {
            "$ref": "#/components/schemas/BoardPermissionsPolicy"
          },
          "sharingPolicy": {
            "$ref": "#/components/schemas/BoardSharingPolicyChange"
          }
        },
        "description": "Defines the permissions policies and sharing policies for the board. For more information, see [Permissions policy](https://developers.miro.com/reference/rest-api-policy-data-model)."
      },
      "BoardSharingPolicy": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "description": "Defines the public-level access to the board.\nPossible values: `private`, `view`, `edit`, `comment`",
            "enum": ["private", "view", "edit", "comment"]
          },
          "inviteToAccountAndBoardLinkAccess": {
            "type": "string",
            "description": "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access`.\nPossible values: `viewer`, `commenter`, `editor`, `coowner`, `owner`, `guest`, `no_access`",
            "default": "no_access",
            "enum": ["viewer", "commenter", "editor", "coowner", "owner", "guest", "no_access"]
          },
          "organizationAccess": {
            "type": "string",
            "description": "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.\nPossible values: `private`, `view`, `comment`, `edit`",
            "default": "private",
            "enum": ["private", "view", "comment", "edit"]
          },
          "teamAccess": {
            "type": "string",
            "description": "Defines the team-level access to the board.\nPossible values: `private`, `view`, `comment`, `edit`",
            "enum": ["private", "view", "comment", "edit"]
          }
        },
        "description": "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access. For more information, see [Sharing policy](https://developers.miro.com/reference/rest-api-policy-data-model#sharing-policy)."
      },
      "BoardSharingPolicyChange": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "description": "Defines the public-level access to the board.\nPossible values: `private`, `view`, `edit`, `comment`",
            "default": "private",
            "enum": ["private", "view", "edit", "comment"]
          },
          "inviteToAccountAndBoardLinkAccess": {
            "type": "string",
            "description": "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access` regardless of the value that you assign for this parameter.\nPossible values: `viewer`, `commenter`, `editor`, `no_access`",
            "default": "no_access",
            "enum": ["viewer", "commenter", "editor", "no_access"]
          },
          "organizationAccess": {
            "type": "string",
            "description": "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.\nPossible values: `private`, `view`, `comment`, `edit`",
            "default": "private",
            "enum": ["private", "view", "comment", "edit"]
          },
          "teamAccess": {
            "type": "string",
            "description": "Defines the team-level access to the board.\nPossible values: `private`, `view`, `comment`, `edit`",
            "default": "private",
            "enum": ["private", "view", "comment", "edit"]
          }
        },
        "description": "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access. For more information, see [Sharing policy](https://developers.miro.com/reference/rest-api-policy-data-model#sharing-policy)."
      },
      "BoardWithLinks": {
        "required": ["description", "id", "name", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of the board.",
            "example": "uXjVOD6LSME="
          },
          "name": {
            "type": "string",
            "description": "Name of the board.",
            "example": "Sample board name"
          },
          "description": {
            "type": "string",
            "description": "Description of the board.",
            "example": "Sample board description"
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          },
          "picture": {
            "$ref": "#/components/schemas/Picture"
          },
          "policy": {
            "$ref": "#/components/schemas/BoardPolicy"
          },
          "viewLink": {
            "type": "string",
            "description": "URL to view the board.",
            "example": "https://miro.com/app/board/uXjVOD6LSME="
          },
          "owner": {
            "$ref": "#/components/schemas/UserInfoShort"
          },
          "currentUserMembership": {
            "$ref": "#/components/schemas/BoardMember"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserInfoShort"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserInfoShort"
          },
          "links": {
            "$ref": "#/components/schemas/BoardLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of the object that is returned. In this case, type returns `board`.",
            "example": "board"
          }
        }
      },
      "BoardsPagedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains the result data.",
            "items": {
              "$ref": "#/components/schemas/Board"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).",
            "format": "int64",
            "example": 1
          },
          "size": {
            "type": "integer",
            "description": "Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.",
            "format": "int32",
            "example": 1
          },
          "offset": {
            "type": "integer",
            "description": "Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.",
            "format": "int32",
            "example": 0
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.\n",
            "format": "int32",
            "example": 20
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CardCreateRequest": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CardData"
          },
          "style": {
            "$ref": "#/components/schemas/CardStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "CardItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "data": {
            "$ref": "#/components/schemas/CardData"
          },
          "style": {
            "$ref": "#/components/schemas/CardStyle"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "parent": {
            "$ref": "#/components/schemas/ParentLinksEnvelope"
          },
          "links": {
            "$ref": "#/components/schemas/WidgetLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "card"
          }
        }
      },
      "CardStyle": {
        "type": "object",
        "properties": {
          "cardTheme": {
            "type": "string",
            "description": "Hex value of the border color of the card.\nDefault: `#2d9bf0`.",
            "example": "#2d9bf0"
          }
        },
        "description": "Contains information about the style of a card item, such as the card theme. For information about the JSON properties, see [Style](https://developers.miro.com/reference/style)."
      },
      "CardUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CardData"
          },
          "style": {
            "$ref": "#/components/schemas/CardStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "DocumentCreateRequest": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentUrlData"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/FixedRatioGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "DocumentItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "data": {
            "$ref": "#/components/schemas/DocumentData"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "parent": {
            "$ref": "#/components/schemas/ParentLinksEnvelope"
          },
          "links": {
            "$ref": "#/components/schemas/WidgetLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "document"
          }
        }
      },
      "DocumentUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentUrlDataChanges"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/FixedRatioGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "DocumentUrlData": {
        "required": ["url"],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A short text header to identify the document.",
            "example": "Sample document title"
          },
          "url": {
            "type": "string",
            "description": "URL where the document is hosted.",
            "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
            "default": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
          }
        },
        "description": "For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "DocumentUrlDataChanges": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A short text header to identify the document."
          },
          "url": {
            "type": "string",
            "description": "URL where the document is hosted.",
            "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
          }
        },
        "description": "For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "EmbedCreateRequest": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EmbedUrlData"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/FixedRatioNoRotationGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "EmbedItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "data": {
            "$ref": "#/components/schemas/EmbedData"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "parent": {
            "$ref": "#/components/schemas/ParentLinksEnvelope"
          },
          "links": {
            "$ref": "#/components/schemas/WidgetLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "embed"
          }
        }
      },
      "EmbedUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EmbedUrlDataChanges"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/FixedRatioNoRotationGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "EmbedUrlData": {
        "required": ["url"],
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\nPossible values: `inline`, `modal`",
            "enum": ["inline", "modal"]
          },
          "previewUrl": {
            "type": "string",
            "description": "URL of the image to be used as the preview image for the embedded item."
          },
          "url": {
            "type": "string",
            "description": "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.",
            "default": "https://www.youtube.com/watch?v=HlVSNEiFCBk"
          }
        },
        "description": "For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "EmbedUrlDataChanges": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\nPossible values: `inline`, `modal`",
            "enum": ["inline", "modal"]
          },
          "previewUrl": {
            "type": "string",
            "description": "URL of the image to be used as the preview image for the embedded item."
          },
          "url": {
            "type": "string",
            "description": "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.",
            "example": "https://www.youtube.com/watch?v=HlVSNEiFCBk"
          }
        },
        "description": "For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "FixedRatioGeometry": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "description": "Height of the item, in pixels.",
            "format": "double"
          },
          "rotation": {
            "type": "number",
            "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "Width of the item, in pixels.",
            "format": "double"
          }
        },
        "description": "Contains geometrical information about the item, such as its width or height. For information about the JSON properties, see [Geometry](https://developers.miro.com/reference/geometry)."
      },
      "FixedRatioNoRotationGeometry": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "description": "Height of the item, in pixels.",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "Width of the item, in pixels.",
            "format": "double"
          }
        },
        "description": "Contains geometrical information about the item. You can set either the width or height. You cannot set both the at the same time. For information about the JSON properties, see [Geometry](https://developers.miro.com/reference/geometry)."
      },
      "GenericItemUpdate": {
        "type": "object",
        "properties": {
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          }
        }
      },
      "ImageCreateRequest": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ImageUrlData"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/FixedRatioGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "ImageItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "data": {
            "$ref": "#/components/schemas/ImageData"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "parent": {
            "$ref": "#/components/schemas/ParentLinksEnvelope"
          },
          "links": {
            "$ref": "#/components/schemas/WidgetLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "image"
          }
        }
      },
      "ImageUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ImageUrlDataChanges"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/FixedRatioGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "ImageUrlData": {
        "required": ["url"],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A short text header to identify the image.",
            "example": "Sample image title"
          },
          "url": {
            "type": "string",
            "description": "URL of the image.",
            "example": "https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png",
            "default": "https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"
          }
        },
        "description": "For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "ImageUrlDataChanges": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A short text header to identify the image.",
            "example": "Test image title"
          },
          "url": {
            "type": "string",
            "description": "URL of the image.",
            "example": "https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"
          }
        },
        "description": "For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "ShapeCreateRequest": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ShapeData"
          },
          "style": {
            "$ref": "#/components/schemas/ShapeStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "ShapeItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "data": {
            "$ref": "#/components/schemas/ShapeData"
          },
          "style": {
            "$ref": "#/components/schemas/ShapeStyle"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "parent": {
            "$ref": "#/components/schemas/ParentLinksEnvelope"
          },
          "links": {
            "$ref": "#/components/schemas/WidgetLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "shape"
          }
        }
      },
      "ShapeStyle": {
        "type": "object",
        "properties": {
          "borderColor": {
            "type": "string",
            "description": "Defines the color of the border of the shape.\nDefault: `#1a1a1a` (dark gray)."
          },
          "borderOpacity": {
            "maximum": 1,
            "minimum": 0,
            "type": "string",
            "description": "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` (solid color)."
          },
          "borderStyle": {
            "type": "string",
            "description": "Defines the style used to represent the border of the shape.\nDefault: `normal`.\nPossible values: `normal`, `dotted`, `dashed`",
            "enum": ["normal", "dotted", "dashed"]
          },
          "borderWidth": {
            "maximum": 24,
            "minimum": 1,
            "type": "string",
            "description": "Defines the thickness of the shape border, in dp.\nDefault: `2.0`."
          },
          "color": {
            "type": "string",
            "description": "Hex value representing the color for the text within the shape item.\nDefault: `#1a1a1a`.",
            "example": "#1a1a1a"
          },
          "fillColor": {
            "type": "string",
            "description": "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`\nDefault: #ffffff.",
            "example": "#8fd14f"
          },
          "fillOpacity": {
            "maximum": 1,
            "minimum": 0,
            "type": "string",
            "description": "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.\n"
          },
          "fontFamily": {
            "type": "string",
            "description": "Defines the font type for the text in the shape item.\nDefault: `arial`.\nPossible values: `arial`, `abril_fatface`, `bangers`, `eb_garamond`, `georgia`, `graduate`, `gravitas_one`, `fredoka_one`, `nixie_one`, `open_sans`, `permanent_marker`, `pt_sans`, `pt_sans_narrow`, `pt_serif`, `rammetto_one`, `roboto`, `roboto_condensed`, `roboto_slab`, `caveat`, `times_new_roman`, `titan_one`, `lemon_tuesday`, `roboto_mono`, `noto_sans`, `plex_sans`, `plex_serif`, `plex_mono`, `spoof`, `tiempos_text`",
            "enum": [
              "arial",
              "abril_fatface",
              "bangers",
              "eb_garamond",
              "georgia",
              "graduate",
              "gravitas_one",
              "fredoka_one",
              "nixie_one",
              "open_sans",
              "permanent_marker",
              "pt_sans",
              "pt_sans_narrow",
              "pt_serif",
              "rammetto_one",
              "roboto",
              "roboto_condensed",
              "roboto_slab",
              "caveat",
              "times_new_roman",
              "titan_one",
              "lemon_tuesday",
              "roboto_mono",
              "noto_sans",
              "plex_sans",
              "plex_serif",
              "plex_mono",
              "spoof",
              "tiempos_text"
            ]
          },
          "fontSize": {
            "maximum": 288,
            "minimum": 10,
            "type": "string",
            "description": "Defines the font size, in dp, for the text on the shape.\nDefault: `14`."
          },
          "textAlign": {
            "type": "string",
            "description": "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.\nPossible values: `left`, `right`, `center`",
            "enum": ["left", "right", "center"]
          },
          "textAlignVertical": {
            "type": "string",
            "description": "Defines how the sticky note text is vertically aligned.\nDefault: `top`.\nPossible values: `top`, `middle`, `bottom`",
            "enum": ["top", "middle", "bottom"]
          }
        },
        "description": "For information about the JSON properties, see [Style](https://developers.miro.com/reference/style)."
      },
      "ShapeUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ShapeData"
          },
          "style": {
            "$ref": "#/components/schemas/ShapeStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "StickyNoteCreateRequest": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/StickyNoteData"
          },
          "style": {
            "$ref": "#/components/schemas/StickyNoteStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/FixedRatioNoRotationGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "StickyNoteItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "data": {
            "$ref": "#/components/schemas/StickyNoteData"
          },
          "style": {
            "$ref": "#/components/schemas/StickyNoteStyle"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "parent": {
            "$ref": "#/components/schemas/ParentLinksEnvelope"
          },
          "links": {
            "$ref": "#/components/schemas/WidgetLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "sticky_note"
          }
        }
      },
      "StickyNoteStyle": {
        "type": "object",
        "properties": {
          "fillColor": {
            "type": "string",
            "description": "Fill color for the sticky note.\nDefault: `light_yellow`.\nPossible values: `gray`, `light_yellow`, `yellow`, `orange`, `light_green`, `green`, `dark_green`, `cyan`, `light_pink`, `pink`, `violet`, `red`, `light_blue`, `blue`, `dark_blue`, `black`",
            "enum": [
              "gray",
              "light_yellow",
              "yellow",
              "orange",
              "light_green",
              "green",
              "dark_green",
              "cyan",
              "light_pink",
              "pink",
              "violet",
              "red",
              "light_blue",
              "blue",
              "dark_blue",
              "black"
            ]
          },
          "textAlign": {
            "type": "string",
            "description": "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.\nPossible values: `left`, `right`, `center`",
            "enum": ["left", "right", "center"]
          },
          "textAlignVertical": {
            "type": "string",
            "description": "Defines how the sticky note text is vertically aligned.\nDefault: `top`.\nPossible values: `top`, `middle`, `bottom`",
            "enum": ["top", "middle", "bottom"]
          }
        },
        "description": "Contains information about the style of a sticky note item, such as the fill color or text alignment. For information about the JSON properties, see [Style](https://developers.miro.com/reference/style)."
      },
      "StickyNoteUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/StickyNoteData"
          },
          "style": {
            "$ref": "#/components/schemas/StickyNoteStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/FixedRatioNoRotationGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "TextCreateRequest": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TextData"
          },
          "style": {
            "$ref": "#/components/schemas/TextStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/WidthOnlyAdjustableGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "TextItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "data": {
            "$ref": "#/components/schemas/TextData"
          },
          "style": {
            "$ref": "#/components/schemas/TextStyle"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "parent": {
            "$ref": "#/components/schemas/ParentLinksEnvelope"
          },
          "links": {
            "$ref": "#/components/schemas/WidgetLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "text"
          }
        }
      },
      "TextStyle": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "description": "Hex value representing the color for the text within the text item.\nDefault: `#1a1a1a`.",
            "example": "#1a1a1a"
          },
          "fillColor": {
            "type": "string",
            "description": "Background color of the text item.\nDefault: `#ffffff`.",
            "example": "#e6e6e6"
          },
          "fillOpacity": {
            "maximum": 1,
            "minimum": 0,
            "type": "string",
            "description": "Opacity level of the background color.\nPossible values: any number between `0.0` and `1.0`, where: \n`0.0`: the background color is completely transparent or invisible \n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` if `fillColor` provided, `0.0` if `fillColor` is not provided."
          },
          "fontFamily": {
            "type": "string",
            "description": "Font type for the text in the text item.\nDefault: `arial`.\nPossible values: `arial`, `abril_fatface`, `bangers`, `eb_garamond`, `georgia`, `graduate`, `gravitas_one`, `fredoka_one`, `nixie_one`, `open_sans`, `permanent_marker`, `pt_sans`, `pt_sans_narrow`, `pt_serif`, `rammetto_one`, `roboto`, `roboto_condensed`, `roboto_slab`, `caveat`, `times_new_roman`, `titan_one`, `lemon_tuesday`, `roboto_mono`, `noto_sans`, `plex_sans`, `plex_serif`, `plex_mono`, `spoof`, `tiempos_text`",
            "enum": [
              "arial",
              "abril_fatface",
              "bangers",
              "eb_garamond",
              "georgia",
              "graduate",
              "gravitas_one",
              "fredoka_one",
              "nixie_one",
              "open_sans",
              "permanent_marker",
              "pt_sans",
              "pt_sans_narrow",
              "pt_serif",
              "rammetto_one",
              "roboto",
              "roboto_condensed",
              "roboto_slab",
              "caveat",
              "times_new_roman",
              "titan_one",
              "lemon_tuesday",
              "roboto_mono",
              "noto_sans",
              "plex_sans",
              "plex_serif",
              "plex_mono",
              "spoof",
              "tiempos_text"
            ]
          },
          "fontSize": {
            "minimum": 1,
            "type": "string",
            "description": "Font size, in dp.\nDefault: `14`."
          },
          "textAlign": {
            "type": "string",
            "description": "Horizontal alignment for the item's content.\nDefault: `center.`\nPossible values: `left`, `right`, `center`",
            "enum": ["left", "right", "center"]
          }
        },
        "description": "Contains information about the style of a text item, such as the fill color or font family. For more information on the JSON properties, see [Style](https://developers.miro.com/reference/style)."
      },
      "TextUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TextData"
          },
          "style": {
            "$ref": "#/components/schemas/TextStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/WidthOnlyAdjustableGeometry"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        }
      },
      "UserInfoShort": {
        "required": ["id", "name", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of the user.",
            "format": "int64",
            "example": 3074457353169356300
          },
          "name": {
            "type": "string",
            "description": "Name of the user.",
            "example": "John Smith"
          },
          "type": {
            "type": "string",
            "description": "Indicates the type of object returned. In this case, `type` returns `user`.",
            "example": "user"
          }
        },
        "description": "Contains information about the user who owns the board."
      },
      "WidthOnlyAdjustableGeometry": {
        "type": "object",
        "properties": {
          "rotation": {
            "type": "number",
            "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "Width of the item, in pixels. \nThe minimum `width` of a `text` widget is relative to the font size of the `text` widget. The width must be at least 1.7 times wider than the font size.\nFor example, if the font size of the `text` item is `14`, the minimum `width` is `24`.",
            "format": "double"
          }
        },
        "description": "Contains geometrical information about the item, such as its width or rotation. You can only specify the width of the text item as the height is dynamically updated based on the content. For information about the JSON properties, see [Geometry](https://developers.miro.com/reference/geometry)."
      },
      "EmptyStylePlatformContainers": {
        "type": "object",
        "description": "Contains information about the style of an item, such as the color, font, or border style."
      },
      "FrameChanges": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Only custom frames are supported at the moment.\nPossible values: `custom`",
            "default": "custom",
            "enum": ["custom"]
          },
          "title": {
            "type": "string",
            "description": "Title of the frame. This title appears at the top of the frame.",
            "default": "Sample frame title"
          },
          "type": {
            "type": "string",
            "description": "Only free form frames are supported at the moment.\nPossible values: `freeform`",
            "default": "freeform",
            "enum": ["freeform"]
          }
        },
        "description": "Contains frame item data, such as the title, frame type, or frame format. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "FrameCreateRequest": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FrameChanges"
          },
          "style": {
            "$ref": "#/components/schemas/FrameStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/GeometryNoRotation"
          }
        }
      },
      "FrameDataPlatformContainers": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Only custom frames are supported at the moment.\nPossible values: `custom`, `desktop`, `phone`, `tablet`, `a4`, `letter`, `ratio_1x1`, `ratio_4x3`, `ratio_16x9`",
            "default": "custom",
            "enum": ["custom", "desktop", "phone", "tablet", "a4", "letter", "ratio_1x1", "ratio_4x3", "ratio_16x9"]
          },
          "title": {
            "type": "string",
            "description": "Title of the frame. This title appears at the top of the frame.",
            "example": "Sample frame title"
          },
          "type": {
            "type": "string",
            "description": "Only free form frames are supported at the moment.\nPossible values: `freeform`, `heap`, `grid`, `rows`, `columns`",
            "default": "freeform",
            "enum": ["freeform", "heap", "grid", "rows", "columns"]
          }
        },
        "description": "Contains frame item data, such as the title, frame type, or frame format. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "FrameItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "data": {
            "$ref": "#/components/schemas/FrameData"
          },
          "style": {
            "$ref": "#/components/schemas/FrameStyle"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "links": {
            "$ref": "#/components/schemas/WidgetLinks"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "frame"
          }
        }
      },
      "FrameStyle": {
        "type": "object",
        "properties": {
          "fillColor": {
            "type": "string",
            "description": "Fill color for the frame.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`\nDefault: #ffffffff (transparent).",
            "example": "#ffffffff"
          }
        },
        "description": "Contains information about the style of a frame item, such as the fill color. For information about the JSON properties, see [Style](https://developers.miro.com/reference/style)."
      },
      "FrameUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FrameChanges"
          },
          "style": {
            "$ref": "#/components/schemas/FrameStyle"
          },
          "position": {
            "$ref": "#/components/schemas/PositionChange"
          },
          "geometry": {
            "$ref": "#/components/schemas/GeometryNoRotation"
          }
        }
      },
      "GenericItemCursorPagedPlatformContainers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains the result data.",
            "items": {
              "$ref": "#/components/schemas/GenericItem"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "description": "Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.",
            "format": "int32",
            "example": 1
          },
          "cursor": {
            "type": "string",
            "description": "A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.",
            "example": "MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4="
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response. ",
            "format": "int32",
            "example": 20
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        }
      },
      "GeometryPlatformContainers": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "description": "Height of the item, in pixels.",
            "format": "double",
            "example": 60
          },
          "rotation": {
            "type": "number",
            "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "Width of the item, in pixels.",
            "format": "double",
            "example": 320
          }
        },
        "description": "Contains geometrical information about the item, such as its width or height. For information about the JSON properties, see [Geometry](https://developers.miro.com/reference/geometry)."
      },
      "GeometryNoRotation": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "description": "Height of the item, in pixels.",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "Width of the item, in pixels.",
            "format": "double"
          }
        },
        "description": "Contains geometrical information about the item, such as its width or height. For information about the JSON properties, see [Geometry](https://developers.miro.com/reference/geometry)."
      },
      "OpaqueData": {
        "type": "object"
      },
      "PageLinksPlatformContainers": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "description": "Link to retrieve information in the first page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX=="
          },
          "last": {
            "type": "string",
            "description": "Link to the retrieve information in the last page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX=="
          },
          "next": {
            "type": "string",
            "description": "Link to retrieve information in the next page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw=="
          },
          "prev": {
            "type": "string",
            "description": "Link to retrieve information in the previous page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor="
          },
          "self": {
            "type": "string",
            "description": "Link to retrieve information in the current page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX=="
          }
        },
        "description": "Contains pagination links for the collection."
      },
      "ParentPlatformContainers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Contains information about the parent this item attached to. Passing null for ID will attach widget to the canvas directly."
      },
      "ParentLinksEnvelopePlatformContainers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of the parent frame for the item.",
            "format": "int64",
            "example": 3074457362577955300
          },
          "links": {
            "$ref": "#/components/schemas/SelfLink"
          }
        },
        "description": "Contains information about the parent frame for the item."
      },
      "PositionPlatformContainers": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "string",
            "description": "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported.\nPossible values: `center`",
            "default": "center",
            "enum": ["center"]
          },
          "relativeTo": {
            "type": "string",
            "enum": ["canvas_center", "parent_top_left"]
          },
          "x": {
            "type": "number",
            "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "format": "double",
            "example": 100,
            "default": 0
          },
          "y": {
            "type": "number",
            "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "format": "double",
            "example": 100,
            "default": 0
          }
        },
        "description": "Contains location information about the item, such as its x coordinate, y coordinate, and theorigin of the x and y coordinates."
      },
      "PositionChangePlatformContainers": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "string",
            "description": "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported.\nPossible values: `center`",
            "default": "center",
            "enum": ["center"]
          },
          "x": {
            "type": "number",
            "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "format": "double",
            "example": 100,
            "default": 0
          },
          "y": {
            "type": "number",
            "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "format": "double",
            "example": 100,
            "default": 0
          }
        },
        "description": "Contains location information about the item, such as its x coordinate, y coordinate, and theorigin of the x and y coordinates."
      },
      "SelfLinkPlatformContainers": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "description": "Link to obtain more information about the current object.",
            "example": "http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"
          }
        },
        "description": "Contains applicable links for the current object."
      },
      "WidgetLinksPlatformContainers": {
        "type": "object",
        "properties": {
          "related": {
            "type": "string",
            "description": "Link to obtain information about the child items related to the frame.",
            "example": "http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="
          },
          "self": {
            "type": "string",
            "description": "Link to obtain information about the current item.",
            "example": "http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"
          }
        },
        "description": "Contains applicable links for the item."
      },
      "createdByPlatformContainers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of the user.",
            "example": "3458764517517852417"
          },
          "type": {
            "type": "string",
            "description": "Indicates the type of object returned. In this case, `type` returns `user`.",
            "example": "user"
          }
        },
        "description": "Contains information about the user who created the item."
      },
      "modifiedByPlatformContainers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of the user.",
            "example": "3458764517517852417"
          },
          "type": {
            "type": "string",
            "description": "Indicates the type of object returned. In this case, `type` returns `user`.",
            "example": "user"
          }
        },
        "description": "Contains information about the user who last modified the item."
      },
      "GenericItemCursorPaged": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains the result data.",
            "items": {
              "$ref": "#/components/schemas/GenericItem"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "description": "Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.",
            "format": "int32",
            "example": 1
          },
          "cursor": {
            "type": "string",
            "description": "A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.",
            "example": "MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4="
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response. ",
            "format": "int32",
            "example": 20
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          }
        }
      },
      "ParentLinksEnvelope": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of the parent frame for the item.",
            "format": "int64",
            "example": 3074457362577955300
          },
          "links": {
            "$ref": "#/components/schemas/SelfLink"
          }
        },
        "description": "Contains information about the parent frame for the item."
      },
      "PositionChange": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "string",
            "description": "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported.\nPossible values: `center`",
            "default": "center",
            "enum": ["center"]
          },
          "x": {
            "type": "number",
            "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "format": "double",
            "example": 100,
            "default": 0
          },
          "y": {
            "type": "number",
            "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "format": "double",
            "example": 100,
            "default": 0
          }
        },
        "description": "Contains location information about the item, such as its x coordinate, y coordinate, and theorigin of the x and y coordinates."
      },
      "WidgetLinks": {
        "type": "object",
        "properties": {
          "related": {
            "type": "string",
            "description": "Link to obtain information about the child items related to the frame.",
            "example": "http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor="
          },
          "self": {
            "type": "string",
            "description": "Link to obtain information about the current item.",
            "example": "http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487"
          }
        },
        "description": "Contains applicable links for the item."
      },
      "Caption": {
        "required": ["content"],
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "The text you want to display on the connector. Supports inline HTML tags.",
            "example": "<p>Caption text</p>"
          },
          "position": {
            "type": "string",
            "description": "The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%",
            "example": "50%"
          },
          "textAlignVertical": {
            "type": "string",
            "description": "The vertical position of the text on the connector. Default: middle\nPossible values: `top`, `middle`, `bottom`",
            "enum": ["top", "middle", "bottom"]
          }
        },
        "description": "Contains the connector's caption data, such as content and its position."
      },
      "ConnectorChangesData": {
        "type": "object",
        "properties": {
          "startItem": {
            "$ref": "#/components/schemas/ItemConnectionChangesData"
          },
          "endItem": {
            "$ref": "#/components/schemas/ItemConnectionChangesData"
          },
          "shape": {
            "type": "string",
            "description": "The path type of the connector line, defines curvature. Default: curved.\nPossible values: `straight`, `elbowed`, `curved`",
            "enum": ["straight", "elbowed", "curved"]
          },
          "captions": {
            "maxItems": 20,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Caption"
            }
          },
          "style": {
            "$ref": "#/components/schemas/ConnectorStyle"
          }
        }
      },
      "ConnectorCreationData": {
        "type": "object",
        "properties": {
          "startItem": {
            "$ref": "#/components/schemas/ItemConnectionCreationData"
          },
          "endItem": {
            "$ref": "#/components/schemas/ItemConnectionCreationData"
          },
          "shape": {
            "type": "string",
            "description": "The path type of the connector line, defines curvature. Default: curved.\nPossible values: `straight`, `elbowed`, `curved`",
            "enum": ["straight", "elbowed", "curved"]
          },
          "captions": {
            "maxItems": 20,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Caption"
            }
          },
          "style": {
            "$ref": "#/components/schemas/ConnectorStyle"
          }
        }
      },
      "ConnectorStyle": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "description": "Hex value representing the color for the captions on the connector. Default: `#1a1a1a`",
            "example": "#9510ac"
          },
          "endStrokeCap": {
            "type": "string",
            "description": "The decoration cap of the connector end, like an arrow or circle. Default: stealth.\nPossible values: `none`, `stealth`, `diamond`, `diamond_filled`, `oval`, `oval_filled`, `arrow`, `triangle`, `triangle_filled`, `erd_one`, `erd_many`, `erd_only_one`, `erd_zero_or_one`, `erd_one_or_many`, `erd_zero_or_many`",
            "enum": [
              "none",
              "stealth",
              "diamond",
              "diamond_filled",
              "oval",
              "oval_filled",
              "arrow",
              "triangle",
              "triangle_filled",
              "erd_one",
              "erd_many",
              "erd_only_one",
              "erd_zero_or_one",
              "erd_one_or_many",
              "erd_zero_or_many"
            ]
          },
          "fontSize": {
            "maximum": 288,
            "minimum": 10,
            "type": "string",
            "description": "Defines the font size, in dp, for the captions on the connector. Default: 14",
            "example": "15"
          },
          "startStrokeCap": {
            "type": "string",
            "description": "The decoration cap of the connector end, like an arrow or circle. Default: none.\nPossible values: `none`, `stealth`, `diamond`, `diamond_filled`, `oval`, `oval_filled`, `arrow`, `triangle`, `triangle_filled`, `erd_one`, `erd_many`, `erd_only_one`, `erd_zero_or_one`, `erd_one_or_many`, `erd_zero_or_many`",
            "enum": [
              "none",
              "stealth",
              "diamond",
              "diamond_filled",
              "oval",
              "oval_filled",
              "arrow",
              "triangle",
              "triangle_filled",
              "erd_one",
              "erd_many",
              "erd_only_one",
              "erd_zero_or_one",
              "erd_one_or_many",
              "erd_zero_or_many"
            ]
          },
          "strokeColor": {
            "type": "string",
            "description": "Hex value of the color of the connector line. Default: #000000.",
            "example": "#2d9bf0"
          },
          "strokeStyle": {
            "type": "string",
            "description": "The stroke pattern of the connector line. Default: normal.\nPossible values: `normal`, `dotted`, `dashed`",
            "enum": ["normal", "dotted", "dashed"]
          },
          "strokeWidth": {
            "maximum": 24,
            "minimum": 1,
            "type": "string",
            "description": "The thickness of the connector line, in dp. Default: 1.0.",
            "example": "2.0"
          },
          "textOrientation": {
            "type": "string",
            "description": "The captions orientation relatively to the connector line curvature. Default: aligned.\nPossible values: `horizontal`, `aligned`",
            "enum": ["horizontal", "aligned"]
          }
        },
        "description": "Contains information about the style of a connector, such as the color or caption font size"
      },
      "ConnectorWithLinks": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "captions": {
            "type": "array",
            "description": "Blocks of text you want to display on the connector.",
            "items": {
              "$ref": "#/components/schemas/Caption"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the connector was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "endItem": {
            "$ref": "#/components/schemas/ItemConnectionWithLinks"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of a connector.",
            "example": "3458764517517818867"
          },
          "isSupported": {
            "type": "boolean",
            "description": "Indicates whether the connector is supported at the moment. If this parameter returns `false`, we do not support the connector at the moment. We do not allow updates for unsupported connectors and we might not return all data about the connector, such as intermediate points and connection points to the canvas."
          },
          "links": {
            "$ref": "#/components/schemas/SelfLink"
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the connector was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "shape": {
            "type": "string",
            "description": "The path type of the connector line, defines curvature. Default: curved.\nPossible values: `straight`, `elbowed`, `curved`",
            "default": "curved",
            "enum": ["straight", "elbowed", "curved"]
          },
          "startItem": {
            "$ref": "#/components/schemas/ItemConnectionWithLinks"
          },
          "style": {
            "$ref": "#/components/schemas/ConnectorStyle"
          },
          "type": {
            "type": "string",
            "description": "Type of board object that is returned."
          }
        }
      },
      "ConnectorsCursorPaged": {
        "type": "object",
        "properties": {
          "cursor": {
            "type": "string",
            "description": "A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.",
            "example": "MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4="
          },
          "data": {
            "type": "array",
            "description": "Contains the result data.",
            "items": {
              "$ref": "#/components/schemas/ConnectorWithLinks"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response. ",
            "format": "int32",
            "example": 20
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "size": {
            "type": "integer",
            "description": "Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.",
            "format": "int32",
            "example": 1
          },
          "total": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ItemConnectionChangesData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.",
            "example": "3458764517517818867"
          },
          "position": {
            "$ref": "#/components/schemas/RelativeOffset"
          },
          "snapTo": {
            "type": "string",
            "description": "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.\nPossible values: `auto`, `top`, `right`, `bottom`, `left`",
            "enum": ["auto", "top", "right", "bottom", "left"]
          }
        }
      },
      "ItemConnectionCreationData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.",
            "example": "3458764517517818867"
          },
          "position": {
            "$ref": "#/components/schemas/RelativeOffset"
          },
          "snapTo": {
            "type": "string",
            "description": "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.\nPossible values: `auto`, `top`, `right`, `bottom`, `left`",
            "enum": ["auto", "top", "right", "bottom", "left"]
          }
        }
      },
      "ItemConnectionWithLinks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of the item the connector is attached to.",
            "example": "3458764517517818867"
          },
          "links": {
            "$ref": "#/components/schemas/SelfLink"
          },
          "position": {
            "$ref": "#/components/schemas/RelativeOffset"
          }
        },
        "description": "The starting point of the connector."
      },
      "PageLinksPlatformExperimentalFeatures": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "description": "Link to retrieve information in the first page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX=="
          },
          "last": {
            "type": "string",
            "description": "Link to the retrieve information in the last page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX=="
          },
          "next": {
            "type": "string",
            "description": "Link to retrieve information in the next page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw=="
          },
          "prev": {
            "type": "string",
            "description": "Link to retrieve information in the previous page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor="
          },
          "self": {
            "type": "string",
            "description": "Link to retrieve information in the current page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX=="
          }
        },
        "description": "Contains pagination links for the collection."
      },
      "RelativeOffset": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.",
            "example": "50%"
          },
          "y": {
            "type": "string",
            "description": "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.",
            "example": "0%"
          }
        },
        "description": "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner."
      },
      "SelfLinkPlatformExperimentalFeatures": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "description": "Link to obtain more information about the current object.",
            "example": "http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"
          }
        },
        "description": "Contains applicable links for the current object."
      },
      "AppCardDataPlatformTags": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A short text description to add context about the app card.",
            "example": "Sample app card description"
          },
          "fields": {
            "type": "array",
            "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "owned": {
            "type": "boolean",
            "description": "Defines whether the card is owned by the application making the call."
          },
          "status": {
            "type": "string",
            "description": "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.\nPossible values: `disconnected`, `connected`, `disabled`",
            "enum": ["disconnected", "connected", "disabled"]
          },
          "title": {
            "type": "string",
            "description": "A short text header to identify the app card.",
            "example": "sample app card item"
          }
        },
        "description": "Contains app card item data, such as the title, description, or fields. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "CardDataPlatformTags": {
        "type": "object",
        "properties": {
          "assigneeId": {
            "type": "integer",
            "description": "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is numeric, and it is automatically assigned to a user when they first sign up.",
            "format": "int64",
            "example": 3074457362577955300
          },
          "description": {
            "type": "string",
            "description": "A short text description to add context about the card.",
            "example": "sample card description"
          },
          "dueDate": {
            "type": "string",
            "description": "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2023-10-12T22:00:55Z"
          },
          "title": {
            "type": "string",
            "description": "A short text header for the card.",
            "example": "sample card item",
            "default": "sample card item"
          }
        },
        "description": "Contains card item data, such as the title, description, due date, or assignee ID. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "CustomFieldPlatformTags": {
        "type": "object",
        "properties": {
          "fillColor": {
            "type": "string",
            "description": "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.",
            "example": "#2fa9e3"
          },
          "iconShape": {
            "type": "string",
            "description": "The shape of the icon on the preview field.\nPossible values: `round`, `square`",
            "default": "round",
            "enum": ["round", "square"]
          },
          "iconUrl": {
            "type": "string",
            "description": "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.",
            "example": "https://cdn-icons-png.flaticon.com/512/5695/5695864.png"
          },
          "textColor": {
            "type": "string",
            "description": "Hex value representing the color of the text string assigned to `value`.",
            "example": "#1a1a1a"
          },
          "tooltip": {
            "type": "string",
            "description": "A short text displayed in a tooltip when clicking or hovering over the preview field.",
            "example": "Completion status indicator"
          },
          "value": {
            "type": "string",
            "description": "The actual data value of the custom field.\nIt can be any type of information that you want to convey.",
            "example": "Status: in progress"
          }
        },
        "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view."
      },
      "DocumentDataPlatformTags": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A short text header to identify the document.",
            "example": "Sample document title"
          }
        }
      },
      "EmbedDataPlatformTags": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "Type of the embedded item's content.",
            "example": "video"
          },
          "description": {
            "type": "string",
            "description": "Short description of the embedded item.",
            "example": "So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en..."
          },
          "html": {
            "type": "string",
            "description": "Html code of the embedded item.",
            "example": "<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\\\" width=\\\"854\\\" height=\\\"480\\\" scrolling=\\\"no\\\" title=\\\"YouTube embed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen\\\" allowfullscreen=\\\"true\\\"></iframe>"
          },
          "mode": {
            "type": "string",
            "description": "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\nPossible values: `inline`, `modal`",
            "enum": ["inline", "modal"]
          },
          "providerName": {
            "type": "string",
            "description": "Name of the content's provider.",
            "example": "YouTube"
          },
          "providerUrl": {
            "type": "string",
            "description": "Url of the content's provider.",
            "example": "https://www.youtube.com/"
          },
          "title": {
            "type": "string",
            "description": "Title of the embedded item.",
            "example": "HOW TO ORGANIZE YOUR LIFE WITH MIRO! ✏️ Virtual Whiteboard Tour"
          },
          "url": {
            "type": "string",
            "description": "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.",
            "example": "https://www.youtube.com/watch?v=HlVSNEiFCBk"
          }
        }
      },
      "EmptyStylePlatformTags": {
        "type": "object",
        "description": "Contains information about the style of an item, such as the color, font, or border style."
      },
      "FrameDataPlatformTags": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Only custom frames are supported at the moment.\nPossible values: `custom`, `desktop`, `phone`, `tablet`, `a4`, `letter`, `ratio_1x1`, `ratio_4x3`, `ratio_16x9`",
            "default": "custom",
            "enum": ["custom", "desktop", "phone", "tablet", "a4", "letter", "ratio_1x1", "ratio_4x3", "ratio_16x9"]
          },
          "title": {
            "type": "string",
            "description": "Title of the frame. This title appears at the top of the frame.",
            "example": "Sample frame title"
          },
          "type": {
            "type": "string",
            "description": "Only free form frames are supported at the moment.\nPossible values: `freeform`, `heap`, `grid`, `rows`, `columns`",
            "default": "freeform",
            "enum": ["freeform", "heap", "grid", "rows", "columns"]
          }
        },
        "description": "Contains frame item data, such as the title, frame type, or frame format. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "GenericItem": {
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/createdBy"
          },
          "data": {
            "$ref": "#/components/schemas/WidgetData"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of an item.",
            "format": "int64",
            "example": 3458764517517819000
          },
          "modifiedAt": {
            "type": "string",
            "description": "Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2022-03-30T17:26:50Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/modifiedBy"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "type": {
            "type": "string",
            "description": "Type of item that is returned.",
            "example": "sticky_note"
          }
        },
        "description": "Contains the result data."
      },
      "GeometryPlatformTags": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "format": "double",
            "description": "Height of the item, in pixels.",
            "example": 60
          },
          "rotation": {
            "type": "number",
            "format": "double",
            "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."
          },
          "width": {
            "type": "number",
            "format": "double",
            "description": "Width of the item, in pixels.",
            "example": 320
          }
        },
        "description": "Contains geometrical information about the item, such as its width or height. For information about the JSON properties, see [Geometry](https://developers.miro.com/reference/geometry)."
      },
      "GetTagsResponse": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "ImageDataPlatformTags": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A short text header to identify the image.",
            "example": "Sample image title"
          }
        }
      },
      "ItemPagedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains the result data.",
            "items": {
              "$ref": "#/components/schemas/GenericItem"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.\n",
            "format": "int32",
            "example": 20
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "offset": {
            "type": "integer",
            "description": "Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.",
            "format": "int32",
            "example": 0
          },
          "size": {
            "type": "integer",
            "description": "Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.",
            "format": "int32",
            "example": 1
          },
          "total": {
            "type": "integer",
            "description": "Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).",
            "format": "int64",
            "example": 1
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PageLinksPlatformTags": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "description": "Link to retrieve information in the first page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX=="
          },
          "last": {
            "type": "string",
            "description": "Link to the retrieve information in the last page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX=="
          },
          "next": {
            "type": "string",
            "description": "Link to retrieve information in the next page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw=="
          },
          "prev": {
            "type": "string",
            "description": "Link to retrieve information in the previous page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor="
          },
          "self": {
            "type": "string",
            "description": "Link to retrieve information in the current page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX=="
          }
        },
        "description": "Contains pagination links for the collection."
      },
      "Parent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier (ID) of the parent frame for the item.",
            "format": "int64",
            "example": 3074457362577955300
          }
        },
        "description": "Contains information about the parent frame for the item."
      },
      "PositionPlatformTags": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "string",
            "description": "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported.\nPossible values: `center`",
            "default": "center",
            "enum": ["center"]
          },
          "relativeTo": {
            "type": "string",
            "enum": ["canvas_center", "parent_top_left"]
          },
          "x": {
            "type": "number",
            "format": "double",
            "default": 0,
            "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "example": 100
          },
          "y": {
            "type": "number",
            "format": "double",
            "default": 0,
            "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "example": 100
          }
        },
        "description": "Contains location information about the item, such as its x coordinate, y coordinate, and theorigin of the x and y coordinates."
      },
      "SelfLinkPlatformTags": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "description": "Link to obtain more information about the current object.",
            "example": "http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"
          }
        },
        "description": "Contains applicable links for the current object."
      },
      "ShapeDataPlatformTags": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The text you want to display on the shape.",
            "default": "Hello"
          },
          "shape": {
            "type": "string",
            "description": "Defines the geometric shape of the item when it is rendered on the board.\nPossible values: `rectangle`, `round_rectangle`, `circle`, `triangle`, `rhombus`, `parallelogram`, `trapezoid`, `pentagon`, `hexagon`, `octagon`, `wedge_round_rectangle_callout`, `star`, `flow_chart_predefined_process`, `cloud`, `cross`, `can`, `right_arrow`, `left_arrow`, `left_right_arrow`, `left_brace`, `right_brace`",
            "default": "rectangle",
            "enum": [
              "rectangle",
              "round_rectangle",
              "circle",
              "triangle",
              "rhombus",
              "parallelogram",
              "trapezoid",
              "pentagon",
              "hexagon",
              "octagon",
              "wedge_round_rectangle_callout",
              "star",
              "flow_chart_predefined_process",
              "cloud",
              "cross",
              "can",
              "right_arrow",
              "left_arrow",
              "left_right_arrow",
              "left_brace",
              "right_brace"
            ]
          }
        },
        "description": "Contains shape item data, such as the content or shape type of the shape. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "StickyNoteDataPlatformTags": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The actual text (content) that appears in the sticky note item.",
            "example": "Hello",
            "default": "Hello"
          },
          "shape": {
            "type": "string",
            "description": "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.\nPossible values: `square`, `rectangle`",
            "default": "square",
            "enum": ["square", "rectangle"]
          }
        },
        "description": "Contains sticky note item data, such as the content or shape of the sticky note. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "Tag": {
        "required": ["fillColor", "id", "title", "type"],
        "type": "object",
        "properties": {
          "fillColor": {
            "type": "string",
            "description": "Background color of the tag.\nPossible values: `red`, `light_green`, `cyan`, `yellow`, `magenta`, `green`, `blue`, `gray`, `violet`, `dark_green`, `dark_blue`, `black`",
            "example": "red",
            "enum": [
              "red",
              "light_green",
              "cyan",
              "yellow",
              "magenta",
              "green",
              "blue",
              "gray",
              "violet",
              "dark_green",
              "dark_blue",
              "black"
            ]
          },
          "id": {
            "type": "integer",
            "description": "Unique identifier of the tag.",
            "format": "int64",
            "example": 3074457363306854000
          },
          "title": {
            "type": "string",
            "description": "Text of the tag",
            "example": "delayed"
          },
          "type": {
            "type": "string",
            "description": "Type of the object that is returned. In this case, type returns `tag`."
          }
        }
      },
      "TagCreateRequest": {
        "required": ["title"],
        "type": "object",
        "properties": {
          "fillColor": {
            "type": "string",
            "description": "[Fill color for the tag](https://developers.miro.com/reference/rest-api-tag-data-model)\nPossible values: `red`, `light_green`, `cyan`, `yellow`, `magenta`, `green`, `blue`, `gray`, `violet`, `dark_green`, `dark_blue`, `black`",
            "default": "red",
            "enum": [
              "red",
              "light_green",
              "cyan",
              "yellow",
              "magenta",
              "green",
              "blue",
              "gray",
              "violet",
              "dark_green",
              "dark_blue",
              "black"
            ]
          },
          "title": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "description": "[Text of the tag](https://developers.miro.com/reference/rest-api-tag-data-model)",
            "example": "to do"
          }
        }
      },
      "TagUpdateRequest": {
        "type": "object",
        "properties": {
          "fillColor": {
            "type": "string",
            "description": "[Fill color for the tag](https://developers.miro.com/reference/rest-api-tag-data-model)\nPossible values: `red`, `light_green`, `cyan`, `yellow`, `magenta`, `green`, `blue`, `gray`, `violet`, `dark_green`, `dark_blue`, `black`",
            "default": "red",
            "enum": [
              "red",
              "light_green",
              "cyan",
              "yellow",
              "magenta",
              "green",
              "blue",
              "gray",
              "violet",
              "dark_green",
              "dark_blue",
              "black"
            ]
          },
          "title": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "description": "[Text of the tag](https://developers.miro.com/reference/rest-api-tag-data-model)",
            "example": "done"
          }
        }
      },
      "TagWithLinks": {
        "required": ["fillColor", "id", "title", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the tag.",
            "format": "int64",
            "example": 3074457363306854000
          },
          "title": {
            "type": "string",
            "description": "Text of the tag",
            "example": "delayed"
          },
          "fillColor": {
            "type": "string",
            "description": "Background color of the tag.\nPossible values: `red`, `light_green`, `cyan`, `yellow`, `magenta`, `green`, `blue`, `gray`, `violet`, `dark_green`, `dark_blue`, `black`",
            "example": "red",
            "enum": [
              "red",
              "light_green",
              "cyan",
              "yellow",
              "magenta",
              "green",
              "blue",
              "gray",
              "violet",
              "dark_green",
              "dark_blue",
              "black"
            ]
          },
          "links": {
            "$ref": "#/components/schemas/SelfLink"
          },
          "type": {
            "type": "string",
            "description": "Type of the object that is returned. In this case, type returns `tag`."
          }
        }
      },
      "TagsPagedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains the result data.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).",
            "format": "int64",
            "example": 1
          },
          "size": {
            "type": "integer",
            "description": "Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.",
            "format": "int32",
            "example": 1
          },
          "offset": {
            "type": "integer",
            "description": "Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.",
            "format": "int32",
            "example": 0
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.\n",
            "format": "int32",
            "example": 20
          },
          "links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "TextDataPlatformTags": {
        "required": ["content"],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The actual text (content) that appears in the text item.",
            "example": "Hello",
            "default": "Hello"
          }
        },
        "description": "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "WidgetDataPlatformTags": {
        "type": "object",
        "description": "Contains the item data, such as the item title, content, or description.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextData"
          },
          {
            "$ref": "#/components/schemas/EmbedData"
          },
          {
            "$ref": "#/components/schemas/CardData"
          },
          {
            "$ref": "#/components/schemas/AppCardData"
          },
          {
            "$ref": "#/components/schemas/ImageData"
          },
          {
            "$ref": "#/components/schemas/DocumentData"
          },
          {
            "$ref": "#/components/schemas/ShapeData"
          },
          {
            "$ref": "#/components/schemas/FrameData"
          },
          {
            "$ref": "#/components/schemas/StickyNoteData"
          }
        ]
      },
      "createdBy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of the user.",
            "example": "3458764517517852417"
          },
          "type": {
            "type": "string",
            "description": "Indicates the type of object returned. In this case, `type` returns `user`.",
            "example": "user"
          }
        },
        "description": "Contains information about the user who created the item."
      },
      "modifiedBy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (ID) of the user.",
            "example": "3458764517517852417"
          },
          "type": {
            "type": "string",
            "description": "Indicates the type of object returned. In this case, `type` returns `user`.",
            "example": "user"
          }
        },
        "description": "Contains information about the user who last modified the item."
      },
      "AppCardData": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A short text description to add context about the app card.",
            "example": "Sample app card description"
          },
          "fields": {
            "type": "array",
            "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "owned": {
            "type": "boolean",
            "description": "Defines whether the card is owned by the application making the call."
          },
          "status": {
            "type": "string",
            "description": "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.\nPossible values: `disconnected`, `connected`, `disabled`",
            "enum": ["disconnected", "connected", "disabled"]
          },
          "title": {
            "type": "string",
            "description": "A short text header to identify the app card.",
            "example": "sample app card item"
          }
        },
        "description": "Contains app card item data, such as the title, description, or fields. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "CardData": {
        "type": "object",
        "properties": {
          "assigneeId": {
            "type": "integer",
            "description": "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is numeric, and it is automatically assigned to a user when they first sign up.",
            "format": "int64",
            "example": 3074457362577955300
          },
          "description": {
            "type": "string",
            "description": "A short text description to add context about the card.",
            "example": "sample card description"
          },
          "dueDate": {
            "type": "string",
            "description": "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).",
            "format": "date-time",
            "example": "2023-10-12T22:00:55Z"
          },
          "title": {
            "type": "string",
            "description": "A short text header for the card.",
            "example": "sample card item",
            "default": "sample card item"
          }
        },
        "description": "Contains card item data, such as the title, description, due date, or assignee ID. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "fillColor": {
            "type": "string",
            "description": "Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.",
            "example": "#2fa9e3"
          },
          "iconShape": {
            "type": "string",
            "description": "The shape of the icon on the preview field.\nPossible values: `round`, `square`",
            "default": "round",
            "enum": ["round", "square"]
          },
          "iconUrl": {
            "type": "string",
            "description": "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.",
            "example": "https://cdn-icons-png.flaticon.com/512/5695/5695864.png"
          },
          "textColor": {
            "type": "string",
            "description": "Hex value representing the color of the text string assigned to `value`.",
            "example": "#1a1a1a"
          },
          "tooltip": {
            "type": "string",
            "description": "A short text displayed in a tooltip when clicking or hovering over the preview field.",
            "example": "Completion status indicator"
          },
          "value": {
            "type": "string",
            "description": "The actual data value of the custom field.\nIt can be any type of information that you want to convey.",
            "example": "Status: in progress"
          }
        },
        "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view."
      },
      "DocumentData": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A short text header to identify the document.",
            "example": "Sample document title"
          }
        }
      },
      "EmbedData": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "Type of the embedded item's content.",
            "example": "video"
          },
          "description": {
            "type": "string",
            "description": "Short description of the embedded item.",
            "example": "So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en..."
          },
          "html": {
            "type": "string",
            "description": "Html code of the embedded item.",
            "example": "<iframe class=\\\"embedly-embed\\\" src=\\\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\\\" width=\\\"854\\\" height=\\\"480\\\" scrolling=\\\"no\\\" title=\\\"YouTube embed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen\\\" allowfullscreen=\\\"true\\\"></iframe>"
          },
          "mode": {
            "type": "string",
            "description": "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.\nPossible values: `inline`, `modal`",
            "enum": ["inline", "modal"]
          },
          "providerName": {
            "type": "string",
            "description": "Name of the content's provider.",
            "example": "YouTube"
          },
          "providerUrl": {
            "type": "string",
            "description": "Url of the content's provider.",
            "example": "https://www.youtube.com/"
          },
          "title": {
            "type": "string",
            "description": "Title of the embedded item.",
            "example": "HOW TO ORGANIZE YOUR LIFE WITH MIRO! ✏️ Virtual Whiteboard Tour"
          },
          "url": {
            "type": "string",
            "description": "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.",
            "example": "https://www.youtube.com/watch?v=HlVSNEiFCBk"
          }
        }
      },
      "EmptyStyle": {
        "type": "object",
        "description": "Contains information about the style of an item, such as the color, font, or border style."
      },
      "FrameData": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Only custom frames are supported at the moment.\nPossible values: `custom`, `desktop`, `phone`, `tablet`, `a4`, `letter`, `ratio_1x1`, `ratio_4x3`, `ratio_16x9`",
            "default": "custom",
            "enum": ["custom", "desktop", "phone", "tablet", "a4", "letter", "ratio_1x1", "ratio_4x3", "ratio_16x9"]
          },
          "title": {
            "type": "string",
            "description": "Title of the frame. This title appears at the top of the frame.",
            "example": "Sample frame title"
          },
          "type": {
            "type": "string",
            "description": "Only free form frames are supported at the moment.\nPossible values: `freeform`, `heap`, `grid`, `rows`, `columns`",
            "default": "freeform",
            "enum": ["freeform", "heap", "grid", "rows", "columns"]
          }
        },
        "description": "Contains frame item data, such as the title, frame type, or frame format. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "Geometry": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "format": "double",
            "description": "Height of the item, in pixels.",
            "example": 60
          },
          "rotation": {
            "type": "number",
            "format": "double",
            "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."
          },
          "width": {
            "type": "number",
            "format": "double",
            "description": "Width of the item, in pixels.",
            "example": 320
          }
        },
        "description": "Contains geometrical information about the item, such as its width or height. For information about the JSON properties, see [Geometry](https://developers.miro.com/reference/geometry)."
      },
      "ImageData": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A short text header to identify the image.",
            "example": "Sample image title"
          }
        }
      },
      "PageLinks": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "description": "Link to retrieve information in the first page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX=="
          },
          "last": {
            "type": "string",
            "description": "Link to the retrieve information in the last page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX=="
          },
          "next": {
            "type": "string",
            "description": "Link to retrieve information in the next page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw=="
          },
          "prev": {
            "type": "string",
            "description": "Link to retrieve information in the previous page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor="
          },
          "self": {
            "type": "string",
            "description": "Link to retrieve information in the current page of the collection.",
            "example": "http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX=="
          }
        },
        "description": "Contains pagination links for the collection."
      },
      "Position": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "string",
            "description": "Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.\nCurrently, only one option is supported.\nPossible values: `center`",
            "default": "center",
            "enum": ["center"]
          },
          "relativeTo": {
            "type": "string",
            "enum": ["canvas_center", "parent_top_left"]
          },
          "x": {
            "type": "number",
            "format": "double",
            "default": 0,
            "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "example": 100
          },
          "y": {
            "type": "number",
            "format": "double",
            "default": 0,
            "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport.\nThe center point of the board has `x: 0` and `y: 0` coordinates.",
            "example": 100
          }
        },
        "description": "Contains location information about the item, such as its x coordinate, y coordinate, and theorigin of the x and y coordinates."
      },
      "SelfLink": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "description": "Link to obtain more information about the current object.",
            "example": "http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487"
          }
        },
        "description": "Contains applicable links for the current object."
      },
      "ShapeData": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The text you want to display on the shape.",
            "default": "Hello"
          },
          "shape": {
            "type": "string",
            "description": "Defines the geometric shape of the item when it is rendered on the board.\nPossible values: `rectangle`, `round_rectangle`, `circle`, `triangle`, `rhombus`, `parallelogram`, `trapezoid`, `pentagon`, `hexagon`, `octagon`, `wedge_round_rectangle_callout`, `star`, `flow_chart_predefined_process`, `cloud`, `cross`, `can`, `right_arrow`, `left_arrow`, `left_right_arrow`, `left_brace`, `right_brace`",
            "default": "rectangle",
            "enum": [
              "rectangle",
              "round_rectangle",
              "circle",
              "triangle",
              "rhombus",
              "parallelogram",
              "trapezoid",
              "pentagon",
              "hexagon",
              "octagon",
              "wedge_round_rectangle_callout",
              "star",
              "flow_chart_predefined_process",
              "cloud",
              "cross",
              "can",
              "right_arrow",
              "left_arrow",
              "left_right_arrow",
              "left_brace",
              "right_brace"
            ]
          }
        },
        "description": "Contains shape item data, such as the content or shape type of the shape. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "StickyNoteData": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The actual text (content) that appears in the sticky note item.",
            "example": "Hello",
            "default": "Hello"
          },
          "shape": {
            "type": "string",
            "description": "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.\nPossible values: `square`, `rectangle`",
            "default": "square",
            "enum": ["square", "rectangle"]
          }
        },
        "description": "Contains sticky note item data, such as the content or shape of the sticky note. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "TextData": {
        "required": ["content"],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The actual text (content) that appears in the text item.",
            "example": "Hello",
            "default": "Hello"
          }
        },
        "description": "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data)."
      },
      "WidgetData": {
        "type": "object",
        "description": "Contains the item data, such as the item title, content, or description.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextData"
          },
          {
            "$ref": "#/components/schemas/EmbedData"
          },
          {
            "$ref": "#/components/schemas/CardData"
          },
          {
            "$ref": "#/components/schemas/AppCardData"
          },
          {
            "$ref": "#/components/schemas/ImageData"
          },
          {
            "$ref": "#/components/schemas/DocumentData"
          },
          {
            "$ref": "#/components/schemas/ShapeData"
          },
          {
            "$ref": "#/components/schemas/FrameData"
          },
          {
            "$ref": "#/components/schemas/StickyNoteData"
          }
        ]
      },
      "BoardDataClassificationLabel": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "description": "Label color",
            "example": "blue"
          },
          "description": {
            "type": "string",
            "description": "Label description",
            "example": "Board could not be shared publicly"
          },
          "id": {
            "type": "string",
            "description": "Label id",
            "example": "3000457366756290996"
          },
          "name": {
            "type": "string",
            "description": "Label name",
            "example": "internal"
          }
        }
      },
      "CreatePictureRequest": {
        "type": "object",
        "properties": {
          "originalUrl": {
            "type": "string",
            "description": "Original team picture url for icon generation. Note: picture update is not supported yet.",
            "example": "https://miro.com/original-image.jpg"
          }
        },
        "description": "Team picture"
      },
      "CreateTeamRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Team name",
            "example": "Dev Team"
          },
          "picture": {
            "$ref": "#/components/schemas/CreatePictureRequest"
          }
        }
      },
      "DataClassificationLabel": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "description": "Label color",
            "example": "#F5DC80"
          },
          "default": {
            "type": "boolean",
            "description": "Label is default",
            "example": false
          },
          "description": {
            "type": "string",
            "description": "Label description",
            "example": "Board could not be shared publicly"
          },
          "id": {
            "type": "string",
            "description": "Label id",
            "example": "3000457366756290996"
          },
          "name": {
            "type": "string",
            "description": "Label name",
            "example": "internal"
          },
          "orderNumber": {
            "type": "integer",
            "description": "Label order number",
            "format": "int32",
            "example": 2
          }
        },
        "description": "Data classification labels"
      },
      "DataClassificationLabelId": {
        "type": "object",
        "properties": {
          "labelId": {
            "type": "string",
            "description": "Data classification label id",
            "example": "3000457366756290996"
          }
        }
      },
      "DataClassificationOrganizationSettings": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Data classification enabled for organization",
            "example": true
          },
          "labels": {
            "type": "array",
            "description": "Data classification labels",
            "items": {
              "$ref": "#/components/schemas/DataClassificationLabel"
            }
          }
        }
      },
      "DataClassificationTeamSettings": {
        "type": "object",
        "properties": {
          "defaultLabelId": {
            "type": "string",
            "description": "Data classification default label id",
            "example": "3000457366756290996"
          },
          "enabled": {
            "type": "boolean",
            "description": "Data classification enabled for team",
            "example": true
          }
        }
      },
      "InvitationError": {
        "type": "object",
        "properties": {
          "memberEmail": {
            "type": "string"
          },
          "reason": {
            "type": "object",
            "properties": {
              "localizedMessage": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": {
                      "type": "string"
                    },
                    "className": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "methodName": {
                      "type": "string"
                    },
                    "moduleName": {
                      "type": "string"
                    },
                    "moduleVersion": {
                      "type": "string"
                    },
                    "nativeMethod": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "suppressed": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "localizedMessage": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "stackTrace": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "classLoaderName": {
                            "type": "string"
                          },
                          "className": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          },
                          "lineNumber": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "methodName": {
                            "type": "string"
                          },
                          "moduleName": {
                            "type": "string"
                          },
                          "moduleVersion": {
                            "type": "string"
                          },
                          "nativeMethod": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "InvitationResult": {
        "type": "object",
        "properties": {
          "failed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvitationError"
            }
          },
          "successful": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        }
      },
      "Organization": {
        "required": ["fullLicensesPurchased", "id", "name", "plan"],
        "type": "object",
        "properties": {
          "fullLicensesPurchased": {
            "type": "integer",
            "description": "Purchased FULL licenses",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "description": "Id of the organization",
            "example": "3074457345821140946"
          },
          "name": {
            "type": "string",
            "description": "Name of the organization",
            "example": "Miro company"
          },
          "plan": {
            "type": "string",
            "description": "Organization plan type",
            "example": "company",
            "enum": [
              "UNKNOWN",
              "COMPANY",
              "CONSULTANT",
              "CONSULTANT_SLF",
              "BUSINESS",
              "PAID_TEAM_ORG",
              "INTEGRATION_ORG",
              "PROFESSIONAL_2022",
              "EDU_TEAM_ORG",
              "FREE_TEAM_ORG"
            ]
          },
          "type": {
            "type": "string"
          }
        }
      },
      "OrganizationMember": {
        "required": ["active", "email", "id", "license", "role"],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Flag is user active",
            "example": true
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "user@miro.com"
          },
          "id": {
            "type": "string",
            "description": "Id of the user",
            "example": "3074457345821140934"
          },
          "lastActivityAt": {
            "type": "string",
            "description": "Last time when the user was active",
            "format": "date-time"
          },
          "license": {
            "type": "string",
            "description": "Name of the current user license in the organization",
            "example": "full",
            "enum": ["UNKNOWN", "FULL", "OCCASIONAL", "FREE", "FREE_RESTRICTED", "FULL_TRIAL"]
          },
          "licenseAssignedAt": {
            "type": "string",
            "description": "Time when the license was assigned to the user",
            "format": "date-time"
          },
          "role": {
            "type": "string",
            "description": "Name of the user role in the organization",
            "example": "organization_internal_user",
            "enum": [
              "UNKNOWN",
              "ORGANIZATION_INTERNAL_ADMIN",
              "ORGANIZATION_INTERNAL_USER",
              "ORGANIZATION_EXTERNAL_USER",
              "ORGANIZATION_TEAM_GUEST_USER"
            ]
          },
          "type": {
            "type": "string"
          }
        },
        "description": "Response for search organization members by user emails"
      },
      "OrganizationMembersSearchByEmailsResponse": {
        "type": "array",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "description": "Response for search organization members by user emails",
        "items": {
          "$ref": "#/components/schemas/OrganizationMember"
        }
      },
      "OrganizationMembersSearchQuery": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Filtering parameter. Filter organization members by activity"
          },
          "cursor": {
            "type": "string",
            "description": "The ID of the organization member used as the reference for pagination. To retrieve the first portion of the collection don't pass a cursor value. To retrieve the next portion of the collection, set the `cursor` parameter value to the ID of the last organization member you received in the response of the previous request.",
            "example": "3055557345821140946"
          },
          "emails": {
            "maxItems": 10,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "Emails of the organization members you want to retrieve. If you specify a value for the `emails` parameter, only the `emails` parameter is considered. All other filtering parameters are ignored.",
            "example": "emails=someEmail1@miro.com&emails=someEmail2@miro.com",
            "items": {
              "type": "string",
              "description": "Emails of the organization members you want to retrieve. If you specify a value for the `emails` parameter, only the `emails` parameter is considered. All other filtering parameters are ignored.",
              "example": "emails=someEmail1@miro.com&emails=someEmail2@miro.com"
            }
          },
          "license": {
            "type": "string",
            "description": "Filtering parameter. Filter organization members by license",
            "example": "full"
          },
          "limit": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Limit for the number of organization members returned in the result list.",
            "format": "int32",
            "example": 100
          },
          "role": {
            "type": "string",
            "description": "Filtering parameter. Filter organization members by role",
            "example": "organization_internal_user"
          }
        }
      },
      "OrganizationMembersSearchResponse": {
        "type": "object",
        "properties": {
          "cursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMember"
            }
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Response for query by cursor and filter parameters"
      },
      "Picture": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the picture",
            "format": "int64",
            "example": 3074457345618261500
          },
          "imageURL": {
            "type": "string",
            "description": "Url of the picture",
            "example": "https://miro.images/5252525252/125252/266/144/1/size210.jpg"
          },
          "originalUrl": {
            "type": "string",
            "description": "Original team picture url for icon generation",
            "example": "https://miro.com/original-image.jpg"
          },
          "type": {
            "type": "string"
          }
        },
        "description": "Team picture"
      },
      "Team": {
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Team id",
            "format": "int64",
            "example": 3074457345618265000
          },
          "name": {
            "type": "string",
            "description": "Team name",
            "example": "Dev Team"
          },
          "picture": {
            "$ref": "#/components/schemas/Picture"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "TeamAccountDiscoverySettings": {
        "type": "object",
        "properties": {
          "accountDiscovery": {
            "type": "string",
            "description": "\n* \"hidden\":  Only invited users can see and access the team.\n* \"request\": Members of organization can find and request to join with admin approval.\n* \"join\":    Members of organization can find and join.\n",
            "enum": ["hidden", "request", "join"]
          }
        },
        "description": "Team account discovery settings"
      },
      "TeamAccountDiscoverySettingsChanges": {
        "type": "object",
        "properties": {
          "accountDiscovery": {
            "type": "string",
            "description": "\n* \"hidden\":  Only invited users can see and access the team.\n* \"request\": Members of organization can find and request to join with admin approval.\n* \"join\":    Members of organization can find and join.\n",
            "enum": ["hidden", "request", "join"]
          }
        },
        "description": "Team account discovery settings"
      },
      "TeamChanges": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Team name",
            "example": "Dev Team"
          },
          "picture": {
            "$ref": "#/components/schemas/CreatePictureRequest"
          }
        }
      },
      "TeamCollaborationSettings": {
        "type": "object",
        "properties": {
          "coOwnerRole": {
            "type": "string",
            "description": "\n* \"enabled\": Enable Co-owner role on boards and projects\n* \"disabled\": Disabled Co-owner role on boards and projects\n",
            "enum": ["enabled", "disabled"]
          }
        },
        "description": "Team collaboration settings"
      },
      "TeamCollaborationSettingsChanges": {
        "type": "object",
        "properties": {
          "coOwnerRole": {
            "type": "string",
            "description": "\n* \"enabled\": Enable Co-owner role on boards and projects\n* \"disabled\": Disabled Co-owner role on boards and projects\n",
            "enum": ["enabled", "disabled"]
          }
        },
        "description": "Team collaboration settings"
      },
      "TeamCopyAccessLevelSettings": {
        "type": "object",
        "properties": {
          "copyAccessLevel": {
            "type": "string",
            "description": "\n* \"anyone\":       Anyone with the board access can copy board content on newly created boards.\n* \"team_members\": Team members can copy board content on newly created boards.\n* \"team_editors\": Team members with editing rights can copy board content on newly created boards.\n* \"board_owner\":  Board owners only can copy board content on newly created boards.\n",
            "enum": ["anyone", "team_members", "team_editors", "board_owner"]
          },
          "copyAccessLevelLimitation": {
            "type": "string",
            "description": "\n* \"anyone\":       Team members and users outside team can be given permission to copy board content.\n* \"team_members\": Only team members can be given permission to copy board content.\n",
            "enum": ["anyone", "team_members"]
          }
        },
        "description": "Team copy access settings"
      },
      "TeamCopyAccessLevelSettingsChanges": {
        "type": "object",
        "properties": {
          "copyAccessLevel": {
            "type": "string",
            "description": "\n* \"anyone\":       Anyone with the board access can copy board content on newly created boards.\n* \"team_members\": Team members can copy board content on newly created boards.\n* \"team_editors\": Team members with editing rights can copy board content on newly created boards.\n* \"board_owner\":  Board owners only can copy board content on newly created boards.\n",
            "enum": ["anyone", "team_members", "team_editors", "board_owner"]
          },
          "copyAccessLevelLimitation": {
            "type": "string",
            "description": "\n* \"anyone\":       Team members and users outside team can be given permission to copy board content.\n* \"team_members\": Only team members can be given permission to copy board content.\n",
            "enum": ["anyone", "team_members"]
          }
        },
        "description": "Team copy access settings"
      },
      "TeamInvitationSettings": {
        "type": "object",
        "properties": {
          "inviteExternalUsers": {
            "type": "string",
            "description": "\n* \"allowed\": Allow non-team collaborators for team\n* \"not_allowed\": Not Allow non-team collaborators for team\n",
            "enum": ["allowed", "not_allowed"]
          },
          "whoCanInvite": {
            "type": "string",
            "description": "\n* \"only_org_admins\": Company admins only can invite\n* \"admins\":          Company admins and team admins can invite\n* \"all_members\":     All team members can invite\n",
            "enum": ["only_org_admins", "admins", "all_members"]
          }
        },
        "description": "Team invitation settings"
      },
      "TeamInvitationSettingsChanges": {
        "type": "object",
        "properties": {
          "inviteExternalUsers": {
            "type": "string",
            "description": "\n* \"allowed\": Allow non-team collaborators for team\n* \"not_allowed\": Not Allow non-team collaborators for team\n",
            "enum": ["allowed", "not_allowed"]
          },
          "whoCanInvite": {
            "type": "string",
            "description": "\n* \"only_org_admins\": Company admins only can invite\n* \"admins\":          Company admins and team admins can invite\n* \"all_members\":     All team members can invite\n",
            "enum": ["only_org_admins", "admins", "all_members"]
          }
        },
        "description": "Team invitation settings"
      },
      "TeamMember": {
        "required": ["memberId", "teamId", "userRole"],
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Invited user date",
            "format": "date-time"
          },
          "createdByUserId": {
            "type": "integer",
            "description": "User id of user who invited the team member",
            "format": "int64",
            "example": 3074457345618264000
          },
          "memberId": {
            "type": "integer",
            "description": "Team member id",
            "format": "int64",
            "example": 3074457345618264000
          },
          "modifiedAt": {
            "type": "string",
            "description": "Latest user role modification date",
            "format": "date-time"
          },
          "modifiedByUserId": {
            "type": "integer",
            "description": "User id of user who updated the team member",
            "format": "int64",
            "example": 3074457345618264000
          },
          "teamId": {
            "type": "integer",
            "description": "Team id",
            "format": "int64",
            "example": 3074457345618265000
          },
          "type": {
            "type": "string"
          },
          "userRole": {
            "type": "string",
            "description": "\n    * \"non_team\":   External user, non-team user.\n    * \"member\":     Team member with full member permissions.\n    * \"admin\":      Admin of a team. Team member with permission to manage team.\n    * \"team_guest\": Team-guest user, user with access only to a team without access to organization.\n    ",
            "enum": ["non_team", "member", "admin", "team_guest"]
          }
        }
      },
      "TeamMemberChanges": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "User role inside team",
            "example": "member"
          }
        }
      },
      "TeamMemberInvite": {
        "type": "object",
        "properties": {
          "userEmail": {
            "type": "string",
            "description": "User email to add to a team",
            "example": "user@miro.com"
          }
        }
      },
      "TeamSettings": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "description": "Organization id",
            "format": "int64",
            "example": 3074457345618265000
          },
          "teamAccountDiscoverySettings": {
            "$ref": "#/components/schemas/TeamAccountDiscoverySettings"
          },
          "teamCollaborationSettings": {
            "$ref": "#/components/schemas/TeamCollaborationSettings"
          },
          "teamCopyAccessLevelSettings": {
            "$ref": "#/components/schemas/TeamCopyAccessLevelSettings"
          },
          "teamId": {
            "type": "integer",
            "description": "Team id",
            "format": "int64",
            "example": 3074457345618265000
          },
          "teamInvitationSettings": {
            "$ref": "#/components/schemas/TeamInvitationSettings"
          },
          "teamSharingPolicySettings": {
            "$ref": "#/components/schemas/TeamSharingPolicySettings"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "TeamSettingsChanges": {
        "type": "object",
        "properties": {
          "teamAccountDiscoverySettings": {
            "$ref": "#/components/schemas/TeamAccountDiscoverySettingsChanges"
          },
          "teamCollaborationSettings": {
            "$ref": "#/components/schemas/TeamCollaborationSettingsChanges"
          },
          "teamCopyAccessLevelSettings": {
            "$ref": "#/components/schemas/TeamCopyAccessLevelSettingsChanges"
          },
          "teamInvitationSettings": {
            "$ref": "#/components/schemas/TeamInvitationSettingsChanges"
          },
          "teamSharingPolicySettings": {
            "$ref": "#/components/schemas/TeamSharingPolicySettingsChanges"
          }
        }
      },
      "TeamSharingPolicySettings": {
        "type": "object",
        "properties": {
          "createAssetAccessLevel": {
            "type": "string",
            "description": "Set who can create assets in a team",
            "enum": ["COMPANY_ADMINS", "ADMINS", "ALL_MEMBERS"]
          },
          "defaultBoardAccess": {
            "type": "string",
            "description": "\nDefault board access\n* \"private\": Only board owners can access\n* \"view\":    Anyone in the team can view\n* \"comment\": Anyone in the team can comment\n* \"edit\":    Anyone in the team can edit\n",
            "enum": ["private", "view", "comment", "edit"]
          },
          "defaultOrganizationAccess": {
            "type": "string",
            "description": "\nDefault organization access\n* \"private\": Only board owners can access\n* \"view\":    Anyone in the team can view\n* \"comment\": Anyone in the team can comment\n* \"edit\":    Anyone in the team can edit\n",
            "enum": ["private", "view", "comment", "edit"]
          },
          "defaultProjectAccess": {
            "type": "string",
            "description": "\nDefault project access\n* \"private\": Only board owners can access\n* \"view\":    Anyone in the team can view\n",
            "enum": ["private", "view"]
          },
          "moveBoardToAccount": {
            "type": "string",
            "description": "\n* \"allowed\": Allow move board to team\n* \"not_allowed\": Not allow move board to team\n",
            "enum": ["allowed", "not_allowed"]
          },
          "sharingOnAccount": {
            "type": "string",
            "description": "\n* \"allowed\": Allow sharing on team\n* \"not_allowed\": Not allow sharing on team\n",
            "enum": ["allowed", "not_allowed"]
          },
          "sharingOnOrganization": {
            "type": "string",
            "description": "\n* \"allowed\": Allow sharing on organization\n* \"allowed_with_editing\": Allow sharing with editing on organization\n* \"not_allowed\": Not allow sharing on organization\n",
            "enum": ["allowed", "allowed_with_editing", "not_allowed"]
          },
          "sharingViaPublicLink": {
            "type": "string",
            "description": "\n* \"allowed\": Allow sharing via public link\n* \"allowed_with_editing\": Allow sharing with editing via public link\n* \"not_allowed\": Not allow sharing via public link\n",
            "enum": ["allowed", "allowed_with_editing", "not_allowed"]
          },
          "sharingWithExternalUsers": {
            "type": "string",
            "description": "\n* \"allowed\": Allow sharing with external users\n* \"not_allowed\": Not allow sharing with external users\n",
            "enum": ["allowed", "not_allowed"]
          },
          "whiteListDomainsEnabled": {
            "type": "boolean",
            "description": "Enable whitelist domains"
          },
          "whiteListedDomains": {
            "type": "array",
            "description": "Whitelisted domains",
            "items": {
              "type": "string",
              "description": "Whitelisted domains"
            }
          }
        },
        "description": "Team sharing policy settings"
      },
      "TeamSharingPolicySettingsChanges": {
        "type": "object",
        "properties": {
          "createAssetAccessLevel": {
            "type": "string",
            "description": "Set who can create assets in a team",
            "enum": ["COMPANY_ADMINS", "ADMINS", "ALL_MEMBERS"]
          },
          "defaultBoardAccess": {
            "type": "string",
            "description": "\nDefault board access\n* \"private\": Only board owners can access\n* \"view\":    Anyone in the team can view\n* \"comment\": Anyone in the team can comment\n* \"edit\":    Anyone in the team can edit\n",
            "enum": ["private", "view", "comment", "edit"]
          },
          "defaultOrganizationAccess": {
            "type": "string",
            "description": "\nDefault organization access\n* \"private\": Only board owners can access\n* \"view\":    Anyone in the team can view\n* \"comment\": Anyone in the team can comment\n* \"edit\":    Anyone in the team can edit\n",
            "enum": ["private", "view", "comment", "edit"]
          },
          "defaultProjectAccess": {
            "type": "string",
            "description": "\nDefault project access\n* \"private\": Only board owners can access\n* \"view\":    Anyone in the team can view\n",
            "enum": ["private", "view"]
          },
          "moveBoardToAccount": {
            "type": "string",
            "description": "\n* \"allowed\": Allow move board to team\n* \"not_allowed\": Not allow move board to team\n",
            "enum": ["allowed", "not_allowed"]
          },
          "sharingOnAccount": {
            "type": "string",
            "description": "\n* \"allowed\": Allow sharing on team\n* \"not_allowed\": Not allow sharing on team\n",
            "enum": ["allowed", "not_allowed"]
          },
          "sharingOnOrganization": {
            "type": "string",
            "description": "\n* \"allowed\": Allow sharing on organization\n* \"allowed_with_editing\": Allow sharing with editing on organization\n* \"not_allowed\": Not allow sharing on organization\n",
            "enum": ["allowed", "allowed_with_editing", "not_allowed"]
          },
          "sharingViaPublicLink": {
            "type": "string",
            "description": "\n* \"allowed\": Allow sharing via public link\n* \"allowed_with_editing\": Allow sharing with editing via public link\n* \"not_allowed\": Not allow sharing via public link\n",
            "enum": ["allowed", "allowed_with_editing", "not_allowed"]
          },
          "sharingWithExternalUsers": {
            "type": "string",
            "description": "\n* \"allowed\": Allow sharing with external users\n* \"not_allowed\": Not allow sharing with external users\n",
            "enum": ["allowed", "not_allowed"]
          },
          "whiteListDomainsEnabled": {
            "type": "boolean",
            "description": "Enable whitelist domains"
          },
          "whiteListedDomains": {
            "type": "array",
            "description": "Whitelisted domains",
            "items": {
              "type": "string",
              "description": "Whitelisted domains"
            }
          }
        },
        "description": "Team sharing policy settings"
      },
      "UpdateBoardsDataClassificationLabel": {
        "type": "object",
        "properties": {
          "numberUpdatedBoards": {
            "type": "integer",
            "description": "Number of boards updated in the team",
            "format": "int64",
            "example": 10
          }
        }
      },
      "UpdateBoardsDataClassificationLabelRequest": {
        "type": "object",
        "properties": {
          "labelId": {
            "type": "integer",
            "description": "Data classification label id for team",
            "format": "int64",
            "example": 3000457366756291000
          },
          "notClassifiedOnly": {
            "type": "boolean",
            "description": "Assign data classification label to not-classified only or to all boards of team",
            "example": true
          }
        }
      },
      "UpdateTeamSettingsRequest": {
        "type": "object",
        "properties": {
          "defaultLabelId": {
            "type": "integer",
            "description": "Data classification default label id",
            "format": "int64",
            "example": 3000457366756291000
          },
          "enabled": {
            "type": "boolean",
            "description": "Data classification enabled for team",
            "example": true
          }
        }
      },
      "UserId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "securitySchemes": {
      "oAuth2AuthCode": {
        "type": "oauth2",
        "description": "For more information, see https://developers.miro.com/reference/authorization-flow-for-expiring-tokens",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://miro.com/oauth/authorize",
            "tokenUrl": "https://api.miro.com/v1/oauth/token",
            "scopes": {
              "boards:read": "Retrieve information about boards, board members, or items",
              "boards:write": "Create, update, or delete boards, board members, or items",
              "microphone:listen": "Access a user's microphone to record audio in an iFrame",
              "screen:record": "Access a user's screen to record it in an iFrame",
              "webcam:record": "Allows an iFrame to access a user's camera to record video",
              "organizations:read": "Read information about the organization, such as name, plan, number of licenses, organization settings, or organization members.",
              "organizations:teams:read": "Read team information, such as the list of teams, team settings, team members, for an organization.",
              "organizations:teams:write": "Create or delete teams, update team information, team settings, team members, for an organization."
            }
          }
        }
      }
    }
  }
}
