import fetch, {Response, RequestInit} from 'node-fetch';
import {version} from '../package.json'
import FormData = require('form-data')

{{#apiInfo}}
{{#apis}}

{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

{{/apis}}

import { ObjectSerializer, RequestFile } from '../model/models';

let defaultBasePath = '{{{basePath}}}';

export type Logger = (...thing: any) => void

export class MiroApi {

    accessToken: string|(() => Promise<string>)
    basePath: string
    logger?: Logger
    httpTimeout?: number

    constructor(
        accessToken: string | (() => Promise<string>),
        basePath: string = defaultBasePath,
        logger?: Logger,
        httpTimeout?: number,
    ) {
        this.accessToken = accessToken
        this.basePath = basePath
        this.logger = logger
        this.httpTimeout = httpTimeout
    }

{{#apis}}
{{#operations}}

    {{#operation}}

        /**
         * {{&notes}}
         {{#summary}}
         * @summary {{&summary}}
         {{/summary}}
         {{#allParams}}
         * @param {{paramName}} {{description}}
         {{/allParams}}
         */
        async {{nickname}} ({{#requiredParams}}{{paramName}}: {{{dataType}}}, {{/requiredParams}}
        {{#optionalParams}}
{{#isQueryParam}}{{#-first}} query?: { {{/-first}}{{/isQueryParam}}
{{#isBodyParam}}{{^-first}} }, {{/-first}} {{/isBodyParam}}
{{paramName}}?: {{{dataType}}},
{{#isQueryParam}}{{#-last}} }, {{/-last}} {{/isQueryParam}}
{{/optionalParams}}) : Promise<{ response: Response; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
        const localVarPath = '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        let localVarQueryParameters = new URLSearchParams();
{{#pathParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
{{/required}}
{{/pathParams}}

{{#queryParams}}

    {{#required}}
            // verify required parameter '{{paramName}}' is not null or undefined
            if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
            }

    {{/required}}

        if ({{^required}}query?.{{/required}}{{paramName}} !== undefined) {
            localVarQueryParameters.append('{{baseName}}', ObjectSerializer.serialize({{^required}}query?.{{/required}}{{paramName}}, "{{{dataType}}}"));
        }

{{/queryParams}}
{{#hasFormParams}}
        const formData = new FormData();
        let extension = ""
    {{#formParams}}
        if ({{paramName}}) {
            {{#isFile}}
            if ('{{nickname}}'.includes('Image')) {
                extension = '.png'
            } else if ('{{nickname}}'.includes('Document')) {
                extension = '.pdf'
            }
            formData.append('{{paramName}}', {{paramName}} , "file" + extension)
            {{/isFile}}

            {{^isFile}}
            formData.append('{{paramName}}', JSON.stringify(ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}")));
            {{/isFile}}
        }
    {{/formParams}}
{{/hasFormParams}}

        const urlResource = new URL(localVarPath, this.basePath)
        urlResource.search = localVarQueryParameters.toString()

        const {response, bodyAsJson} = await makeJsonRequest(
            typeof this.accessToken === 'function' ? await this.accessToken() : this.accessToken,
            '{{httpMethod}}',
            urlResource,
            {{#hasFormParams}}
            formData,
            {{/hasFormParams}}
            {{#bodyParam}}
            JSON.stringify(ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}")),
            {{/bodyParam}}
            {{^bodyParam}}
            {{^hasFormParams}}
            undefined,
            {{/hasFormParams}}
            {{/bodyParam}}

            this.logger
        )


        {{#returnType}}
        const body = ObjectSerializer.deserialize(bodyAsJson, "{{{.}}}");
        {{/returnType}}
        {{^returnType}}
        const body = bodyAsJson
        {{/returnType}}

        return {response, body}
    }
    {{/operation}}
{{/operations}}
{{/apis}}

  async call(method: string, url: string, body?: string|FormData) {
    const resource = new URL(url, this.basePath)
    const {bodyAsJson, response} = await makeJsonRequest(
      typeof this.accessToken === 'function' ? await this.accessToken() : this.accessToken,
      method,
      resource,
      body,

      this.logger,
    )

    return {body: bodyAsJson, response}
}
}

export class HttpError extends Error {
    constructor (public response: Response, public body: any, public statusCode?: number) {
        super('HTTP request failed');
        this.name = 'HttpError';
    }
}

export async function makeJsonRequest(token: string, method: string, url: URL, body?: string|FormData, logger?: (...thing: any) => void, httpTimeout: number = 15000) {


    const options: RequestInit = {
        method,
        headers: {
            'User-Agent': `miro-api:${version}`,
            'Accept': 'application/json',
            'Authorization': `Bearer ${token}`
        },
        body,
        timeout: httpTimeout,
    }

    if (typeof body === 'string') {
        options.headers = {...options.headers, 'Content-Type': 'application/json'}
    }

    const hasLogger = typeof logger === 'function'

    if (hasLogger) logger('FETCH', url.toString(), options)

    const response = await fetch(url.toString(), options)

    if (hasLogger) logger('RESPONSE', response)

    let bodyAsJson: unknown
    try {
        bodyAsJson = await response.json()
    } catch (err) {
        // Body doesn't have valid json
    }

    if (hasLogger && bodyAsJson) logger('BODY', bodyAsJson)

    if (!response.ok) {
        throw new HttpError(response, bodyAsJson, response.status)
    }

    return {bodyAsJson, response}
}

{{/apiInfo}}
