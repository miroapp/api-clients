openapi: 3.0.1
info:
  title: Enterprise Beta APIs
  version: v2.0
servers:
- url: https://api.miro.com
security:
- bearerAuth: []
tags:
- description: e-Discovery API to export Miro board data.
  name: Board export job
paths:
  /v2/orgs/{org_id}/boards/export/jobs:
    post:
      x-settings:
        skip-tests: true
      description: Creates an export job for one or more boards.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:export</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 4</a>
        <br/><h3>Enterprise only</h3> <p>This API is available only for <a target="blank"
        href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users.
        You can only use this endpoint if you have the role of a Company Admin and
        eDiscovery is enabled in the Settings. You can request temporary access to
        Enterprise APIs using <a target="_blank" href="https://miro-survey.typeform.com/to/BVPTNWJ9">this
        form</a>.</p>
      operationId: enterprise-create-board-export
      parameters:
      - description: Unique identifier of the organization.
        example: 3074457345821141000
        in: path
        name: org_id
        required: true
        schema:
          type: string
      - description: Unique identifier of the board export job.
        example: 92343229-c532-446d-b8cb-2f155bedb807
        in: query
        name: request_id
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBoardExportRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardExportJobId'
          description: Unique identifier of the board export job
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
      summary: Create board export job
      tags:
      - Board export job
  /v2/orgs/{org_id}/boards/export/jobs/{job_id}:
    get:
      x-settings:
        skip-tests: true
      description: Retrieves the status of the board export job.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:export</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 4</a>
        <br/><h3>Enterprise only</h3> <p>This API is available only for <a target="blank"
        href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users.
        You can only use this endpoint if you have the role of a Company Admin and
        eDiscovery is enabled in the Settings. You can request temporary access to
        Enterprise APIs using <a target="_blank" href="https://miro-survey.typeform.com/to/BVPTNWJ9">this
        form</a>.</p>
      operationId: enterprise-board-export-job-status
      parameters:
      - description: Unique identifier of the organization.
        example: 3074457345821141000
        in: path
        name: org_id
        required: true
        schema:
          type: string
      - description: Unique identifier of the board export job.
        example: 92343229-c532-446d-b8cb-2f155bedb807
        in: path
        name: job_id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardExportJobStatus'
          description: Board export job status
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
      summary: Get board export job status
      tags:
      - Board export job
  /v2/orgs/{org_id}/boards/export/jobs/{job_id}/results:
    get:
      x-settings:
        skip-tests: true
      description: Retrieves the result of the board export job. The response provides
        more information about the board export job, such as the S3 link to the files
        created.<br/><h3>Required scope</h3> <a target="blank" href="/reference/scopes">boards:export</a>
        <br/><h3>Rate limiting</h3> <a target="blank" href="/reference/ratelimiting">Level
        4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target="blank"
        href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users.
        You can only use this endpoint if you have the role of a Company Admin and
        eDiscovery is enabled in the Settings. You can request temporary access to
        Enterprise APIs using <a target="_blank" href="https://miro-survey.typeform.com/to/BVPTNWJ9">this
        form</a>.</p>
      operationId: enterprise-board-export-job-results
      parameters:
      - description: Unique identifier of the organization.
        example: 3074457345821141000
        in: path
        name: org_id
        required: true
        schema:
          type: string
      - description: Unique identifier of the job.
        example: 92343229-c532-446d-b8cb-2f155bedb807
        in: path
        name: job_id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardExportResult'
          description: Board export job result
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
      summary: Get results for board export job
      tags:
      - Board export job
  /v2/orgs/{org_id}/content-logs/items:
    get:
      x-settings:
        skip-tests: true
      description: "Retrieves content changes for board items within your organization.\
        \ Content changes are actions that users can perform on board items, such\
        \ as updating a sticky note's text. You can retrieve results for a specific\
        \ time period. You can also filter results based on the board IDs and the\
        \ emails of users who created, modified, or deleted a board item. Additionally,\
        \ results can be paginated for easier viewing and processing.\n<br/><h3>Required\
        \ scope</h3> <a target=\"blank\" href=\"/reference/scopes\">contentlogs:export</a>\
        \ \n<br/><h3>Rate limiting</h3> <a target=\"blank\" href=\"/reference/ratelimiting\"\
        >Level 4</a> \n<br/><h3>Enterprise only</h3> <p>This API is available only\
        \ for <a target=\"blank\" href=\"/reference/api-reference#enterprise-plan\"\
        >Enterprise plan</a> users. You can only use this endpoint if you have the\
        \ role of a Company Admin.</p>\n"
      operationId: enterprise-board-content-item-logs-fetch
      parameters:
      - name: org_id
        description: Unique identifier of the organization.
        example: 3074457345821141000
        in: path
        required: true
        schema:
          type: string
      - name: board_ids
        description: List of board IDs for which you want to retrieve the content
          logs.
        example:
        - o9J_kzlUDmo=
        - u8J_kllZmDk=
        in: query
        required: false
        schema:
          type: array
          maxItems: 15
          items:
            description: Unique identifier of the board for which you want to retrieve
              the content logs.
            type: string
            example: o9J_kzlUDmo=
      - name: emails
        description: Filter content logs based on the list of emails of users who
          created, modified, or deleted the board item.
        example:
        - someone@domain.com
        - someoneelse@domain.com
        in: query
        required: false
        schema:
          type: array
          maxItems: 15
          items:
            description: Email of the user who created, modified, or deleted the board
              item.
            type: string
            example: someone@domain.com
      - name: from
        description: "Filter content logs based on the date and time when the board\
          \ item was last modified. This is the start date and time for the modified\
          \ date duration. \nFormat: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),\
          \ includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).\n"
        example: '2022-03-30T17:26:50Z'
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        description: "Filter content logs based on the date and time when the board\
          \ item was last modified. This is the end date and time for the modified\
          \ date duration. Format: UTC, adheres to \n[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),\
          \ includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).\n"
        example: '2023-03-30T17:26:50Z'
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: cursor
        description: 'A cursor-paginated method returns a portion of the total set
          of results based on the limit specified and a cursor that points to the
          next portion of the results. To retrieve the next portion of the collection,
          set the cursor parameter equal to the cursor value you received in the response
          of the previous request.

          '
        in: query
        required: false
        schema:
          type: string
        example: MTY2OTg4NTIwMDAwMHwxMjM=
      - name: limit
        description: 'The maximum number of results to return per call. If the number
          of logs in the response is greater than the limit specified, the response
          returns the cursor parameter with a value.

          '
        in: query
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 1000
        example: 1000
      - name: sorting
        description: 'Sort order in which you want to view the result set based on
          the modified date. To sort by an ascending modified date, specify `asc`.
          To sort by a descending modified date, specify `desc`.

          '
        in: query
        required: false
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
        example: asc
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoardItemContentLogsResponse'
          description: 'Response from the API that includes content logs of board
            items such as data, size of the data list, pagination cursor, and pagination
            limit.

            '
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
      summary: Retrieve content change logs of board items
      tags:
      - Board Content Logs
components:
  schemas:
    BasicError:
      type: object
      properties:
        status:
          type: number
          description: HTTP status code.
        code:
          type: string
          description: Description of the status code.
        message:
          type: string
          description: Explanation for the error
        type:
          type: string
          description: Type of the error
          default: error
          example: error
    BoardExportJobId:
      required:
      - jobId
      type: object
      properties:
        jobId:
          type: string
          description: Unique identifier of the board export job.
          format: uuid
          example: 92343229-c532-446d-b8cb-2f155bedb807
    BoardExportJobStatus:
      required:
      - jobStatus
      type: object
      properties:
        jobStatus:
          type: string
          description: 'Indicates the current state of the board export job.

            Possible values:

            `CREATED`: the job has been created but not yet started. Retry the status
            call after some time.

            `IN_PROGRESS`: the job is in progress, and the results are not ready yet.
            Retry the status call after some time.

            `FINISHED`: the job is complete. You can now get results for the board
            export job.'
          example: CREATED
    BoardExportResult:
      type: object
      properties:
        jobId:
          type: string
          description: Unique identifier of the board export job.
          format: uuid
          example: 92343229-c532-446d-b8cb-2f155bedb807
        results:
          type: array
          description: Board export task results.
          items:
            $ref: '#/components/schemas/BoardExportTaskResult'
    BoardExportTaskResult:
      required:
      - boardId
      - status
      type: object
      properties:
        boardId:
          type: string
          description: Unique identifier of the board.
          example: o9J_kzlUDmo=
        errorMessage:
          type: string
          description: Contains the description of the error that occurred during
            a board export task.
        exportLink:
          type: string
          description: URL of the S3 bucket that contains the exported files.
        status:
          type: string
          description: 'Indicates the status of the individual board export task.

            Possible values:

            `SUCCESS`: the board export task was completed successfully and the results
            are available.

            `ERROR`: the board export task encountered an error and failed to complete.
            The `errorMessage` field provides more information on the error.'
          example: CREATED
      description: Board export task results.
    CreateBoardExportRequest:
      type: object
      properties:
        boardIds:
          maxItems: 50
          minItems: 1
          type: array
          description: List of board IDs to be exported.
          example: o9J_kzlUDmo=
          items:
            type: string
            description: List of board IDs to be exported.
            example: o9J_kzlUDmo=
      description: List of board IDs to be exported.
    GetBoardItemContentLogsResponse:
      type: object
      description: Response for query using cursor and filter parameters.
      properties:
        limit:
          type: integer
          description: "The maximum number of results to return per call. If the number\
            \ of logs in the response is \ngreater than the limit specified, the response\
            \ returns the cursor parameter with a value.\n"
          format: int32
          example: 20
        size:
          type: integer
          description: 'Number of results returned in the response considering the
            cursor and the limit values sent in the request. For example, if there
            are 20 results, the request does not have a cursor value, and the limit
            set to 10, the size of the results will be 10. In this example, the response
            will also return a cursor value that can be used to retrieve the next
            set of 10 remaining results in the collection.

            '
          format: int32
          example: 1
        data:
          $ref: '#/components/schemas/BoardItemContentLogList'
        cursor:
          type: string
          description: 'Indicator of the position of the next page of the result.
            To retrieve the next page, make another query setting its cursor field
            to the value returned by the current query. If the value is empty, there
            are no more pages to fetch.

            '
          example: MTY2OTg4NTIwMDAwMHwxMjM=
        type:
          type: string
          description: Type of the object returned.
          default: cursor-list
    BoardItemContentLogList:
      type: array
      description: Contains the list of content logs for a board item.
      items:
        $ref: '#/components/schemas/BoardItemContentLog'
    BoardItemContentLog:
      type: object
      description: Contains information about the content log of for a board item.
      properties:
        id:
          type: string
          description: Unique identifier of the content log.
          example: 1
        itemId:
          type: string
          description: Unique identifier of the board item.
          example: 3458764549483493025
        type:
          format: string
          description: Type of the board item.
          example: sticker
        action:
          type: string
          description: User action in the form of insert, update, or delete.
          example: update
        boardKey:
          type: string
          description: Unique identification of the board to which the item belongs.
          example: o9J_kzlUDmo=
        hidden:
          type: boolean
          description: Indicates if the board is a hidden board. Returns `true` if
            board item is hidden.
          example: true
        createdAt:
          type: string
          format: date-time
          example: '2023-06-24T17:32:28Z'
          description: 'Date and time when the board item was created.<br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).

            '
        createdBy:
          $ref: '#/components/schemas/User'
        modifiedAt:
          type: string
          format: date-time
          example: '2023-06-24T17:32:28Z'
          description: 'Date and time when the board item was last modified.<br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).

            '
        modifiedBy:
          $ref: '#/components/schemas/User'
        logData:
          $ref: '#/components/schemas/BoardContentLogData'
    User:
      type: object
      description: Contains user information.
      properties:
        id:
          type: string
          description: Unique identifier of the user.
          example: 3458764517517852417
        email:
          type: string
          description: Email of the user.
          example: john.smith.demo@miro.com
        firstName:
          type: string
          description: First name of the user.
          example: John
        lastName:
          type: string
          description: Last name of the user.
          example: Smith
    BoardContentLogData:
      type: object
      description: Content log object representing the current state of the board
        item at the `modifiedAt` time.
      properties:
        text:
          type: string
          description: Text extracted from the board item.
          example: <p>data sample</p>
        metadata:
          type: object
          description: Metadata representing more information that might be relevant
            for a specific board item.
          additionalProperties:
            type: string
  responses:
    '400':
      description: Malformed request
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/BasicError'
            - type: object
              properties:
                status:
                  default: 400
                code:
                  default: invalidParameters
    '401':
      description: Invalid authentication credentials
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/BasicError'
            - type: object
              properties:
                status:
                  default: 401
                code:
                  default: tokenNotProvided
    '403':
      description: Invalid access
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/BasicError'
            - type: object
              properties:
                status:
                  default: 403
                code:
                  default: forbiddenAccess
    '404':
      description: Not found
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/BasicError'
            - type: object
              properties:
                status:
                  default: 404
                code:
                  default: notFound
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/BasicError'
            - type: object
              properties:
                status:
                  default: 409
                code:
                  default: conflict
    '429':
      description: Too many requests
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/BasicError'
            - type: object
              properties:
                status:
                  default: 429
                code:
                  default: tooManyRequests
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
