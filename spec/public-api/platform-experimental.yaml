openapi: 3.0.1
info:
  title: Platform Experimental Features
  version: v2.0
x-settings:
  skip-tests: true
servers:
- url: https://api.miro.com
security:
- bearerAuth: []
paths:
  /v2-experimental/webhooks/board_subscriptions:
    post:
      description: Creates a webhook subscription to receive notifications when an
        item on a board is updated. Subscriptions are created per user, per board.
        You can create multiple subscriptions. We currently support all board items
        barring tags, connectors, and comments. Changes in item position do not trigger
        an event at the moment.<br/><h3>Required scope</h3> <a target="blank" href="/reference/scopes">boards:read</a>
        <br/><h3>Rate limiting</h3> <a target="blank" href="/reference/ratelimiting">Level
        2</a><br/>
      operationId: create-board-subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBoardSubscriptionRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardSubscription'
          description: Subscription created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create webhook subscription
      tags:
      - Webhooks (experimental)
  /v2-experimental/webhooks/board_subscriptions/{subscription_id}:
    patch:
      description: Updates the status or the callback URL of an existing webhook subscription.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-board-subscription
      parameters:
      - in: path
        name: subscription_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBoardSubscriptionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardSubscription'
          description: Subscription updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update webhook subscription
      tags:
      - Webhooks (experimental)
  /v2-experimental/webhooks/subscriptions:
    get:
      description: Retrieves information about all webhook subscriptions for a specific
        user.<br/><h3>Required scope</h3> <a target="blank" href="/reference/scopes">boards:read</a>
        <br/><h3>Rate limiting</h3> <a target="blank" href="/reference/ratelimiting">Level
        4</a><br/>
      operationId: get-user-subscriptions
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          type: string
          default: '10'
          description: The maximum number of results to return per call. If the number
            of webhook subscriptions in the response is greater than the limit specified,
            the response returns the cursor parameter with a value.
          maximum: 100
          minimum: 1
      - in: query
        name: cursor
        required: false
        schema:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the limit specified and a `cursor` that points to
            the next portion of the results. To retrieve the next portion of the collection,
            set the `cursor` parameter equal to the `cursor` value you received in
            the response of the previous request.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSubscriptionsCursorPaged'
          description: Subscriptions retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get webhook subscriptions
      tags:
      - Webhooks (experimental)
  /v2-experimental/webhooks/subscriptions/{subscription_id}:
    get:
      description: Retrieves information for a specific webhook subscription.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: get-subscription-by-id
      parameters:
      - in: path
        name: subscription_id
        required: true
        schema:
          type: string
        description: Unique identifier (ID) of the subscription that you want to retrieve
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSubscription'
          description: Subscription retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get specific webhook subscription
      tags:
      - Webhooks (experimental)
    delete:
      description: Deletes the specified webhook subscription.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate limiting</h3>
        <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: delete-subscription-by-id
      parameters:
      - in: path
        name: subscription_id
        required: true
        schema:
          type: string
        description: Unique identifier (ID) of the subscription that you want to delete
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Subscription deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete webhook subscription
      tags:
      - Webhooks (experimental)
  /v2-experimental/boards/{board_id}/mindmap_nodes/{item_id}:
    get:
      x-settings: null
      description: Retrieves information for a specific mind map node on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-mindmap-node-experimental
      parameters:
      - schema:
          type: string
        name: board_id
        in: path
        required: true
        description: Unique identifier (ID) of the board from which you want to retrieve
          a mind map node.
      - schema:
          type: string
        name: item_id
        in: path
        required: true
        description: Unique identifier (ID) of the mind map node that you want to
          retrieve.
      responses:
        '200':
          description: Mind map node retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MindmapItem'
      summary: Get specific mind map node
      tags:
      - Mind map nodes (experimental)
    delete:
      x-settings: null
      description: Deletes a mind map node item and its child nodes from the board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-mindmap-node-experimental
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the mind map node.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the mind map node that you want to
          delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Mind map node deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete mind map node
      tags:
      - Mind map nodes (experimental)
  /v2-experimental/boards/{board_id}/mindmap_nodes:
    parameters:
    - schema:
        type: string
      name: board_id
      in: path
      required: true
      description: Unique identifier (ID) of the board from which you want to retrieve
        mind map nodes.
    get:
      x-settings: null
      summary: Get mind map nodes
      tags:
      - Mind map nodes (experimental)
      responses:
        '200':
          description: Mind map nodes retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MindmapCursorPaged'
      operationId: get-mindmap-nodes-experimental
      description: 'Retrieves a list of mind map nodes for a specific board.


        This method returns results using a cursor-based approach. A cursor-paginated
        method returns a portion of the total set of results based on the limit specified
        and a cursor that points to the next portion of the results. To retrieve the
        next portion of the collection, on your next call to the same method, set
        the `cursor` parameter equal to the `cursor` value you received in the response
        of the previous request. For example, if you set the `limit` query parameter
        to `10` and the board contains 20 objects, the first call will return information
        about the first 10 objects in the response along with a cursor parameter and
        value. In this example, let''s say the cursor parameter value returned in
        the response is `foo`. If you want to retrieve the next set of objects, on
        your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>'
      parameters:
      - schema:
          type: string
        in: query
        name: limit
        description: Maximum number of results returned
      - schema:
          type: string
        in: query
        name: cursor
        description: Points to the next portion of the results set
    post:
      x-settings: null
      description: 'Adds a mind map node to a board. A root node is the starting point
        of a mind map. A node that is created under a root node is a child node. For
        information on mind maps, use cases, mind map structure, and more, see the
        <a href="https://developers.miro.com/docs/mind-maps" target="blank">Mind Map
        Overview</a> page. <br/><h3>Required scope</h3> <a target="blank" href="/reference/scopes">boards:write</a>
        <br/><h3>Rate limiting</h3> <a target="blank" href="/reference/ratelimiting">Level
        2</a><br/><br/> <b>Known limitations on node placement: </b> Currently, the
        create API supports explicit positions for nodes. This means that users can
        only place nodes based on the x, y coordinates provided in the position parameters.
        If the position is not provided in the request, nodes default to coordinates
        x=0, y=0, effectively placing them at the center of the board. <br /><br /><b>Upcoming
        changes:</b> We understand the importance of flexibility in node placement.
        We are actively working on implementing changes to support positioning nodes
        relative to their parent node as well. This enhancement offers a more dynamic
        and intuitive mind mapping experience. <br /><br />Additionally, we are actively
        working on providing the update API, further enhancing the functionality of
        mind map APIs.'
      operationId: create-mindmap-nodes-experimental
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MindmapCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MindmapItem'
          description: Mind map node created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create mind map node
      tags:
      - Mind map nodes (experimental)
  /v2-experimental/boards/{board_id}/items:
    get:
      x-settings: null
      description: 'Retrieves a list of items for a specific board. You can retrieve
        all items on the board, a list of child items inside a parent item, or a list
        of specific types of items by specifying URL query parameter values.


        This method returns results using a cursor-based approach. A cursor-paginated
        method returns a portion of the total set of results based on the limit specified
        and a cursor that points to the next portion of the results. To retrieve the
        next portion of the collection, on your next call to the same method, set
        the `cursor` parameter equal to the `cursor` value you received in the response
        of the previous request. For example, if you set the `limit` query parameter
        to `10` and the board contains 20 objects, the first call will return information
        about the first 10 objects in the response along with a cursor parameter and
        value. In this example, let''s say the cursor parameter value returned in
        the response is `foo`. If you want to retrieve the next set of objects, on
        your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>'
      operationId: get-items-experimental
      parameters:
      - in: query
        name: limit
        schema:
          type: string
          default: '10'
          description: The maximum number of results to return per call. If the number
            of items in the response is greater than the limit specified, the response
            returns the cursor parameter with a value.
          maximum: 50
          minimum: 10
      - in: query
        name: type
        schema:
          type: string
          enum:
          - shape
      - in: query
        name: cursor
        schema:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the limit specified and a `cursor` that points to
            the next portion of the results. To retrieve the next portion of the collection,
            set the `cursor` parameter equal to the `cursor` value you received in
            the response of the previous request.
      - description: Unique identifier (ID) of the board for which you want to retrieve
          the list of available items.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericItemCursorPaged'
          description: Items retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get items on board
      tags:
      - Flowchart shapes (experimental)
  /v2-experimental/boards/{board_id}/items/{item_id}:
    get:
      x-settings: null
      description: Retrieves information for a specific item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-specific-item-experimental
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericItem'
          description: Item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get specific item on board
      tags:
      - Flowchart shapes (experimental)
      - Mind map nodes (experimental)
    delete:
      x-settings: null
      description: Deletes an item from a board.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-item-experimental
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete item
      tags:
      - items
  /v2-experimental/boards/{board_id}/shapes:
    post:
      x-settings: null
      description: Adds a flowchart shape item to a board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: create-shape-item-flowchart
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShapeCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShapeItem'
          description: Shape item created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create shape item
      tags:
      - Flowchart shapes (experimental)
  /v2-experimental/boards/{board_id}/shapes/{item_id}:
    get:
      x-settings: null
      description: Retrieves information for a specific shape item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-shape-item-flowchart
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShapeItem'
          description: Shape item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get shape item
      tags:
      - Flowchart shapes (experimental)
    patch:
      x-settings: null
      description: Updates a flowchart shape item on a board based on the data and
        style properties provided in the request body.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-shape-item-flowchart
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShapeUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShapeItem'
          description: Shape item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update shape item
      tags:
      - Flowchart shapes (experimental)
    delete:
      x-settings: null
      description: Deletes a flowchart shape item from the board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-shape-item-flowchart
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Shape item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete shape item
      tags:
      - Flowchart shapes (experimental)
components:
  schemas:
    BoardSubscription:
      type: object
      properties:
        callbackUrl:
          type: string
          description: Indicates the HTTPS URL to which Miro sends a webhook when
            an event occurs.
          example: https://api.asana.com/v2/webhooks_endpoint
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the webhook subscription was created.<br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        data:
          $ref: '#/components/schemas/BoardSubscriptionData'
        id:
          type: string
          description: Unique identifier (ID) of a webhook subscription.
          example: 99c152bb-8259-4c7a-96d8-ad8eef47ecd4
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the webhook subscription was last modified.
            <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),
            includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        status:
          type: string
          default: enabled
          description: 'Indicates whether the status of the webhook subscription.
            `enabled`: Miro sends a webhook when an event occurs in the associated
            board.

            `disabled`: Miro does not send a webhook even when an event occurs in
            the associated board.

            `lost_access`: The user with which the webhook subscription is associated
            has lost access to the board.

            The user needs to regain access to the board, and then reenable the webhook
            subscription by updating the webhook subscription status to `enabled`
            by using the update webhook endpoint.'
          enum:
          - enabled
          - disabled
          - lost_access
        type:
          type: string
          description: The type of object associated with the webhook subscription.
          example: board_subscription
    BoardSubscriptionData:
      type: object
      description: Contains information about a webhook subscription, such as the
        board ID associated with the webhook subscription, the date and time when
        the webhook subscription was last updated, and the type of board item that
        the subscription is associated with.
      properties:
        boardId:
          type: string
          description: '[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model)
            with which the webhook subscription is associated.'
          example: uXjVOfjmfkE=
    CreateBoardSubscriptionRequest:
      type: object
      description: Contains the board ID associated with the webhook subscription,
        the webhook callback URL, and the status of the webhook subscription.
      properties:
        boardId:
          type: string
          description: '[Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model)
            that you want to associate with the webhook subscription.'
        callbackUrl:
          type: string
          description: Indicates the HTTPS URL to which Miro sends a webhook when
            an event occurs.
          example: https://yourwebhooklistener.com/v2/webhooks_endpoint
          maxLength: 256
          minLength: 8
          pattern: ^https:\/\/(.*)
        status:
          type: string
          default: enabled
          description: 'Indicates whether the status of the webhook subscription.`enabled`:
            Miro sends a webhook when an event occurs in the associated board.

            `disabled`: Miro does not send a webhook even when an event occurs in
            the associated board.

            `lost_access`: The user with which the webhook subscription is associated
            has lost access to the board.

            The user needs to regain access to the board, and then reenable the webhook
            subscription by updating the webhook subscription status to `enabled`
            by using the update webhook endpoint.'
          enum:
          - enabled
          - disabled
    GenericSubscription:
      type: object
      properties:
        callbackUrl:
          type: string
          description: Indicates the HTTPS URL to which Miro sends a webhook when
            an event occurs.
          example: https://api.asana.com/v2/webhooks_endpoint
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the webhook subscription was created.<br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        data:
          $ref: '#/components/schemas/SubscriptionData'
        id:
          type: string
          description: Unique identifier (ID) of a webhook subscription.
          example: 99c152bb-8259-4c7a-96d8-ad8eef47ecd4
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the webhook subscription was last modified.
            <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),
            includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        status:
          type: string
          default: enabled
          description: 'Indicates whether the status of the webhook subscription.
            `enabled`: Miro sends a webhook when an event occurs in the associated
            board.

            `disabled`: Miro does not send a webhook even when an event occurs in
            the associated board.

            `lost_access`: The user with which the webhook subscription is associated
            has lost access to the board.

            The user needs to regain access to the board, and then reenable the webhook
            subscription by updating the webhook subscription status to `enabled`
            by using the update webhook endpoint.'
          enum:
          - enabled
          - disabled
          - lost_access
        type:
          type: string
          description: The type of object associated with the webhook subscription.
          example: board_subscription
    GenericSubscriptionsCursorPaged:
      type: object
      properties:
        cursor:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the `limit` specified and a `cursor` that points to
            the next portion of the results. To retrieve the next set of results of
            the collection, set the `cursor` parameter in your next request to the
            value returned in this parameter.
          example: MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4=
        data:
          type: array
          description: Contains the result data.
          items:
            $ref: '#/components/schemas/GenericSubscription'
        limit:
          type: integer
          format: int32
          description: Maximum number of results returned based on the `limit` specified
            in the request. For example, if there are `20` results, the request has
            no `cursor` value, and the `limit` is set to `20`,the `size` of the results
            will be `20`. The rest of the results will not be returned. To retrieve
            the rest of the results, you must make another request and set the appropriate
            value for the `cursor` parameter value that you obtained from the response.
          example: 20
        size:
          type: integer
          format: int32
          description: Number of results returned in the response considering the
            `cursor` and the `limit` values sent in the request. For example, if there
            are `20` results, the request does not have a `cursor` value, and the
            `limit` set to `10`, the `size` of the results will be `10`.<br>In this
            example, the response will also return a cursor value that can be used
            to retrieve the next set of 10 remaining results in the collection.
          example: 1
        total:
          type: integer
          format: int64
          description: Total number of results available. If the value of the `total`
            parameter is higher than the value of the `size` parameter, this means
            that there are more results that you can retrieve. To retrieve more results,
            you can make another request and set the `offset` value accordingly. For
            example, if there are `30` results, and the request has the `offset` set
            to `0` and the `limit` set to `20`, the `size` parameter will return `20`
            and the `total` parameter will return `30`. This means that there are
            9 more results to retrieve (as the offset is zero-based).
    SubscriptionData:
      type: object
      description: Contains information about a webhook subscription, such as the
        board ID that the webhook subscription is associated with.
      oneOf:
      - $ref: '#/components/schemas/BoardSubscriptionData'
    UpdateBoardSubscriptionRequest:
      type: object
      description: Contains updated information about a subscription.
      properties:
        callbackUrl:
          type: string
          description: Indicates the HTTPS URL to which Miro sends a webhook when
            an event occurs.
          example: https://yourwebhooklistener.com/v2/webhooks_endpoint
          maxLength: 256
          minLength: 8
          pattern: ^https:\/\/(.*)
        status:
          type: string
          default: enabled
          description: 'Indicates whether the status of the webhook subscription.
            `enabled`: Miro sends a webhook when an event occurs in the associated
            board.

            `disabled`: Miro does not send a webhook even when an event occurs in
            the associated board.

            `lost_access`: The user with which the webhook subscription is associated
            has lost access to the board.

            The user needs to regain access to the board, and then reenable the webhook
            subscription by updating the webhook subscription status to `enabled`
            by using the update webhook endpoint.'
          enum:
          - enabled
          - disabled
    MindmapCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/MindmapDataForCreate'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/Geometry'
        parent:
          $ref: '#/components/schemas/Parent'
      required:
      - data
    MindmapDataForCreate:
      type: object
      description: Contains mind map node data, such as the title, content, or description.
      properties:
        nodeView:
          $ref: '#/components/schemas/MindmapNode'
      required:
      - nodeView
    MindmapNode:
      type: object
      description: Contains information like data about the mind map node.
      properties:
        data:
          $ref: '#/components/schemas/MindmapNodeTextData'
    MindmapNodeTextData:
      type: object
      description: Contains the information about the mind map text.
      properties:
        type:
          type: string
          description: Type of item used as mind map node. Currently, `type` can only
            be equal to `text`.
          example: text
        content:
          type: string
          description: The actual text (content) that appears in the mind map node.
          example: Sample text
      required:
      - type
    MindmapData:
      type: object
      description: Contains mind map node data, such as `nodeView` or `isRoot`.
      properties:
        nodeView:
          $ref: '#/components/schemas/MindmapNodeView'
        isRoot:
          type: boolean
          description: Indicates whether this node is the root of the mind map.
        direction:
          type: string
          description: Indicates where this node is positioned relative to the root
            node. `start` indicates that this node must be positioned at the start
            of the root node, which is either the left or top of the root node. `end`
            indicates that this node must be positioned at the emd of the root node,
            which is either the right or bottom of the root node.
          enum:
          - start
          - end
    MindmapNodeView:
      type: object
      description: Contains the information about the mind map node.
      properties:
        type:
          type: string
          description: Type of item used as mind map node. Currently, `type` can only
            be equal to `text`.
          example: text
        data:
          $ref: '#/components/schemas/MindmapWidgetDataOutput'
        style:
          $ref: '#/components/schemas/MindmapNodeStyle'
    MindmapItem:
      type: object
      properties:
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of an item.
          example: 3074457362577955300
        data:
          $ref: '#/components/schemas/MindmapData'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        createdBy:
          $ref: '#/components/schemas/CreatedBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        modifiedBy:
          $ref: '#/components/schemas/ModifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
        style:
          $ref: '#/components/schemas/MindmapStyle'
      required:
      - id
      - type
    MindmapCursorPaged:
      type: object
      properties:
        data:
          type: array
          description: Contains the result data.
          items:
            $ref: '#/components/schemas/MindmapItem'
        total:
          type: integer
          format: int64
          description: Total number of results available. If the value of the `total`
            parameter is higher than the value of the `size` parameter, this means
            that there are more results that you can retrieve. To retrieve more results,
            you can make another request and set the `offset` value accordingly. For
            example, if there are `30` results, and the request has the `offset` set
            to `0` and the `limit` set to `20`, the `size` parameter will return `20`
            and the `total` parameter will return `30`. This means that there are
            9 more results to retrieve (as the offset is zero-based).
        size:
          type: integer
          format: int32
          description: Number of results returned in the response considering the
            `cursor` and the `limit` values sent in the request. For example, if there
            are `20` results, the request does not have a `cursor` value, and the
            `limit` set to `10`, the `size` of the results will be `10`.<br>In this
            example, the response will also return a cursor value that can be used
            to retrieve the next set of 10 remaining results in the collection.'
        cursor:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the `limit` specified and a `cursor` that points to
            the next portion of the results. To retrieve the next set of results of
            the collection, set the `cursor` parameter in your next request to the
            value returned in this parameter.'
        limit:
          type: integer
          format: int32
          description: Maximum number of results returned based on the `limit` specified
            in the request. For example, if there are `20` results, the request has
            no `cursor` value, and the `limit` is set to `20`,the `size` of the results
            will be `20`. The rest of the results will not be returned. To retrieve
            the rest of the results, you must make another request and set the appropriate
            value for the `cursor` parameter value that you obtained from the response.'
        links:
          $ref: '#/components/schemas/PageLinks'
    CreatedBy:
      type: object
      description: Contains information about the user who created the item.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: '3458764517517852417'
        type:
          type: string
          description: Indicates the type of object returned. In this case, `type`
            returns `user`.
          example: user
    ModifiedBy:
      type: object
      description: Contains information about the user who last modified the item.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: '3458764517517852417'
        type:
          type: string
          description: Indicates the type of object returned. In this case, `type`
            returns `user`.
          example: user
    GenericItemCursorPaged:
      type: object
      properties:
        data:
          type: array
          description: Contains the result data.
          items:
            $ref: '#/components/schemas/GenericItem'
        total:
          type: integer
          format: int64
          description: Total number of results available. If the value of the `total`
            parameter is higher than the value of the `size` parameter, this means
            that there are more results that you can retrieve. To retrieve more results,
            you can make another request and set the `offset` value accordingly. For
            example, if there are `30` results, and the request has the `offset` set
            to `0` and the `limit` set to `20`, the `size` parameter will return `20`
            and the `total` parameter will return `30`. This means that there are
            9 more results to retrieve (as the offset is zero-based).
        size:
          type: integer
          format: int32
          description: Number of results returned in the response considering the
            `cursor` and the `limit` values sent in the request. For example, if there
            are `20` results, the request does not have a `cursor` value, and the
            `limit` set to `10`, the `size` of the results will be `10`.<br>In this
            example, the response will also return a cursor value that can be used
            to retrieve the next set of 10 remaining results in the collection.
          example: 1
        cursor:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the `limit` specified and a `cursor` that points to
            the next portion of the results. To retrieve the next set of results of
            the collection, set the `cursor` parameter in your next request to the
            value returned in this parameter.
          example: MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4=
        limit:
          type: integer
          format: int32
          description: Maximum number of results returned based on the `limit` specified
            in the request. For example, if there are `20` results, the request has
            no `cursor` value, and the `limit` is set to `20`,the `size` of the results
            will be `20`. The rest of the results will not be returned. To retrieve
            the rest of the results, you must make another request and set the appropriate
            value for the `cursor` parameter value that you obtained from the response.
          example: 20
        links:
          $ref: '#/components/schemas/PageLinks'
    GenericItem:
      type: object
      description: Contains the result data.
      properties:
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/CreatedBy'
        data:
          $ref: '#/components/schemas/WidgetDataOutput'
        geometry:
          $ref: '#/components/schemas/Geometry'
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of an item.
          example: 3458764517517819000
        links:
          $ref: '#/components/schemas/WidgetLinks'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/ModifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        position:
          $ref: '#/components/schemas/Position'
        type:
          type: string
          description: Type of item that is returned.
          example: sticky_note
      required:
      - id
      - type
    PageLinks:
      type: object
      description: Contains pagination links for the collection.
      properties:
        first:
          type: string
          description: Link to retrieve information in the first page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX==
        last:
          type: string
          description: Link to the retrieve information in the last page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX==
        next:
          type: string
          description: Link to retrieve information in the next page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw==
        prev:
          type: string
          description: Link to retrieve information in the previous page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=
        self:
          type: string
          description: Link to retrieve information in the current page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX==
    WidgetDataOutput:
      oneOf:
      - $ref: '#/components/schemas/ShapeDataForCreate'
      - $ref: '#/components/schemas/MindmapData'
      description: Contains the item data, such as the item title, content, or description.
    MindmapWidgetDataOutput:
      oneOf:
      - $ref: '#/components/schemas/TextData'
      description: Contains the mind map node data, such as the item title, content,
        or description.
    TextData:
      type: object
      description: Contains text item data
      properties:
        content:
          type: string
          description: The actual text (content) that appears in the text item.
          example: Sample text
    Parent:
      type: object
      description: Contains information about the parent this item must be attached
        to. A maximum of 1000 items can be attached to a frame. Passing `null` for
        `parent.id` directly attaches an item to the canvas.
      properties:
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of the parent for the item.
    ParentLinksEnvelope:
      type: object
      description: Contains information about the parent for the item.
      properties:
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of the parent for the item.
          example: 3074457362577955300
        links:
          $ref: '#/components/schemas/SelfLink'
    Position:
      type: object
      description: Contains location information about the item, such as its x coordinate,
        y coordinate, and the origin of the x and y coordinates.
      properties:
        origin:
          type: string
          default: center
          description: 'Area of the item that is referenced by its x and y coordinates.
            For example, an item with a center origin will have its x and y coordinates
            point to its center. The center point of the board has x: 0 and y: 0 coordinates.

            Currently, only one option is supported (center).'
          enum:
          - center
        relativeTo:
          type: string
          enum:
          - canvas_center
          - parent_top_left
        x:
          type: number
          format: double
          description: 'X-axis coordinate of the location of the item on the board.

            By default, all items have absolute positioning to the board, not the
            current viewport. Default: 0.

            The center point of the board has `x: 0` and `y: 0` coordinates.'
          example: 100
        y:
          type: number
          format: double
          description: 'Y-axis coordinate of the location of the item on the board.

            By default, all items have absolute positioning to the board, not the
            current viewport. Default: 0.

            The center point of the board has `x: 0` and `y: 0` coordinates.'
          example: 100
    PositionChange:
      type: object
      description: Contains information about the item's position on the board, such
        as its x coordinate, y coordinate, and the origin of the x and y coordinates.
      properties:
        origin:
          type: string
          default: center
          description: 'Area of the item that is referenced by its x and y coordinates.
            For example, an item with a center origin will have its x and y coordinates
            point to its center. The center point of the board has x: 0 and y: 0 coordinates.

            Currently, only one option is supported (center).'
          enum:
          - center
        x:
          type: number
          format: double
          default: 0
          description: 'X-axis coordinate of the location of the item on the board.

            By default, all items have absolute positioning to the board, not the
            current viewport.

            The center point of the board has `x: 0` and `y: 0` coordinates.'
          example: 100
        y:
          type: number
          format: double
          default: 0
          description: 'Y-axis coordinate of the location of the item on the board.

            By default, all items have absolute positioning to the board, not the
            current viewport.

            The center point of the board has `x: 0` and `y: 0` coordinates.'
          example: 100
    SelfLink:
      type: object
      description: Contains applicable links for the current object.
      properties:
        self:
          type: string
          description: Link to obtain more information about the current object.
          example: http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487
    ShapeCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ShapeDataForCreate'
        style:
          $ref: '#/components/schemas/ShapeStyleForCreate'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/Geometry'
        parent:
          $ref: '#/components/schemas/Parent'
    ShapeDataForCreate:
      type: object
      description: Contains shape item data, such as the content or the type of the
        shape.
      properties:
        content:
          type: string
          description: "The text you want to display on the shape.\n<br>**Not supported\
            \ for shapes:**\n<ul>\n  <li>flow_chart_or</li>\n  <li>flow_chart_summing_junction</li>\n\
            </ul>"
          example: Hello
        shape:
          type: string
          default: rectangle
          description: "Defines the geometric shape of the item when it is rendered\
            \ on the board. <details>\n  <summary>Basic shapes</summary>\n  <ul>\n\
            \    <li>rectangle</li>\n    <li>round_rectangle</li>\n    <li>circle</li>\n\
            \    <li>triangle</li>\n    <li>rhombus</li>\n    <li>parallelogram</li>\n\
            \    <li>trapezoid</li>\n    <li>pentagon</li>\n    <li>hexagon</li>\n\
            \    <li>octagon</li>\n    <li>wedge_round_rectangle_callout</li>\n  \
            \  <li>star</li>\n    <li>flow_chart_predefined_process</li>\n    <li>cloud</li>\n\
            \    <li>cross</li>\n    <li>can</li>\n    <li>right_arrow</li>\n    <li>left_arrow</li>\n\
            \    <li>left_right_arrow</li>\n    <li>left_brace</li>\n    <li>right_brace</li>\n\
            \  </ul>\n</details>\n<details>\n  <summary>Flowchart shapes</summary>\n\
            \  <ul>\n    <li>flow_chart_connector</li>\n    <li>flow_chart_magnetic_disk</li>\n\
            \    <li>flow_chart_input_output</li>\n    <li>flow_chart_decision</li>\n\
            \    <li>flow_chart_delay</li>\n    <li>flow_chart_display</li>\n    <li>flow_chart_document</li>\n\
            \    <li>flow_chart_magnetic_drum</li>\n    <li>flow_chart_internal_storage</li>\n\
            \    <li>flow_chart_manual_input</li>\n    <li>flow_chart_manual_operation</li>\n\
            \    <li>flow_chart_merge</li>\n    <li>flow_chart_multidocuments</li>\n\
            \    <li>flow_chart_note_curly_left</li>\n    <li>flow_chart_note_curly_right</li>\n\
            \    <li>flow_chart_note_square</li>\n    <li>flow_chart_offpage_connector</li>\n\
            \    <li>flow_chart_or</li>\n    <li>flow_chart_predefined_process_2</li>\n\
            \    <li>flow_chart_preparation</li>\n    <li>flow_chart_process</li>\n\
            \    <li>flow_chart_online_storage</li>\n    <li>flow_chart_summing_junction</li>\n\
            \    <li>flow_chart_terminator</li>\n  </ul>\n</details>"
    ShapeDataForUpdate:
      type: object
      description: Contains shape item data, such as the content or the type of the
        shape.
      properties:
        content:
          type: string
          description: "The text you want to display on the shape.\n**Note: When updating\
            \ a shape type to one of the types below, existing `content` will be lost.**\n\
            <br>**Not supported for shapes:**\n<ul>\n  <li>flow_chart_or</li>\n  <li>flow_chart_summing_junction</li>\n\
            </ul>"
          example: Hello
        shape:
          type: string
          default: rectangle
          description: "Defines the geometric shape of the item when it is rendered\
            \ on the board. <details>\n  <summary>Basic shapes</summary>\n  <ul>\n\
            \    <li>rectangle</li>\n    <li>round_rectangle</li>\n    <li>circle</li>\n\
            \    <li>triangle</li>\n    <li>rhombus</li>\n    <li>parallelogram</li>\n\
            \    <li>trapezoid</li>\n    <li>pentagon</li>\n    <li>hexagon</li>\n\
            \    <li>octagon</li>\n    <li>wedge_round_rectangle_callout</li>\n  \
            \  <li>star</li>\n    <li>flow_chart_predefined_process</li>\n    <li>cloud</li>\n\
            \    <li>cross</li>\n    <li>can</li>\n    <li>right_arrow</li>\n    <li>left_arrow</li>\n\
            \    <li>left_right_arrow</li>\n    <li>left_brace</li>\n    <li>right_brace</li>\n\
            \  </ul>\n</details>\n<details>\n  <summary>Flowchart shapes</summary>\n\
            \  <ul>\n    <li>flow_chart_connector</li>\n    <li>flow_chart_magnetic_disk</li>\n\
            \    <li>flow_chart_input_output</li>\n    <li>flow_chart_decision</li>\n\
            \    <li>flow_chart_delay</li>\n    <li>flow_chart_display</li>\n    <li>flow_chart_document</li>\n\
            \    <li>flow_chart_magnetic_drum</li>\n    <li>flow_chart_internal_storage</li>\n\
            \    <li>flow_chart_manual_input</li>\n    <li>flow_chart_manual_operation</li>\n\
            \    <li>flow_chart_merge</li>\n    <li>flow_chart_multidocuments</li>\n\
            \    <li>flow_chart_note_curly_left</li>\n    <li>flow_chart_note_curly_right</li>\n\
            \    <li>flow_chart_note_square</li>\n    <li>flow_chart_offpage_connector</li>\n\
            \    <li>flow_chart_or</li>\n    <li>flow_chart_predefined_process_2</li>\n\
            \    <li>flow_chart_preparation</li>\n    <li>flow_chart_process</li>\n\
            \    <li>flow_chart_online_storage</li>\n    <li>flow_chart_summing_junction</li>\n\
            \    <li>flow_chart_terminator</li>\n  </ul>\n</details>"
    ShapeItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: '3458764517517819000'
        data:
          $ref: '#/components/schemas/ShapeDataForCreate'
        style:
          $ref: '#/components/schemas/ShapeStyleForCreate'
        position:
          $ref: '#/components/schemas/Position'
        geometry:
          $ref: '#/components/schemas/Geometry'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/CreatedBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/ModifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
          example: shape
      required:
      - id
      - type
    ShapeStyleForCreate:
      type: object
      description: "Contains information about the shape style, such as the border\
        \ color or opacity. <br> All properties in style object are supported for\
        \ shape types aren't listed below. <br> <table>\n  <tr>\n    <th align=\"\
        left\">Shape type</th>\n    <th align=\"left\">Unsupported properties</th>\n\
        \  </tr>\n  <tr>\n    <td>flow_chart_or</td>\n    <td>fontSize, fontFamily,\
        \ color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_summing_junction</td>\n\
        \    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n\
        \  </tr>\n  <tr>\n    <td>flow_chart_note_curly_left</td>\n    <td>fillColor,\
        \ fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_right</td>\n\
        \    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_square</td>\n\
        \    <td>fillColor, fillOpacity</td>\n  </tr>\n</table>"
      properties:
        borderColor:
          type: string
          description: 'Defines the color of the border of the shape.

            Default: `#1a1a1a` (dark gray).'
        borderOpacity:
          type: string
          description: 'Defines the opacity level of the shape border.

            Possible values: any number between `0.0` and `1.0`, where:

            `0.0`: the background color is completely transparent or invisible

            `1.0`: the background color is completely opaque or solid

            Default: `1.0` (solid color).'
          maximum: 1
          minimum: 0
        borderStyle:
          type: string
          description: 'Defines the style used to represent the border of the shape.

            Default: `normal`.'
          enum:
          - normal
          - dotted
          - dashed
        borderWidth:
          type: string
          description: 'Defines the thickness of the shape border, in dp.

            Default: `2.0`.'
          maximum: 24
          minimum: 1
        color:
          type: string
          description: 'Hex value representing the color for the text within the shape
            item.

            Default: `#1a1a1a`.'
          example: '#1a1a1a'
        fillColor:
          type: string
          description: 'Fill color for the shape.

            Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7`
            `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb`
            `#ffcee0` `#b384bb` `#000000`

            Default: #ffffff.'
          example: '#8fd14f'
        fillOpacity:
          type: string
          description: 'Opacity level of the fill color.

            Possible values: any number between `0` and `1`, where:

            `0.0`: the background color is completely transparent or invisible

            `1.0`: the background color is completely opaque or solid

            Default:  `Flowchart` shapes: `1.0`. `Basic` shapes: `1.0` if `fillColor`
            provided, `0.0` if no `fillColor` provided.

            '
          maximum: 1
          minimum: 0
        fontFamily:
          type: string
          description: 'Defines the font type for the text in the shape item.

            Default: `arial`.'
          enum:
          - arial
          - abril_fatface
          - bangers
          - eb_garamond
          - georgia
          - graduate
          - gravitas_one
          - fredoka_one
          - nixie_one
          - open_sans
          - permanent_marker
          - pt_sans
          - pt_sans_narrow
          - pt_serif
          - rammetto_one
          - roboto
          - roboto_condensed
          - roboto_slab
          - caveat
          - times_new_roman
          - titan_one
          - lemon_tuesday
          - roboto_mono
          - noto_sans
          - plex_sans
          - plex_serif
          - plex_mono
          - spoof
          - tiempos_text
          - formular
        fontSize:
          type: string
          description: 'Defines the font size, in dp, for the text on the shape.

            Default: `14`.'
          maximum: 288
          minimum: 10
        textAlign:
          type: string
          description: "Defines how the shape text is horizontally aligned.\nDefault:\
            \ \nFlowchart shapes: `center`.\nBasic shapes: `left`.\n\n`unknown` is\
            \ returned for unsupported shapes."
          enum:
          - left
          - right
          - center
          - unknown
        textAlignVertical:
          type: string
          description: "Defines how the shape text is vertically aligned.\nDefault:\
            \ \nFlowchart shapes: `middle`.\nBasic shapes: `top`.\n\n`unknown` is\
            \ returned for unsupported shapes."
          enum:
          - top
          - middle
          - bottom
          - unknown
    ShapeStyleForUpdate:
      type: object
      description: "Contains information about the shape style, such as the border\
        \ color or opacity. <br> All properties in style object are supported for\
        \ shape types aren't listed below. <br> <table>\n  <tr>\n    <th align=\"\
        left\">Shape type</th>\n    <th align=\"left\">Unsupported properties</th>\n\
        \  </tr>\n  <tr>\n    <td>flow_chart_or</td>\n    <td>fontSize, fontFamily,\
        \ color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_summing_junction</td>\n\
        \    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n\
        \  </tr>\n  <tr>\n    <td>flow_chart_note_curly_left</td>\n    <td>fillColor,\
        \ fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_right</td>\n\
        \    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_square</td>\n\
        \    <td>fillColor, fillOpacity</td>\n  </tr>\n</table>"
      properties:
        borderColor:
          type: string
          description: 'Defines the color of the border of the shape.

            Default: `#1a1a1a` (dark gray).'
        borderOpacity:
          type: string
          description: 'Defines the opacity level of the shape border.

            Possible values: any number between `0.0` and `1.0`, where:

            `0.0`: the background color is completely transparent or invisible

            `1.0`: the background color is completely opaque or solid

            Default: `1.0` (solid color).'
          maximum: 1
          minimum: 0
        borderStyle:
          type: string
          description: 'Defines the style used to represent the border of the shape.

            Default: `normal`.'
          enum:
          - normal
          - dotted
          - dashed
        borderWidth:
          type: string
          description: 'Defines the thickness of the shape border, in dp.

            Default: `2.0`.'
          maximum: 24
          minimum: 1
        color:
          type: string
          description: 'Hex value representing the color for the text within the shape
            item.

            Default: `#1a1a1a`.'
          example: '#1a1a1a'
        fillColor:
          type: string
          description: 'Fill color for the shape.

            Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7`
            `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb`
            `#ffcee0` `#b384bb` `#000000`

            Default: #ffffff.'
          example: '#8fd14f'
        fillOpacity:
          type: string
          description: 'Opacity level of the fill color.

            Possible values: any number between `0` and `1`, where:

            `0.0`: the background color is completely transparent or invisible

            `1.0`: the background color is completely opaque or solid

            Default:  Flowchart shapes: `1.0`. Basic shapes: `1.0` if `fillColor`
            provided, `0.0` if no `fillColor` provided.

            '
          maximum: 1
          minimum: 0
        fontFamily:
          type: string
          description: 'Defines the font type for the text in the shape item.

            Default: `arial`.'
          enum:
          - arial
          - abril_fatface
          - bangers
          - eb_garamond
          - georgia
          - graduate
          - gravitas_one
          - fredoka_one
          - nixie_one
          - open_sans
          - permanent_marker
          - pt_sans
          - pt_sans_narrow
          - pt_serif
          - rammetto_one
          - roboto
          - roboto_condensed
          - roboto_slab
          - caveat
          - times_new_roman
          - titan_one
          - lemon_tuesday
          - roboto_mono
          - noto_sans
          - plex_sans
          - plex_serif
          - plex_mono
          - spoof
          - tiempos_text
          - formular
        fontSize:
          type: string
          description: 'Defines the font size, in dp, for the text on the shape.

            Default: `14`.'
          maximum: 288
          minimum: 10
        textAlign:
          type: string
          description: "Defines how the sticky note text is horizontally aligned.\n\
            Default: \nFlowchart shapes: `center`.\nBasic shapes: `left`."
          enum:
          - left
          - right
          - center
        textAlignVertical:
          type: string
          description: "Defines how the sticky note text is vertically aligned.\n\
            Default: \nFlowchart shapes: `middle`.\nBasic shapes: `top`."
          enum:
          - top
          - middle
          - bottom
    ShapeUpdateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ShapeDataForUpdate'
        style:
          $ref: '#/components/schemas/ShapeStyleForUpdate'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/Geometry'
        parent:
          $ref: '#/components/schemas/Parent'
    WidgetLinks:
      type: object
      description: Contains applicable links for the item.
      properties:
        related:
          type: string
          description: Link to obtain information about the child items related to
            the frame.
          example: http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor=
        self:
          type: string
          description: Link to obtain information about the current item.
          example: http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487
    Geometry:
      type: object
      description: Contains geometrical information about the item, such as its width
        or height.
      properties:
        height:
          type: number
          format: double
          description: Height of the item, in pixels.
          example: 60
        rotation:
          type: number
          format: double
          description: Rotation angle of an item, in degrees, relative to the board.
            You can rotate items clockwise (right) and counterclockwise (left) by
            specifying positive and negative values, respectively.
        width:
          type: number
          format: double
          description: Width of the item, in pixels.
          example: 320
    MindmapNodeStyle:
      type: object
      description: Contains information about the node style, such as the node color
        or fillOpacity.
      properties:
        color:
          type: string
          description: Hex value representing the color for the text within the node.
          example: '#1a1a1a'
        fillOpacity:
          type: string
          description: 'It sets the opacity level of the background fill color.


            Allowed values: any number between 0.0 and 1.0 included.


            If the value is 0.0, the background fill color is completely transparent
            or invisible.

            If the value is 1.0, the background fill color is completely opaque or
            solid.

            Default: 0 (transparent)'
        fontSize:
          type: string
          description: 'Defines the font size, in dp, for the text on the node.

            Default: `14`.'
          maximum: 288
          minimum: 10
    MindmapStyle:
      type: object
      description: Contains information about the node style, such as the widget's
        border color or shape type.
      properties:
        nodeColor:
          type: string
          description: Hex value representing the color of the widget's border.
          example: '#1a1a1a'
        shape:
          type: string
          description: Shape type of the widget.
          enum:
          - pill
          - rectangle
          - rounded_rectangle
          - none
        fontSize:
          type: string
          description: The same font size as in MindmapNodeStyle.
          maximum: 288
          minimum: 10
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
