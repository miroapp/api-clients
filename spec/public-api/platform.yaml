openapi: 3.0.1
info:
  title: Platform
  version: v2.0
servers:
- url: https://api.miro.com
security:
- bearerAuth: []
paths:
  /v2/boards:
    post:
      description: Creates a board with the specified name and sharing policies.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: create-board
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardChanges'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardWithLinks'
          description: Board created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create board
      tags:
      - boards
    get:
      description: Retrieves a list of boards that match the search criteria provided
        in the request. If you are an Enterprise customer and a Company Admin, you
        can retrieve all boards, including all private boards (boards that haven't
        been specifically shared with you) by enabling Content Admin permissions.
        To enable Content Admin permissions, see [Content Admin permissions for Company
        Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins).
        Note that you only get results instantaneously when you filter by the `team_id`,
        `project_id`, or both the `team_id` and `project_id`. If you use any other
        filter,  you need to give a few seconds for the indexing of newly created
        boards before retrieving boards.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:read</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-boards
      parameters:
      - in: query
        name: team_id
        schema:
          type: string
          description: The team_id for which you want to retrieve the list of boards.
            If this parameter is sent in the request, the `query` and `owner` parameters
            are ignored.
      - in: query
        name: project_id
        schema:
          type: string
          description: The `project_id` for which you want to retrieve the list of
            boards. If this parameter is sent in the request, the `query` and `owner`
            parameters are ignored.
      - in: query
        name: query
        schema:
          type: string
          description: Retrieves a list of boards that contain the query string provided
            in the board name or board description. For example, if you want to retrieve
            a list of boards that have the word `beta` in the board name or description,
            add `beta` as the `query` parameter value. You can use the `query` parameter
            with the owner parameter to narrow down the board search results.
          maxLength: 500
      - in: query
        name: owner
        schema:
          type: string
          description: Retrieves a list of boards that belong to a specific owner
            ID. You must pass the owner ID (for example, 3074457353169356300), not
            the owner name. You can use the 'owner' parameter with the `query` parameter
            to narrow down the board search results. Note that if you pass the `team_id`
            in the same request, the `owner` parameter is ignored.
      - in: query
        name: limit
        schema:
          type: string
          description: 'The maximum number of boards to retrieve.

            Default: `20`'
          maximum: 50
          minimum: 1
      - in: query
        name: offset
        schema:
          type: string
          description: 'The (zero-based) offset of the first item in the collection
            to return.

            Default: `0`.'
      - in: query
        name: sort
        schema:
          type: string
          default: default
          description: 'Sort order in which you want to view the result set. Options
            `last_created` and `alphabetically` are applicable only when you search
            for boards by team.

            * `default` - If `team_id` is present, `last_created`. Otherwise, `last_opened`.

            * `last_modified` - sort by the date and time when the board was last
            modified.

            * `last_opened` - sort by the date and time when the board was last opened.

            * `last_created` - sort by the date and time when the board was created.

            * `alphabetically` - sort by the board name (alphabetically).'
          enum:
          - default
          - last_modified
          - last_opened
          - last_created
          - alphabetically
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardsPagedResponse'
          description: Board search results.
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get boards
      tags:
      - boards
    put:
      description: Creates a copy of an existing board. You can also update the name,
        description, sharing policy, and permissions policy for the new board in the
        request body.<br/><h3>Required scope</h3> <a target="blank" href="/reference/scopes">boards:write</a>
        <br/><h3>Rate limiting</h3> <a target="blank" href="/reference/ratelimiting">Level
        4</a><br/>
      operationId: copy-board
      parameters:
      - description: Unique identifier (ID) of the board that you want to copy.
        in: query
        name: copy_from
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyBoardChanges'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardWithLinksAndWithoutProject'
          description: Board copied
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Copy board
      tags:
      - boards
  /v2/boards/{board_id}:
    get:
      description: Retrieves information about a board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate limiting</h3>
        <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-specific-board
      parameters:
      - description: Unique identifier (ID) of the board that you want to retrieve.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardWithLinksAndLastOpened'
          description: Board retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get specific board
      tags:
      - boards
    patch:
      description: Updates a specific board.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-board
      parameters:
      - description: Unique identifier (ID) of the board that you want to update.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardChanges'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardWithLinks'
          description: Board updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update board
      tags:
      - boards
    delete:
      description: Deletes a board.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-board
      parameters:
      - description: Unique identifier (ID) of the board that you want to delete.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Board deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete board
      tags:
      - boards
  /v2/boards/{board_id}/app_cards:
    post:
      description: Adds an app card item to a board.<br/><h3>Required scope</h3> <a
        target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3>
        <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: create-app-card-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppCardCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCardItem'
          description: App card item created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create app card item
      tags:
      - app_cards
  /v2/boards/{board_id}/app_cards/{item_id}:
    get:
      description: Retrieves information for a specific app card item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-app-card-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCardItem'
          description: App card item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get app card item
      tags:
      - app_cards
    patch:
      description: Updates an app card item on a board based on the data and style
        properties provided in the request body.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-app-card-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppCardUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCardItem'
          description: Card item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update app card item
      tags:
      - app_cards
    delete:
      description: Deletes an app card item from a board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-app-card-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          an item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: App card item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete app card item
      tags:
      - app_cards
  /v2/boards/{board_id}/cards:
    post:
      description: Adds a card item to a board<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: create-card-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardItem'
          description: Card item created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create card item
      tags:
      - cards
  /v2/boards/{board_id}/cards/{item_id}:
    get:
      description: Retrieves information for a specific card item on a board<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-card-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardItem'
          description: Card item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get card item
      tags:
      - cards
    patch:
      description: Updates a card item on a board based on the data and style properties
        provided in the request body.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-card-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardItem'
          description: Card item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update card item
      tags:
      - cards
    delete:
      description: Deletes a card item from the board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-card-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Card item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete card item
      tags:
      - cards
  /v2/boards/{board_id}/connectors:
    post:
      description: Adds a connector to a board.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: create-connector
      parameters:
      - description: Unique identifier (ID) of the board for which you want to create
          the connector.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorCreationData'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorWithLinks'
          description: Connector created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create connector
      tags:
      - connectors
    get:
      description: 'Retrieves a list of connectors for a specific board.


        This method returns results using a cursor-based approach. A cursor-paginated
        method returns a portion of the total set of results based on the limit specified
        and a cursor that points to the next portion of the results. To retrieve the
        next portion of the collection, on your next call to the same method, set
        the `cursor` parameter equal to the `cursor` value you received in the response
        of the previous request. For example, if you set the `limit` query parameter
        to `10` and the board contains 20 objects, the first call will return information
        about the first 10 objects in the response along with a cursor parameter and
        value. In this example, let''s say the cursor parameter value returned in
        the response is `foo`. If you want to retrieve the next set of objects, on
        your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>'
      operationId: get-connectors
      parameters:
      - in: query
        name: limit
        schema:
          type: string
          default: '10'
          description: The maximum number of results to return per call. If the number
            of connectors in the response is greater than the limit specified, the
            response returns the cursor parameter with a value.
          maximum: 50
          minimum: 10
      - in: query
        name: cursor
        schema:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the limit specified and a `cursor` that points to
            the next portion of the results. To retrieve the next portion of the collection,
            set the `cursor` parameter equal to the `cursor` value you received in
            the response of the previous request.
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a list of connectors.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorsCursorPaged'
          description: Connectors retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get connectors
      tags:
      - connectors
  /v2/boards/{board_id}/connectors/{connector_id}:
    get:
      description: Retrieves information for a specific connector on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-connector
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific connector.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the connector that you want to retrieve.
        in: path
        name: connector_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorWithLinks'
          description: Connector retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get specific connector
      tags:
      - connectors
    patch:
      description: Updates a connector on a board based on the data and style properties
        provided in the request body.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-connector
      parameters:
      - description: Unique identifier (ID) of the board for which you want to update
          the connector.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the connector that you want to update.
        in: path
        name: connector_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorChangesData'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorWithLinks'
          description: Connector updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update connector
      tags:
      - connectors
    delete:
      description: Deletes the specified connector from the board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-connector
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the connector.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the connector that you want to delete.
        in: path
        name: connector_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Connector deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete connector
      tags:
      - connectors
  /v2/boards/{board_id}/documents:
    post:
      description: Adds a document item to a board by specifying the URL where the
        document is hosted.<br/><h3>Required scope</h3> <a target="blank" href="/reference/scopes">boards:write</a>
        <br/><h3>Rate limiting</h3> <a target="blank" href="/reference/ratelimiting">Level
        2</a><br/>
      operationId: create-document-item-using-url
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentItem'
          description: Document item created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create document item using URL
      tags:
      - documents
  /v2/boards/{board_id}/documents/{item_id}:
    get:
      description: Retrieves information for a specific document item on a board<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-document-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentItem'
          description: Document item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get document item
      tags:
      - documents
    patch:
      description: Updates a document item on a board<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-document-item-using-url
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentItem'
          description: Document item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update document item using URL
      tags:
      - documents
    delete:
      description: Deletes a document item from the board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-document-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Document item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete document item
      tags:
      - documents
  /v2/boards/{board_id}/embeds:
    post:
      description: Adds an embed item containing external content to a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: create-embed-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedItem'
          description: Embed item created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create embed item
      tags:
      - embeds
  /v2/boards/{board_id}/embeds/{item_id}:
    get:
      description: Retrieves information for a specific embed item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-embed-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedItem'
          description: Embed item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get embed item
      tags:
      - embeds
    patch:
      description: Updates an embed item on a board based on the data properties provided
        in the request body.<br/><h3>Required scope</h3> <a target="blank" href="/reference/scopes">boards:write</a>
        <br/><h3>Rate limiting</h3> <a target="blank" href="/reference/ratelimiting">Level
        2</a><br/>
      operationId: update-embed-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedItem'
          description: Embed item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update embed item
      tags:
      - embeds
    delete:
      description: Deletes an embed item from the board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-embed-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Embed item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete embed item
      tags:
      - embeds
  /v2/boards/{board_id}/images:
    post:
      x-settings:
        skip-tests: true
      description: Adds an image item to a board by specifying an image URL.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: create-image-item-using-url
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageItem'
          description: Image item created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create image item using URL
      tags:
      - images
  /v2/boards/{board_id}/images/{item_id}:
    get:
      x-settings:
        skip-tests: true
      description: Retrieves information for a specific image item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-image-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageItem'
          description: Image item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get image item
      tags:
      - images
    patch:
      x-settings:
        skip-tests: true
      description: Updates an image item on a board.<br/><h3>Required scope</h3> <a
        target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3>
        <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-image-item-using-url
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageItem'
          description: Image item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update image item using URL
      tags:
      - images
    delete:
      x-settings:
        skip-tests: true
      description: Deletes an image item from the board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-image-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Image item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete image item
      tags:
      - images
  /v2/boards/{board_id}/items:
    get:
      description: 'Retrieves a list of items for a specific board. You can retrieve
        all items on the board, a list of child items inside a parent item, or a list
        of specific types of items by specifying URL query parameter values.


        This method returns results using a cursor-based approach. A cursor-paginated
        method returns a portion of the total set of results based on the limit specified
        and a cursor that points to the next portion of the results. To retrieve the
        next portion of the collection, on your next call to the same method, set
        the `cursor` parameter equal to the `cursor` value you received in the response
        of the previous request. For example, if you set the `limit` query parameter
        to `10` and the board contains 20 objects, the first call will return information
        about the first 10 objects in the response along with a cursor parameter and
        value. In this example, let''s say the cursor parameter value returned in
        the response is `foo`. If you want to retrieve the next set of objects, on
        your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>'
      operationId: get-items
      parameters:
      - in: query
        name: limit
        schema:
          type: string
          default: '10'
          description: The maximum number of results to return per call. If the number
            of items in the response is greater than the limit specified, the response
            returns the cursor parameter with a value.
          maximum: 50
          minimum: 10
      - in: query
        name: type
        schema:
          type: string
          enum:
          - text
          - shape
          - sticky_note
          - image
          - document
          - card
          - app_card
          - preview
          - frame
          - embed
          description: "If you want to get a list of items of a specific type, specify\
            \ an item type. For example, if you want to retrieve the list of card\
            \ items, set `type` to `cards`.\n Possible values: `app_card`, `card`,\
            \ `document`, `embed`, `frame`, `image`, `shape`, `sticky_note`, `text`"
      - in: query
        name: cursor
        schema:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the limit specified and a `cursor` that points to
            the next portion of the results. To retrieve the next portion of the collection,
            set the `cursor` parameter equal to the `cursor` value you received in
            the response of the previous request.
      - description: Unique identifier (ID) of the board for which you want to retrieve
          the list of available items.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericItemCursorPaged'
          description: Items retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get items on board
      tags:
      - items
  /v2/boards/{board_id}/items/{item_id}:
    get:
      description: Retrieves information for a specific item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-specific-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericItem'
          description: Item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get specific item on board
      tags:
      - items
    patch:
      description: Updates the position or the parent of an item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-item-position-or-parent
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericItemUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericItem'
          description: Item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update item position or parent
      tags:
      - items
    delete:
      description: Deletes an item from a board.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete item
      tags:
      - items
  /v2/boards/{board_id}/members:
    post:
      description: Shares the board and Invites new members to collaborate on a board
        by sending an invitation email. Depending on the board's Sharing policy, there
        might be various scenarios where membership in the team is required in order
        to share the board with a user.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 3</a><br/>
      operationId: share-board
      parameters:
      - description: Unique identifier (ID) of the board to which the board member
          belongs.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardMembersInvite'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResult'
          description: Board members invited
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Share board
      tags:
      - board_members
    get:
      description: Retrieves a pageable list of members for a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-board-members
      parameters:
      - in: query
        name: limit
        schema:
          type: string
          description: 'The maximum number of board members to retrieve.

            Default: `20`.'
          maximum: 50
          minimum: 1
      - in: query
        name: offset
        schema:
          type: string
          description: 'The (zero-based) offset of the first item in the collection
            to return.

            Default: `0`.'
      - description: Unique identifier (ID) of the board to which the board member
          belongs.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardMembersPagedResponse'
          description: Board members retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get all board members
      tags:
      - board_members
  /v2/boards/{board_id}/members/{board_member_id}:
    get:
      description: Retrieves information for a board member.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate limiting</h3>
        <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-specific-board-member
      parameters:
      - description: Unique identifier (ID) of the board to which the board member
          belongs.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the board member whose role you want
          to retrieve.
        in: path
        name: board_member_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardMemberWithLinks'
          description: Board member retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get specific board member
      tags:
      - board_members
    patch:
      description: Updates the role of a board member.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-board-member
      parameters:
      - description: Unique identifier (ID) of the board for which you want to update
          the role of the board member.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the board member whose role you want
          to update.
        in: path
        name: board_member_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardMemberChanges'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardMemberWithLinks'
          description: Board member updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update board member
      tags:
      - board_members
    delete:
      description: Removes a board member from a board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: remove-board-member
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          an item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the board member whose role you want
          to delete.
        in: path
        name: board_member_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Board member deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Remove board member
      tags:
      - board_members
  /v2/boards/{board_id}/shapes:
    post:
      description: Adds a shape item to a board.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: create-shape-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShapeCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShapeItem'
          description: Shape item created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create shape item
      tags:
      - shapes
  /v2/boards/{board_id}/shapes/{item_id}:
    get:
      description: Retrieves information for a specific shape item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-shape-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShapeItem'
          description: Shape item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get shape item
      tags:
      - shapes
    patch:
      description: Updates a shape item on a board based on the data and style properties
        provided in the request body.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-shape-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShapeUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShapeItem'
          description: Shape item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update shape item
      tags:
      - shapes
    delete:
      description: Deletes a shape item from the board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-shape-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Shape item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete shape item
      tags:
      - shapes
  /v2/boards/{board_id}/sticky_notes:
    post:
      description: Adds a sticky note item to a board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 2</a><br/>
      operationId: create-sticky-note-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StickyNoteCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StickyNoteItem'
          description: Sticky Note item created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create sticky note item
      tags:
      - sticky_notes
  /v2/boards/{board_id}/sticky_notes/{item_id}:
    get:
      description: Retrieves information for a specific sticky note item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-sticky-note-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StickyNoteItem'
          description: Sticky Note item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get sticky note item
      tags:
      - sticky_notes
    patch:
      description: Updates a sticky note item on a board based on the data and style
        properties provided in the request body.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-sticky-note-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StickyNoteUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StickyNoteItem'
          description: Sticky Note item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update sticky note item
      tags:
      - sticky_notes
    delete:
      description: Deletes a sticky note item from the board.<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-sticky-note-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Sticky Note item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Delete sticky note item
      tags:
      - sticky_notes
  /v2/boards/{board_id}/texts:
    post:
      description: Adds a text item to a board.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: create-text-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to create
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextItem'
          description: Text item created
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Create text item
      tags:
      - texts
  /v2/boards/{board_id}/texts/{item_id}:
    get:
      description: Retrieves information for a specific text item on a board.<br/><h3>Required
        scope</h3> <a target="blank" href="/reference/scopes">boards:read</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 1</a><br/>
      operationId: get-text-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to retrieve
          a specific item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to retrieve.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextItem'
          description: Text item retrieved
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Get text item
      tags:
      - texts
    patch:
      description: Updates a text item on a board based on the data and style properties
        provided in the request body.<br/><h3>Required scope</h3> <a target="blank"
        href="/reference/scopes">boards:write</a> <br/><h3>Rate limiting</h3> <a target="blank"
        href="/reference/ratelimiting">Level 2</a><br/>
      operationId: update-text-item
      parameters:
      - description: Unique identifier (ID) of the board where you want to update
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to update.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextItem'
          description: Text item updated
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests
      summary: Update text item
      tags:
      - texts
    delete:
      description: Deletes a text item from the board<br/><h3>Required scope</h3>
        <a target="blank" href="/reference/scopes">boards:write</a> <br/><h3>Rate
        limiting</h3> <a target="blank" href="/reference/ratelimiting">Level 3</a><br/>
      operationId: delete-text-item
      parameters:
      - description: Unique identifier (ID) of the board from which you want to delete
          the item.
        in: path
        name: board_id
        required: true
        schema:
          type: string
      - description: Unique identifier (ID) of the item that you want to delete.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Text item deleted
        '400':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Malformed request
        '404':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Not found
        '429':
          content:
            application/json:
              schema:
                type: object
                description: Test error obj
                properties:
                  code:
                    type: string
                    description: Code of the error
                    example: error
                  message:
                    type: string
                    description: Description of the error
                    example: Error message
                  status:
                    type: integer
                    format: int32
                    description: Status code of the error
                    example: 400
                  type:
                    type: string
                    description: Type of the error
                    example: error
          description: Too many requests.
      summary: Delete text item
      tags:
      - texts
components:
  schemas:
    AppCardCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AppCardDataChanges'
        style:
          $ref: '#/components/schemas/AppCardStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/Geometry'
        parent:
          $ref: '#/components/schemas/Parent'
    AppCardData:
      type: object
      description: Contains app card item data, such as the title, description, or
        fields.
      properties:
        description:
          type: string
          description: A short text description to add context about the app card.
          example: Sample app card description
        fields:
          type: array
          description: Array where each object represents a custom preview field.
            Preview fields are displayed on the bottom half of the app card in the
            compact view.
          items:
            $ref: '#/components/schemas/CustomField'
        owned:
          type: boolean
          description: Defines whether the card is owned by the application making
            the call.
        status:
          type: string
          description: Status indicating whether an app card is connected and in sync
            with the source. When the source for the app card is deleted, the status
            returns `disabled`.
          enum:
          - disconnected
          - connected
          - disabled
        title:
          type: string
          description: A short text header to identify the app card.
          example: sample app card item
    AppCardDataChanges:
      type: object
      description: Contains app card item data, such as the title, description, or
        fields.
      properties:
        description:
          type: string
          description: A short text description to add context about the app card.
          example: Sample app card description
        fields:
          type: array
          description: Array where each object represents a custom preview field.
            Preview fields are displayed on the bottom half of the app card in the
            compact view.
          items:
            $ref: '#/components/schemas/CustomField'
        status:
          type: string
          default: disconnected
          description: Status indicating whether an app card is connected and in sync
            with the source. When the source for the app card is deleted, the status
            returns `disabled`.
          enum:
          - disconnected
          - connected
          - disabled
        title:
          type: string
          default: sample app card item
          description: A short text header to identify the app card.
    AppCardItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: 3458764517517819000
        data:
          $ref: '#/components/schemas/AppCardData'
        style:
          $ref: '#/components/schemas/AppCardStyle'
        position:
          $ref: '#/components/schemas/Position'
        geometry:
          $ref: '#/components/schemas/Geometry'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
          example: app_card
      required:
      - id
      - type
    AppCardStyle:
      type: object
      description: Contains information about the style of an app card item, such
        as the fill color.
      properties:
        fillColor:
          type: string
          description: 'Hex value of the border color of the app card.

            Default: `#2d9bf0`.'
          example: '#2d9bf0'
    AppCardUpdateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AppCardDataChanges'
        style:
          $ref: '#/components/schemas/AppCardStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/Geometry'
        parent:
          $ref: '#/components/schemas/Parent'
    Board:
      type: object
      description: Contains the result data.
      properties:
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the board was created. Format: UTC, adheres
            to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing
            Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        createdBy:
          $ref: '#/components/schemas/UserInfoShort'
        currentUserMembership:
          $ref: '#/components/schemas/BoardMember'
        description:
          type: string
          description: Description of the board.
          example: Sample board description
        id:
          type: string
          description: Unique identifier (ID) of the board.
          example: uXjVOD6LSME=
        lastOpenedAt:
          type: string
          format: date-time
          description: 'Date and time when the board was last opened by any user.
            This information is only available when the boards are sorted by `last_opened`.
            Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),
            includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        lastOpenedBy:
          $ref: '#/components/schemas/UserInfoLastOpenedBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the board was last modified. Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        modifiedBy:
          $ref: '#/components/schemas/UserInfoShort'
        name:
          type: string
          description: Name of the board.
          example: Sample board name
        owner:
          $ref: '#/components/schemas/UserInfoShort'
        picture:
          $ref: '#/components/schemas/Picture'
        policy:
          $ref: '#/components/schemas/BoardPolicy'
        team:
          $ref: '#/components/schemas/Team'
        project:
          $ref: '#/components/schemas/Project'
        type:
          type: string
          description: Type of the object that is returned. In this case, type returns
            `board`.
          example: board
        viewLink:
          type: string
          description: URL to view the board.
          example: https://miro.com/app/board/uXjVOD6LSME=
      required:
      - description
      - id
      - name
      - type
    BoardChanges:
      type: object
      properties:
        description:
          type: string
          description: Description of the board.
          maxLength: 300
          minLength: 0
        name:
          type: string
          default: Untitled
          description: Name for the board.
          maxLength: 60
          minLength: 1
        policy:
          $ref: '#/components/schemas/BoardPolicyChange'
        teamId:
          type: string
          description: Unique identifier (ID) of the team where the board must be
            placed.
        projectId:
          type: string
          description: Unique identifier (ID) of the project to which the board must
            be added.
    CopyBoardChanges:
      type: object
      properties:
        description:
          type: string
          description: Description of the board.
          maxLength: 300
          minLength: 0
        name:
          type: string
          default: Untitled
          description: Name for the board.
          maxLength: 60
          minLength: 1
        policy:
          $ref: '#/components/schemas/BoardPolicyChange'
        teamId:
          type: string
          description: Unique identifier (ID) of the team where the board must be
            placed.
    BoardLinks:
      type: object
      description: Contains applicable links for the board.
      properties:
        related:
          type: string
          description: Link to obtain information about the board members associated
            with the board.
          example: http://api.miro.com/v2/boards/o9J_k1JKioQ=/members?limit=20&offset=0
        self:
          type: string
          description: Link to obtain information about the current board.
          example: http://api.miro.com/v2/boards/o9J_k1JKioQ=
    BoardMember:
      type: object
      description: Contains the current user's board membership details. The current
        user could be different from the board owner.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: 3074457353169356300
        name:
          type: string
          description: Name of the user.
          example: John Smith
        role:
          type: string
          description: Role of the board member.
          enum:
          - viewer
          - commenter
          - editor
          - coowner
          - owner
        type:
          type: string
          description: Type of the object that is returned. In this case, `type` returns
            `board_member`.
          example: board_member
      required:
      - id
      - name
      - type
    BoardMemberChanges:
      type: object
      properties:
        role:
          type: string
          default: commenter
          description: Role of the board member.
          enum:
          - viewer
          - commenter
          - editor
          - coowner
          - owner
    BoardMemberWithLinks:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: 3074457353169356300
        name:
          type: string
          description: Name of the user.
          example: John Smith
        role:
          type: string
          description: Role of the board member.
          enum:
          - viewer
          - commenter
          - editor
          - coowner
          - owner
        links:
          $ref: '#/components/schemas/SelfLink'
        type:
          type: string
          description: Type of the object that is returned. In this case, `type` returns
            `board_member`.
          example: board_member
      required:
      - id
      - name
      - type
    BoardMembersInvite:
      type: object
      properties:
        emails:
          type: array
          description: Email IDs of the users you want to invite to the board. You
            can invite up to 20 members per call.
          items:
            type: string
            example: member@email.com
            description: Email IDs of the users you want to invite to the board. You
              can invite up to 20 members per call.
          maxItems: 20
          minItems: 1
        role:
          type: string
          default: commenter
          description: Role of the board member.
          enum:
          - viewer
          - commenter
          - editor
          - coowner
          - owner
        message:
          type: string
          description: The message that will be sent in the invitation email.
          example: Hey there! Join my board and let's collaborate on this project!
      required:
      - emails
    BoardMembersPagedResponse:
      type: object
      properties:
        data:
          type: array
          description: Contains the result data.
          items:
            $ref: '#/components/schemas/BoardMember'
        total:
          type: integer
          format: int64
          description: Total number of results available. If the value of the `total`
            parameter is higher than the value of the `size` parameter, this means
            that there are more results that you can retrieve. To retrieve more results,
            you can make another request and set the `offset` value accordingly. For
            example, if there are `30` results, and the request has the `offset` set
            to `0` and the `limit` set to `20`, the `size` parameter will return `20`
            and the `total` parameter will return `30`. This means that there are
            9 more results to retrieve (as the offset is zero-based).
          example: 1
        size:
          type: integer
          format: int32
          description: Number of results returned in the response. The `size` is the
            number of results returned considering the `offset` and the `limit` values
            sent in the request. For example, if there are `30` results, and the request
            has the offset set to `0` and the `limit` set to `20`, the `size` of the
            results will be `20`.<br>If there are `10` results, and the request has
            the offset set to `0` and the `limit` set to `20`, the `size` of the results
            will be `10`.<br>If there are `30` results, and the request has the offset
            set to `28` and the `limit` set to `20`, the `size` of the results will
            be `2` as the `offset` is the zero-based offset of the first item in the
            collection.
          example: 1
        offset:
          type: integer
          format: int32
          description: Zero-based index of the first item in the collection. For example,
            If there are `30` results, and the request has the offset set to `28`,
            the response will return `2` results.
          example: 0
        limit:
          type: integer
          format: int32
          description: 'Maximum number of results returned based on the `limit` specified
            in the request. For example, if there are `30` results, and the request
            has the offset set to `0` and the `limit` set to `20`, the `size` of the
            results will be `20`. The rest of the results will not be returned. To
            retrieve the rest of the results, you must make another request and set
            the appropriate value for the offset parameter. In this example, you will
            set the offset parameter to 20 as the offset is zero-based.

            '
          example: 20
        links:
          $ref: '#/components/schemas/PageLinks'
        type:
          type: string
    BoardPermissionsPolicy:
      type: object
      description: Defines the permissions policies for the board.
      properties:
        collaborationToolsStartAccess:
          type: string
          default: all_editors
          description: Defines who can start or stop timer, voting, video chat, screen
            sharing, attention management. Others will only be able to join. To change
            the value for the `collaborationToolsStartAccess` parameter, contact Miro
            Customer Support.
          enum:
          - all_editors
          - board_owners_and_coowners
        copyAccess:
          type: string
          default: anyone
          description: Defines who can copy the board, copy objects, download images,
            and save the board as a template or PDF.
          enum:
          - anyone
          - team_members
          - team_editors
          - board_owner
        sharingAccess:
          type: string
          default: team_members_with_editing_rights
          description: Defines who can change access and invite users to this board.
            To change the value for the `sharingAccess` parameter, contact Miro Customer
            Support.
          enum:
          - team_members_with_editing_rights
          - owner_and_coowners
    BoardPolicy:
      type: object
      description: Defines the permissions policies and sharing policies for the board.
      properties:
        permissionsPolicy:
          $ref: '#/components/schemas/BoardPermissionsPolicy'
        sharingPolicy:
          $ref: '#/components/schemas/BoardSharingPolicy'
    BoardPolicyChange:
      type: object
      description: Defines the permissions policies and sharing policies for the board.
      properties:
        permissionsPolicy:
          $ref: '#/components/schemas/BoardPermissionsPolicy'
        sharingPolicy:
          $ref: '#/components/schemas/BoardSharingPolicyChange'
    BoardSharingPolicy:
      type: object
      description: Defines the public-level, organization-level, and team-level access
        for the board. The access level that a user gets depends on the highest level
        of access that results from considering the public-level, team-level, organization-level,
        and direct sharing access.
      properties:
        access:
          type: string
          description: Defines the public-level access to the board.
          enum:
          - private
          - view
          - edit
          - comment
        inviteToAccountAndBoardLinkAccess:
          type: string
          default: no_access
          description: Defines the user role when inviting a user via the invite to
            team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess`
            parameter is always set to `no_access`.
          enum:
          - viewer
          - commenter
          - editor
          - coowner
          - owner
          - guest
          - no_access
        organizationAccess:
          type: string
          default: private
          description: Defines the organization-level access to the board. If the
            board is created for a team that does not belong to an organization, the
            `organizationAccess` parameter is always set to the default value.
          enum:
          - private
          - view
          - comment
          - edit
        teamAccess:
          type: string
          description: Defines the team-level access to the board.
          enum:
          - private
          - view
          - comment
          - edit
    BoardSharingPolicyChange:
      type: object
      description: Defines the public-level, organization-level, and team-level access
        for the board. The access level that a user gets depends on the highest level
        of access that results from considering the public-level, team-level, organization-level,
        and direct sharing access.
      properties:
        access:
          type: string
          default: private
          description: Defines the public-level access to the board.
          enum:
          - private
          - view
          - edit
          - comment
        inviteToAccountAndBoardLinkAccess:
          type: string
          default: no_access
          description: Defines the user role when inviting a user via the invite to
            team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess`
            parameter is always set to `no_access` regardless of the value that you
            assign for this parameter.
          enum:
          - viewer
          - commenter
          - editor
          - no_access
        organizationAccess:
          type: string
          default: private
          description: Defines the organization-level access to the board. If the
            board is created for a team that does not belong to an organization, the
            `organizationAccess` parameter is always set to the default value.
          enum:
          - private
          - view
          - comment
          - edit
        teamAccess:
          type: string
          default: private
          description: Defines the team-level access to the board.
          enum:
          - private
          - view
          - comment
          - edit
    BoardWithLinks:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the board.
          example: uXjVOD6LSME=
        name:
          type: string
          description: Name of the board.
          example: Sample board name
        description:
          type: string
          description: Description of the board.
          example: Sample board description
        team:
          $ref: '#/components/schemas/Team'
        project:
          $ref: '#/components/schemas/Project'
        picture:
          $ref: '#/components/schemas/Picture'
        policy:
          $ref: '#/components/schemas/BoardPolicy'
        viewLink:
          type: string
          description: URL to view the board.
          example: https://miro.com/app/board/uXjVOD6LSME=
        owner:
          $ref: '#/components/schemas/UserInfoShort'
        currentUserMembership:
          $ref: '#/components/schemas/BoardMember'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the board was created. Format: UTC, adheres
            to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing
            Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        createdBy:
          $ref: '#/components/schemas/UserInfoShort'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the board was last modified. Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        modifiedBy:
          $ref: '#/components/schemas/UserInfoShort'
        links:
          $ref: '#/components/schemas/BoardLinks'
        type:
          type: string
          description: Type of the object that is returned. In this case, type returns
            `board`.
          example: board
      required:
      - description
      - id
      - name
      - type
    BoardWithLinksAndLastOpened:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the board.
          example: uXjVOD6LSME=
        name:
          type: string
          description: Name of the board.
          example: Sample board name
        description:
          type: string
          description: Description of the board.
          example: Sample board description
        team:
          $ref: '#/components/schemas/Team'
        project:
          $ref: '#/components/schemas/Project'
        picture:
          $ref: '#/components/schemas/Picture'
        policy:
          $ref: '#/components/schemas/BoardPolicy'
        viewLink:
          type: string
          description: URL to view the board.
          example: https://miro.com/app/board/uXjVOD6LSME=
        owner:
          $ref: '#/components/schemas/UserInfoShort'
        currentUserMembership:
          $ref: '#/components/schemas/BoardMember'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the board was created. Format: UTC, adheres
            to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing
            Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        createdBy:
          $ref: '#/components/schemas/UserInfoShort'
        lastOpenedAt:
          type: string
          format: date-time
          description: 'Date and time when the board was last opened by any user.
            Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),
            includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        lastOpenedBy:
          $ref: '#/components/schemas/GetBoardUserInfoLastOpenedBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the board was last modified. Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        modifiedBy:
          $ref: '#/components/schemas/UserInfoShort'
        links:
          $ref: '#/components/schemas/BoardLinks'
        type:
          type: string
          description: Type of the object that is returned. In this case, type returns
            `board`.
          example: board
      required:
      - description
      - id
      - name
      - type
    BoardWithLinksAndWithoutProject:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the board.
          example: uXjVOD6LSME=
        name:
          type: string
          description: Name of the board.
          example: Sample board name
        description:
          type: string
          description: Description of the board.
          example: Sample board description
        team:
          $ref: '#/components/schemas/Team'
        picture:
          $ref: '#/components/schemas/Picture'
        policy:
          $ref: '#/components/schemas/BoardPolicy'
        viewLink:
          type: string
          description: URL to view the board.
          example: https://miro.com/app/board/uXjVOD6LSME=
        owner:
          $ref: '#/components/schemas/UserInfoShort'
        currentUserMembership:
          $ref: '#/components/schemas/BoardMember'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the board was created. Format: UTC, adheres
            to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing
            Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        createdBy:
          $ref: '#/components/schemas/UserInfoShort'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the board was last modified. Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        modifiedBy:
          $ref: '#/components/schemas/UserInfoShort'
        links:
          $ref: '#/components/schemas/BoardLinks'
        type:
          type: string
          description: Type of the object that is returned. In this case, type returns
            `board`.
          example: board
      required:
      - description
      - id
      - name
      - type
    BoardsPagedResponse:
      type: object
      properties:
        data:
          type: array
          description: Contains the result data.
          items:
            $ref: '#/components/schemas/Board'
        total:
          type: integer
          format: int64
          description: Total number of results available. If the value of the `total`
            parameter is higher than the value of the `size` parameter, this means
            that there are more results that you can retrieve. To retrieve more results,
            you can make another request and set the `offset` value accordingly. For
            example, if there are `30` results, and the request has the `offset` set
            to `0` and the `limit` set to `20`, the `size` parameter will return `20`
            and the `total` parameter will return `30`. This means that there are
            9 more results to retrieve (as the offset is zero-based).
          example: 1
        size:
          type: integer
          format: int32
          description: Number of results returned in the response. The `size` is the
            number of results returned considering the `offset` and the `limit` values
            sent in the request. For example, if there are `30` results, and the request
            has the offset set to `0` and the `limit` set to `20`, the `size` of the
            results will be `20`.<br>If there are `10` results, and the request has
            the offset set to `0` and the `limit` set to `20`, the `size` of the results
            will be `10`.<br>If there are `30` results, and the request has the offset
            set to `28` and the `limit` set to `20`, the `size` of the results will
            be `2` as the `offset` is the zero-based offset of the first item in the
            collection.
          example: 1
        offset:
          type: integer
          format: int32
          description: Zero-based index of the first item in the collection. For example,
            If there are `30` results, and the request has the offset set to `28`,
            the response will return `2` results.
          example: 0
        limit:
          type: integer
          format: int32
          description: 'Maximum number of results returned based on the `limit` specified
            in the request. For example, if there are `30` results, and the request
            has the offset set to `0` and the `limit` set to `20`, the `size` of the
            results will be `20`. The rest of the results will not be returned. To
            retrieve the rest of the results, you must make another request and set
            the appropriate value for the offset parameter. In this example, you will
            set the offset parameter to 20 as the offset is zero-based.

            '
          example: 20
        links:
          $ref: '#/components/schemas/PageLinks'
        type:
          type: string
    Caption:
      type: object
      description: Contains the connector's caption data, such as content and its
        position.
      properties:
        content:
          type: string
          description: The text you want to display on the connector. Supports inline
            HTML tags.
          example: <p>Caption text</p>
          maxLength: 200
          minLength: 0
        position:
          type: string
          description: 'The relative position of the text on the connector, in percentage,
            minimum 0%, maximum 100%. With 50% value, the text will be placed in the
            middle of the connector line. Default: 50%'
          example: 50%
        textAlignVertical:
          type: string
          description: 'The vertical position of the text on the connector. Default:
            middle'
          enum:
          - top
          - middle
          - bottom
      required:
      - content
    CardCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CardData'
        style:
          $ref: '#/components/schemas/CardStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/Geometry'
        parent:
          $ref: '#/components/schemas/Parent'
    CardData:
      type: object
      description: Contains card item data, such as the title, description, due date,
        or assignee ID.
      properties:
        assigneeId:
          type: string
          format: int64
          description: Unique user identifier. In the GUI, the user ID is mapped to
            the name of the user who is assigned as the owner of the task or activity
            described in the card. The identifier is a string containing numbers,
            and it is automatically assigned to a user when they first sign up.
          example: 3074457362577955300
        description:
          type: string
          description: A short text description to add context about the card.
          example: sample card description
        dueDate:
          type: string
          format: date-time
          description: 'The date when the task or activity described in the card is
            due to be completed. In the GUI, users can select the due date from a
            calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),
            includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2023-10-12 22:00:55+00:00
        title:
          type: string
          default: sample card item
          description: A short text header for the card.
          example: sample card item
    CardItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: 3458764517517819000
        data:
          $ref: '#/components/schemas/CardData'
        style:
          $ref: '#/components/schemas/CardStyle'
        position:
          $ref: '#/components/schemas/Position'
        geometry:
          $ref: '#/components/schemas/Geometry'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
          example: card
      required:
      - id
      - type
    CardStyle:
      type: object
      description: Contains information about the style of a card item, such as the
        card theme.
      properties:
        cardTheme:
          type: string
          description: 'Hex value of the border color of the card.

            Default: `#2d9bf0`.'
          example: '#2d9bf0'
    CardUpdateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CardData'
        style:
          $ref: '#/components/schemas/CardStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/Geometry'
        parent:
          $ref: '#/components/schemas/Parent'
    ConnectorChangesData:
      type: object
      description: If both are provided, startItem.id must be different from endItem.id
      properties:
        startItem:
          $ref: '#/components/schemas/ItemConnectionChangesData'
        endItem:
          $ref: '#/components/schemas/ItemConnectionChangesData'
        shape:
          type: string
          description: 'The path type of the connector line, defines curvature. Default:
            curved.'
          enum:
          - straight
          - elbowed
          - curved
        captions:
          type: array
          description: Blocks of text you want to display on the connector.
          items:
            $ref: '#/components/schemas/Caption'
          maxItems: 20
          maxLength: 20
          minItems: 0
        style:
          $ref: '#/components/schemas/ConnectorStyle'
    ConnectorCreationData:
      type: object
      description: startItem.id must be different from endItem.id
      properties:
        startItem:
          $ref: '#/components/schemas/ItemConnectionCreationData'
        endItem:
          $ref: '#/components/schemas/ItemConnectionCreationData'
        shape:
          type: string
          description: 'The path type of the connector line, defines curvature. Default:
            curved.'
          enum:
          - straight
          - elbowed
          - curved
        captions:
          type: array
          description: Blocks of text you want to display on the connector.
          items:
            $ref: '#/components/schemas/Caption'
          maxItems: 20
          maxLength: 20
          minItems: 0
        style:
          $ref: '#/components/schemas/ConnectorStyle'
      required:
      - endItem
      - startItem
    ConnectorStyle:
      type: object
      description: Contains information about the style of a connector, such as the
        color or caption font size
      properties:
        color:
          type: string
          description: 'Hex value representing the color for the captions on the connector.
            Default: `#1a1a1a`'
          example: '#9510ac'
        endStrokeCap:
          type: string
          description: 'The decoration cap of the connector end, like an arrow or
            circle. Default: stealth.'
          enum:
          - none
          - stealth
          - diamond
          - filled_diamond
          - oval
          - filled_oval
          - arrow
          - triangle
          - filled_triangle
          - erd_one
          - erd_many
          - erd_only_one
          - erd_zero_or_one
          - erd_one_or_many
          - erd_zero_or_many
        fontSize:
          type: string
          description: 'Defines the font size, in dp, for the captions on the connector.
            Default: 14'
          example: '15'
          maximum: 288
          minimum: 10
        startStrokeCap:
          type: string
          description: 'The decoration cap of the connector end, like an arrow or
            circle. Default: none.'
          enum:
          - none
          - stealth
          - diamond
          - filled_diamond
          - oval
          - filled_oval
          - arrow
          - triangle
          - filled_triangle
          - erd_one
          - erd_many
          - erd_only_one
          - erd_zero_or_one
          - erd_one_or_many
          - erd_zero_or_many
        strokeColor:
          type: string
          description: 'Hex value of the color of the connector line. Default: #000000.'
          example: '#2d9bf0'
        strokeStyle:
          type: string
          description: 'The stroke pattern of the connector line. Default: normal.'
          enum:
          - normal
          - dotted
          - dashed
        strokeWidth:
          type: string
          description: 'The thickness of the connector line, in dp. Default: 1.0.'
          example: '2.0'
          maximum: 24
          minimum: 1
        textOrientation:
          type: string
          description: 'The captions orientation relatively to the connector line
            curvature. Default: aligned.'
          enum:
          - horizontal
          - aligned
    ConnectorWithLinks:
      type: object
      description: Contains the result data.
      properties:
        captions:
          type: array
          description: Blocks of text you want to display on the connector.
          items:
            $ref: '#/components/schemas/Caption'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the connector was created. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        endItem:
          $ref: '#/components/schemas/ItemConnectionWithLinks'
        id:
          type: string
          description: Unique identifier (ID) of a connector.
          example: '3458764517517818867'
        isSupported:
          type: boolean
          description: Indicates whether the connector is supported at the moment.
            If this parameter returns `false`, we do not support the connector at
            the moment. We do not allow updates for unsupported connectors and we
            might not return all data about the connector, such as intermediate points
            and connection points to the canvas.
        links:
          $ref: '#/components/schemas/SelfLink'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the connector was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        shape:
          type: string
          default: curved
          description: 'The path type of the connector line, defines curvature. Default:
            curved.'
          enum:
          - straight
          - elbowed
          - curved
        startItem:
          $ref: '#/components/schemas/ItemConnectionWithLinks'
        style:
          $ref: '#/components/schemas/ConnectorStyle'
        type:
          type: string
          description: Type of board object that is returned.
      required:
      - id
    ConnectorsCursorPaged:
      type: object
      properties:
        cursor:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the `limit` specified and a `cursor` that points to
            the next portion of the results. To retrieve the next set of results of
            the collection, set the `cursor` parameter in your next request to the
            value returned in this parameter.
          example: MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4=
        data:
          type: array
          description: Contains the result data.
          items:
            $ref: '#/components/schemas/ConnectorWithLinks'
        limit:
          type: integer
          format: int32
          description: Maximum number of results returned based on the `limit` specified
            in the request. For example, if there are `20` results, the request has
            no `cursor` value, and the `limit` is set to `20`,the `size` of the results
            will be `20`. The rest of the results will not be returned. To retrieve
            the rest of the results, you must make another request and set the appropriate
            value for the `cursor` parameter value that you obtained from the response.
          example: 20
        links:
          $ref: '#/components/schemas/PageLinks'
        size:
          type: integer
          format: int32
          description: Number of results returned in the response considering the
            `cursor` and the `limit` values sent in the request. For example, if there
            are `20` results, the request does not have a `cursor` value, and the
            `limit` set to `10`, the `size` of the results will be `10`.<br>In this
            example, the response will also return a cursor value that can be used
            to retrieve the next set of 10 remaining results in the collection.
          example: 1
        total:
          type: integer
          format: int64
    CustomField:
      type: object
      description: Array where each object represents a custom preview field. Preview
        fields are displayed on the bottom half of the app card in the compact view.
      properties:
        fillColor:
          type: string
          description: Hex value representing the color that fills the background
            area of the preview field, when it's displayed on the app card.
          example: '#2fa9e3'
        iconShape:
          type: string
          default: round
          description: The shape of the icon on the preview field.
          enum:
          - round
          - square
        iconUrl:
          type: string
          description: 'A valid URL pointing to an image available online.

            The transport protocol must be HTTPS.

            Possible image file formats: JPG/JPEG, PNG, SVG.'
          example: https://cdn-icons-png.flaticon.com/512/5695/5695864.png
        textColor:
          type: string
          description: Hex value representing the color of the text string assigned
            to `value`.
          example: '#1a1a1a'
        tooltip:
          type: string
          description: A short text displayed in a tooltip when clicking or hovering
            over the preview field.
          example: Completion status indicator
        value:
          type: string
          description: 'The actual data value of the custom field.

            It can be any type of information that you want to convey.'
          example: 'Status: in progress'
    DocumentCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/DocumentUrlData'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/FixedRatioGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
      required:
      - data
    DocumentData:
      type: object
      properties:
        documentUrl:
          type: string
          description: 'The URL to download the resource. You must use your access
            token to access the URL. The URL contains the `redirect` parameter to
            control the request execution.

            `redirect`: By default, the `redirect` parameter is set to `false` and
            the resource object containing the URL and the resource type is returned
            with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use
            this URL to retrieve the resource file.

            If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT
            HTTP response is returned. If you follow HTTP 3xx responses as redirects,
            you will automatically be redirected to the resource file and the content
            type returned is `application/octet-stream`.'
          example: https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false
        title:
          type: string
          description: A short text header to identify the document.
          example: Sample document title
    DocumentItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: 3458764517517819000
        data:
          $ref: '#/components/schemas/DocumentData'
        position:
          $ref: '#/components/schemas/Position'
        geometry:
          $ref: '#/components/schemas/Geometry'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
          example: document
      required:
      - id
      - type
    DocumentUpdateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/DocumentUrlDataChanges'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/FixedRatioGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
    DocumentUrlData:
      type: object
      description: Contains information about the document URL.
      properties:
        title:
          type: string
          description: A short text header to identify the document.
          example: Sample document title
        url:
          type: string
          default: https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf
          description: URL where the document is hosted.
          example: https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf
      required:
      - url
    DocumentUrlDataChanges:
      type: object
      description: Contains information about the document URL.
      properties:
        title:
          type: string
          description: A short text header to identify the document.
        url:
          type: string
          description: URL where the document is hosted.
          example: https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf
    EmbedCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EmbedUrlData'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/FixedRatioNoRotationGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
      required:
      - data
    EmbedData:
      type: object
      properties:
        contentType:
          type: string
          description: Type of the embedded item's content.
          example: video
        description:
          type: string
          description: Short description of the embedded item.
          example: So this is how to organize your life with Miro (a virtual whiteboard)
            for collaboration, brainstorming, and project management. Students, designers,
            agile en...
        html:
          type: string
          description: Html code of the embedded item.
          example: <iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\"
            width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\"
            frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>
        mode:
          type: string
          description: 'Defines how the content in the embed item is displayed on
            the board.

            `inline`: The embedded content is displayed directly on the board.

            `modal`: The embedded content is displayed inside a modal overlay on the
            board.'
          enum:
          - inline
          - modal
        previewUrl:
          type: string
          description: 'The URL to download the resource. You must use your access
            token to access the URL.

            The URL contains the `redirect` parameter and the `format` parameter to
            control the request execution as described in the following parameters:

            `format` parameter: By default, the image format is set to the preview
            image. If you want to download the original image, set the `format` parameter
            in the URL to `original`.

            `redirect`: By default, the `redirect` parameter is set to `false` and
            the resource object containing the URL and the resource type is returned
            with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use
            this URL to retrieve the resource file.

            If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT
            HTTP response is returned. If you follow HTTP 3xx responses as redirects,
            you will automatically be redirected to the resource file and the content
            type returned can be `image/png`, ''image/svg'', or ''image/jpg'', depending
            on the original image type.'
          example: https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false
        providerName:
          type: string
          description: Name of the content's provider.
          example: YouTube
        providerUrl:
          type: string
          description: Url of the content's provider.
          example: https://www.youtube.com/
        title:
          type: string
          description: Title of the embedded item.
          example: HOW TO ORGANIZE YOUR LIFE WITH MIRO! ?? Virtual Whiteboard Tour
        url:
          type: string
          description: 'A [valid URL](https://developers.miro.com/reference/data#embeddata)
            pointing to the content resource that you want to embed in the board.
            Possible transport protocols: HTTP, HTTPS.'
          example: https://www.youtube.com/watch?v=HlVSNEiFCBk
    EmbedItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: 3458764517517819000
        data:
          $ref: '#/components/schemas/EmbedData'
        position:
          $ref: '#/components/schemas/Position'
        geometry:
          $ref: '#/components/schemas/Geometry'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
          example: embed
      required:
      - id
      - type
    EmbedUpdateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EmbedUrlDataChanges'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/FixedRatioNoRotationGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
    EmbedUrlData:
      type: object
      description: Contains information about the embed URL.
      properties:
        mode:
          type: string
          description: 'Defines how the content in the embed item is displayed on
            the board.

            `inline`: The embedded content is displayed directly on the board.

            `modal`: The embedded content is displayed inside a modal overlay on the
            board.'
          enum:
          - inline
          - modal
        previewUrl:
          type: string
          description: URL of the image to be used as the preview image for the embedded
            item.
        url:
          type: string
          default: https://www.youtube.com/watch?v=HlVSNEiFCBk
          description: 'A [valid URL](https://developers.miro.com/reference/data#embeddata)
            pointing to the content resource that you want to embed in the board.
            Possible transport protocols: HTTP, HTTPS.'
      required:
      - url
    EmbedUrlDataChanges:
      type: object
      description: Contains information about the embed URL.
      properties:
        mode:
          type: string
          description: 'Defines how the content in the embed item is displayed on
            the board.

            `inline`: The embedded content is displayed directly on the board.

            `modal`: The embedded content is displayed inside a modal overlay on the
            board.'
          enum:
          - inline
          - modal
        previewUrl:
          type: string
          description: URL of the image to be used as the preview image for the embedded
            item.
        url:
          type: string
          description: 'A [valid URL](https://developers.miro.com/reference/data#embeddata)
            pointing to the content resource that you want to embed in the board.
            Possible transport protocols: HTTP, HTTPS.'
          example: https://www.youtube.com/watch?v=HlVSNEiFCBk
    FixedRatioGeometry:
      type: object
      description: Contains geometrical information about the item, such as its width
        or rotation. You can set either the width or height, you cannot set both the
        width and height at the same time.
      properties:
        height:
          type: number
          format: double
          description: Height of the item, in pixels.
        width:
          type: number
          format: double
          description: Width of the item, in pixels.
        rotation:
          type: number
          format: double
          description: Rotation angle of an item, in degrees, relative to the board.
            You can rotate items clockwise (right) and counterclockwise (left) by
            specifying positive and negative values, respectively.
    FixedRatioNoRotationGeometry:
      type: object
      description: Contains geometrical information about the item. You can set either
        the width or height. You cannot set both the width and height at the same
        time.
      properties:
        height:
          type: number
          format: double
          description: Height of the item, in pixels.
        width:
          type: number
          format: double
          description: Width of the item, in pixels.
    FrameData:
      type: object
      description: Contains frame item data, such as the title, frame type, or frame
        format.
      properties:
        format:
          type: string
          default: custom
          description: Only custom frames are supported at the moment.
          enum:
          - custom
          - desktop
          - phone
          - tablet
          - a4
          - letter
          - ratio_1x1
          - ratio_4x3
          - ratio_16x9
        title:
          type: string
          description: Title of the frame. This title appears at the top of the frame.
          example: Sample frame title
        type:
          type: string
          default: freeform
          description: Only free form frames are supported at the moment.
          enum:
          - freeform
          - heap
          - grid
          - rows
          - columns
    GenericItem:
      type: object
      description: Contains the result data.
      properties:
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        data:
          $ref: '#/components/schemas/WidgetDataOutput'
        geometry:
          $ref: '#/components/schemas/Geometry'
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: '3458764517517819000'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        position:
          $ref: '#/components/schemas/Position'
        type:
          type: string
          description: Type of item that is returned.
          example: sticky_note
      required:
      - id
      - type
    GenericItemCursorPaged:
      type: object
      properties:
        data:
          type: array
          description: Contains the result data.
          items:
            $ref: '#/components/schemas/GenericItem'
        total:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
          description: Number of results returned in the response considering the
            `cursor` and the `limit` values sent in the request. For example, if there
            are `20` results, the request does not have a `cursor` value, and the
            `limit` set to `10`, the `size` of the results will be `10`.<br>In this
            example, the response will also return a cursor value that can be used
            to retrieve the next set of 10 remaining results in the collection.
          example: 1
        cursor:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the `limit` specified and a `cursor` that points to
            the next portion of the results. To retrieve the next set of results of
            the collection, set the `cursor` parameter in your next request to the
            value returned in this parameter.
          example: MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4=
        limit:
          type: integer
          format: int32
          description: Maximum number of results returned based on the `limit` specified
            in the request. For example, if there are `20` results, the request has
            no `cursor` value, and the `limit` is set to `20`,the `size` of the results
            will be `20`. The rest of the results will not be returned. To retrieve
            the rest of the results, you must make another request and set the appropriate
            value for the `cursor` parameter value that you obtained from the response.
          example: 20
        links:
          $ref: '#/components/schemas/PageLinks'
    GenericItemUpdate:
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/Parent'
        position:
          $ref: '#/components/schemas/PositionChange'
    Geometry:
      type: object
      description: Contains geometrical information about the item, such as its width
        or height.
      properties:
        height:
          type: number
          format: double
          description: Height of the item, in pixels.
          example: 60
        rotation:
          type: number
          format: double
          description: Rotation angle of an item, in degrees, relative to the board.
            You can rotate items clockwise (right) and counterclockwise (left) by
            specifying positive and negative values, respectively.
        width:
          type: number
          format: double
          description: Width of the item, in pixels.
          example: 320
    ImageCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ImageUrlData'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/FixedRatioGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
      required:
      - data
    ImageData:
      type: object
      properties:
        imageUrl:
          type: string
          description: 'The URL to download the resource. You must use your access
            token to access the URL.

            The URL contains the `redirect` parameter and the `format` parameter to
            control the request execution as described in the following parameters:

            `format` parameter: By default, the image format is set to the preview
            image. If you want to download the original image, set the `format` parameter
            in the URL to `original`.

            `redirect`: By default, the `redirect` parameter is set to `false` and
            the resource object containing the URL and the resource type is returned
            with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use
            this URL to retrieve the resource file.

            If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT
            HTTP response is returned. If you follow HTTP 3xx responses as redirects,
            you will automatically be redirected to the resource file and the content
            type returned can be `image/png`, ''image/svg'', or ''image/jpg'', depending
            on the original image type.'
          example: https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false
        title:
          type: string
          description: A short text header to identify the image.
          example: Sample image title
    ImageItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: 3458764517517819000
        data:
          $ref: '#/components/schemas/ImageData'
        position:
          $ref: '#/components/schemas/Position'
        geometry:
          $ref: '#/components/schemas/Geometry'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
          example: image
      required:
      - id
      - type
    ImageUpdateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ImageUrlDataChanges'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/FixedRatioGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
    ImageUrlData:
      type: object
      description: Contains information about the image URL.
      properties:
        title:
          type: string
          description: A short text header to identify the image.
          example: Sample image title
        url:
          type: string
          default: https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png
          description: URL of the image.
          example: https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png
      required:
      - url
    ImageUrlDataChanges:
      type: object
      description: Contains information about the image URL.
      properties:
        title:
          type: string
          description: A short text header to identify the image.
          example: Test image title
        url:
          type: string
          description: URL of the image.
          example: https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png
    InvitationError:
      type: object
      description: Contains information about the invites that failed.
      properties:
        email:
          type: string
          description: Email ID for which the invitation failed.
          example: john.smith.demo@miro.com
        reason:
          type: string
          description: Reason why the invitation failed.
          example: INVITATION_FAILED
    InvitationResult:
      type: object
      properties:
        failed:
          type: array
          description: Contains information about the invites that failed.
          items:
            $ref: '#/components/schemas/InvitationError'
        successful:
          type: array
          description: Contains information about the invites that were successfully
            sent.
          example: 3074457350804038700
          items:
            type: integer
            format: int64
            description: Contains information about the invites that were successfully
              sent.
            example: 3074457350804038700
    ItemConnectionChangesData:
      type: object
      description: The ending point of the connector. If startItem is also provided,
        endItem.id must be different from startItem.id
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the item to which you want to attach
            the connector. Note that Frames are not supported at the moment.
          example: '3458764517517818867'
        position:
          $ref: '#/components/schemas/RelativeOffset'
        snapTo:
          type: string
          description: 'The side of the item connector should be attached to, the
            connection point will be placed in the middle of that side. Option `auto`
            allows to pick a connection point automatically. Only either `position`
            or `snapTo` parameter is allowed to be set, if neither provided `snapTo:
            auto` will be used by default.'
          enum:
          - auto
          - top
          - right
          - bottom
          - left
    ItemConnectionCreationData:
      type: object
      description: The end point of the connector. endItem.id must be different from
        startItem.id
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the item to which you want to attach
            the connector. Note that Frames are not supported at the moment.
          example: '3458764517517818867'
        position:
          $ref: '#/components/schemas/RelativeOffset'
        snapTo:
          type: string
          description: 'The side of the item connector should be attached to, the
            connection point will be placed in the middle of that side. Option `auto`
            allows to pick a connection point automatically. Only either `position`
            or `snapTo` parameter is allowed to be set, if neither provided `snapTo:
            auto` will be used by default.'
          enum:
          - auto
          - top
          - right
          - bottom
          - left
    ItemConnectionWithLinks:
      type: object
      description: The starting point of the connector.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the item the connector is attached
            to.
          example: '3458764517517818867'
        links:
          $ref: '#/components/schemas/SelfLink'
        position:
          $ref: '#/components/schemas/RelativeOffset'
    PageLinks:
      type: object
      description: Contains pagination links for the collection.
      properties:
        first:
          type: string
          description: Link to retrieve information in the first page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX==
        last:
          type: string
          description: Link to the retrieve information in the last page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX==
        next:
          type: string
          description: Link to retrieve information in the next page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw==
        prev:
          type: string
          description: Link to retrieve information in the previous page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=
        self:
          type: string
          description: Link to retrieve information in the current page of the collection.
          example: http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX==
    Parent:
      type: object
      description: Contains information about the parent this item must be attached
        to. A maximum of 1000 items can be attached to a frame. Passing `null` for
        `parent.id` directly attaches an item to the canvas.
      properties:
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of the parent frame for the item.
    ParentLinksEnvelope:
      type: object
      description: Contains information about the parent frame for the item.
      properties:
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of the parent frame for the item.
          example: 3074457362577955300
        links:
          $ref: '#/components/schemas/SelfLink'
    Picture:
      type: object
      description: Contains information about the cover picture of the board.
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier (ID) of the cover picture for the board.
          example: 3458764514006802400
        imageURL:
          type: string
          description: URL of the cover picture of the board.
          example: https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png
    Position:
      type: object
      description: Contains location information about the item, such as its x coordinate,
        y coordinate, and the origin of the x and y coordinates.
      properties:
        origin:
          type: string
          default: center
          description: 'Area of the item that is referenced by its x and y coordinates.
            For example, an item with a center origin will have its x and y coordinates
            point to its center. The center point of the board has x: 0 and y: 0 coordinates.

            Currently, only one option is supported (center).'
          enum:
          - center
        relativeTo:
          type: string
          enum:
          - canvas_center
          - parent_top_left
        x:
          type: number
          format: double
          description: 'X-axis coordinate of the location of the item on the board.

            By default, all items have absolute positioning to the board, not the
            current viewport. Default: 0.

            The center point of the board has `x: 0` and `y: 0` coordinates.'
          example: 100
        y:
          type: number
          format: double
          description: 'Y-axis coordinate of the location of the item on the board.

            By default, all items have absolute positioning to the board, not the
            current viewport. Default: 0.

            The center point of the board has `x: 0` and `y: 0` coordinates.'
          example: 100
    PositionChange:
      type: object
      description: Contains information about the item's position on the board, such
        as its x coordinate, y coordinate, and the origin of the x and y coordinates.
      properties:
        x:
          type: number
          format: double
          description: 'X-axis coordinate of the location of the item on the board.

            By default, all items have absolute positioning to the board, not the
            current viewport. Default: 0.

            The center point of the board has `x: 0` and `y: 0` coordinates.'
          example: 100
        y:
          type: number
          format: double
          description: 'Y-axis coordinate of the location of the item on the board.

            By default, all items have absolute positioning to the board, not the
            current viewport. Default: 0.

            The center point of the board has `x: 0` and `y: 0` coordinates.'
          example: 100
    Project:
      type: object
      description: Contains information about the project with which the board is
        associated.
      properties:
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of the project.
          example: 3088887345710756000
    RelativeOffset:
      type: object
      description: The relative position of the point on an item where the connector
        is attached. Position with x=0% and y=0% correspond to the top-left corner
        of the item, x=100% and y=100% correspond to the right-bottom corner.
      properties:
        x:
          type: string
          description: X-axis relative coordinate of the location where the connector
            connects with an item, in percentage, minimum 0%, maximum 100%.
          example: 50%
        y:
          type: string
          description: Y-axis relative coordinate of the location where the connector
            connects with an item, in percentage, minimum 0%, maximum 100%.
          example: 0%
    SelfLink:
      type: object
      description: Contains applicable links for the current object.
      properties:
        self:
          type: string
          description: Link to obtain more information about the current object.
          example: http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487
    ShapeCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ShapeData'
        style:
          $ref: '#/components/schemas/ShapeStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/Geometry'
        parent:
          $ref: '#/components/schemas/Parent'
    ShapeData:
      type: object
      description: Contains shape item data, such as the content or the type of the
        shape.
      properties:
        content:
          type: string
          description: The text you want to display on the shape.
          example: Hello
        shape:
          type: string
          default: rectangle
          description: Defines the geometric shape of the item when it is rendered
            on the board.
          enum:
          - rectangle
          - round_rectangle
          - circle
          - triangle
          - rhombus
          - parallelogram
          - trapezoid
          - pentagon
          - hexagon
          - octagon
          - wedge_round_rectangle_callout
          - star
          - flow_chart_predefined_process
          - cloud
          - cross
          - can
          - right_arrow
          - left_arrow
          - left_right_arrow
          - left_brace
          - right_brace
    ShapeItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: 3458764517517819000
        data:
          $ref: '#/components/schemas/ShapeData'
        style:
          $ref: '#/components/schemas/ShapeStyle'
        position:
          $ref: '#/components/schemas/Position'
        geometry:
          $ref: '#/components/schemas/Geometry'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
          example: shape
      required:
      - id
      - type
    ShapeStyle:
      type: object
      description: Contains information about the shape style, such as the border
        color or opacity.
      properties:
        borderColor:
          type: string
          description: 'Defines the color of the border of the shape.

            Default: `#1a1a1a` (dark gray).'
        borderOpacity:
          type: string
          description: 'Defines the opacity level of the shape border.

            Possible values: any number between `0.0` and `1.0`, where:

            `0.0`: the background color is completely transparent or invisible

            `1.0`: the background color is completely opaque or solid

            Default: `1.0` (solid color).'
          maximum: 1
          minimum: 0
        borderStyle:
          type: string
          description: 'Defines the style used to represent the border of the shape.

            Default: `normal`.'
          enum:
          - normal
          - dotted
          - dashed
        borderWidth:
          type: string
          description: 'Defines the thickness of the shape border, in dp.

            Default: `2.0`.'
          maximum: 24
          minimum: 1
        color:
          type: string
          description: 'Hex value representing the color for the text within the shape
            item.

            Default: `#1a1a1a`.'
          example: '#1a1a1a'
        fillColor:
          type: string
          description: 'Fill color for the shape.

            Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7`
            `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb`
            `#ffcee0` `#b384bb` `#000000`

            Default: #ffffff.'
          example: '#8fd14f'
        fillOpacity:
          type: string
          description: 'Opacity level of the fill color.

            Possible values: any number between `0` and `1`, where:

            `0.0`: the background color is completely transparent or invisible

            `1.0`: the background color is completely opaque or solid

            Default: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.

            '
          maximum: 1
          minimum: 0
        fontFamily:
          type: string
          description: 'Defines the font type for the text in the shape item.

            Default: `arial`.'
          enum:
          - arial
          - abril_fatface
          - bangers
          - eb_garamond
          - georgia
          - graduate
          - gravitas_one
          - fredoka_one
          - nixie_one
          - open_sans
          - permanent_marker
          - pt_sans
          - pt_sans_narrow
          - pt_serif
          - rammetto_one
          - roboto
          - roboto_condensed
          - roboto_slab
          - caveat
          - times_new_roman
          - titan_one
          - lemon_tuesday
          - roboto_mono
          - noto_sans
          - plex_sans
          - plex_serif
          - plex_mono
          - spoof
          - tiempos_text
          - formular
        fontSize:
          type: string
          description: 'Defines the font size, in dp, for the text on the shape.

            Default: `14`.'
          maximum: 288
          minimum: 10
        textAlign:
          type: string
          description: 'Defines how the sticky note text is horizontally aligned.

            Default: `center`.'
          enum:
          - left
          - right
          - center
        textAlignVertical:
          type: string
          description: 'Defines how the sticky note text is vertically aligned.

            Default: `top`.'
          enum:
          - top
          - middle
          - bottom
    ShapeUpdateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ShapeData'
        style:
          $ref: '#/components/schemas/ShapeStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/Geometry'
        parent:
          $ref: '#/components/schemas/Parent'
    StickyNoteCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/StickyNoteData'
        style:
          $ref: '#/components/schemas/StickyNoteStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/FixedRatioNoRotationGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
    StickyNoteData:
      type: object
      description: Contains sticky note item data, such as the content or shape of
        the sticky note.
      properties:
        content:
          type: string
          description: The actual text (content) that appears in the sticky note item.
          example: Hello
        shape:
          type: string
          default: square
          description: Defines the geometric shape of the sticky note and aspect ratio
            for its dimensions.
          enum:
          - square
          - rectangle
    StickyNoteItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: 3458764517517819000
        data:
          $ref: '#/components/schemas/StickyNoteData'
        style:
          $ref: '#/components/schemas/StickyNoteStyle'
        position:
          $ref: '#/components/schemas/Position'
        geometry:
          $ref: '#/components/schemas/Geometry'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
          example: sticky_note
      required:
      - id
      - type
    StickyNoteStyle:
      type: object
      description: Contains information about the style of a sticky note item, such
        as the fill color or text alignment.
      properties:
        fillColor:
          type: string
          description: 'Fill color for the sticky note.

            Default: `light_yellow`.'
          enum:
          - gray
          - light_yellow
          - yellow
          - orange
          - light_green
          - green
          - dark_green
          - cyan
          - light_pink
          - pink
          - violet
          - red
          - light_blue
          - blue
          - dark_blue
          - black
        textAlign:
          type: string
          description: 'Defines how the sticky note text is horizontally aligned.

            Default: `center`.'
          enum:
          - left
          - right
          - center
        textAlignVertical:
          type: string
          description: 'Defines how the sticky note text is vertically aligned.

            Default: `top`.'
          enum:
          - top
          - middle
          - bottom
    StickyNoteUpdateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/StickyNoteData'
        style:
          $ref: '#/components/schemas/StickyNoteStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/FixedRatioNoRotationGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
    Team:
      required:
      - id
      - name
      type: object
      description: Contains information about the team with which the board is associated.
      properties:
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of the team.
          example: 3088887345710753000
        name:
          type: string
          description: Name of the team.
          example: Marketing team
    TextCreateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TextData'
        style:
          $ref: '#/components/schemas/TextStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/WidthOnlyAdjustableGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
      required:
      - data
    TextData:
      type: object
      description: Contains text item data, such as the title, content, or description.
        For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).
      properties:
        content:
          type: string
          description: The actual text (content) that appears in the text item.
          example: Hello
      required:
      - content
    TextItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (ID) of an item.
          example: 3458764517517819000
        data:
          $ref: '#/components/schemas/TextData'
        style:
          $ref: '#/components/schemas/TextStyle'
        position:
          $ref: '#/components/schemas/Position'
        geometry:
          $ref: '#/components/schemas/Geometry'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        createdBy:
          $ref: '#/components/schemas/createdBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
          example: 2022-03-30 17:26:50+00:00
        modifiedBy:
          $ref: '#/components/schemas/modifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
          example: text
      required:
      - id
      - type
    TextStyle:
      type: object
      description: Contains information about the style of a text item, such as the
        fill color or font family.
      properties:
        color:
          type: string
          description: 'Hex value representing the color for the text within the text
            item.

            Default: `#1a1a1a`.'
          example: '#1a1a1a'
        fillColor:
          type: string
          description: 'Background color of the text item.

            Default: `#ffffff`.'
          example: '#e6e6e6'
        fillOpacity:
          type: string
          description: 'Opacity level of the background color.

            Possible values: any number between `0.0` and `1.0`, where:

            `0.0`: the background color is completely transparent or invisible

            `1.0`: the background color is completely opaque or solid

            Default: `1.0` if `fillColor` provided, `0.0` if `fillColor` is not provided.'
          maximum: 1
          minimum: 0
        fontFamily:
          type: string
          description: 'Font type for the text in the text item.

            Default: `arial`.'
          enum:
          - arial
          - abril_fatface
          - bangers
          - eb_garamond
          - georgia
          - graduate
          - gravitas_one
          - fredoka_one
          - nixie_one
          - open_sans
          - permanent_marker
          - pt_sans
          - pt_sans_narrow
          - pt_serif
          - rammetto_one
          - roboto
          - roboto_condensed
          - roboto_slab
          - caveat
          - times_new_roman
          - titan_one
          - lemon_tuesday
          - roboto_mono
          - noto_sans
          - plex_sans
          - plex_serif
          - plex_mono
          - spoof
          - tiempos_text
          - formular
        fontSize:
          type: string
          description: 'Font size, in dp.

            Default: `14`.'
          minimum: 1
        textAlign:
          type: string
          description: 'Horizontal alignment for the item''s content.

            Default: `center.`'
          enum:
          - left
          - right
          - center
    TextUpdateRequest:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TextData'
        style:
          $ref: '#/components/schemas/TextStyle'
        position:
          $ref: '#/components/schemas/PositionChange'
        geometry:
          $ref: '#/components/schemas/WidthOnlyAdjustableGeometry'
        parent:
          $ref: '#/components/schemas/Parent'
    UserInfoShort:
      type: object
      description: Contains information about the user who created the board.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: 3074457353169356300
        name:
          type: string
          description: Name of the user.
          example: John Smith
        type:
          type: string
          description: Indicates the type of object returned. In this case, `type`
            returns `user`.
          example: user
      required:
      - id
      - name
      - type
    UserInfoLastOpenedBy:
      type: object
      description: Contains information about the user who opened the board last.
        This information is only available when the boards are sorted by `last_opened`.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: 3074457353169356300
        name:
          type: string
          description: Name of the user.
          example: John Smith
        type:
          type: string
          description: Indicates the type of object returned. In this case, `type`
            returns `user`.
          example: user
    GetBoardUserInfoLastOpenedBy:
      type: object
      description: Contains information about the user who last opened the board.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: 3074457353169356300
        name:
          type: string
          description: Name of the user.
          example: John Smith
        type:
          type: string
          description: Indicates the type of object returned. In this case, `type`
            returns `user`.
          example: user
      required:
      - id
      - name
      - type
    WidgetDataOutput:
      type: object
      description: Contains the item data, such as the item title, content, or description.
      oneOf:
      - $ref: '#/components/schemas/TextData'
      - $ref: '#/components/schemas/EmbedData'
      - $ref: '#/components/schemas/CardData'
      - $ref: '#/components/schemas/AppCardData'
      - $ref: '#/components/schemas/ImageData'
      - $ref: '#/components/schemas/DocumentData'
      - $ref: '#/components/schemas/ShapeData'
      - $ref: '#/components/schemas/FrameData'
      - $ref: '#/components/schemas/StickyNoteData'
    WidgetLinks:
      type: object
      description: Contains applicable links for the item.
      properties:
        related:
          type: string
          description: Link to obtain information about the child items related to
            the frame.
          example: http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor=
        self:
          type: string
          description: Link to obtain information about the current item.
          example: http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487
    WidthOnlyAdjustableGeometry:
      type: object
      description: Contains geometrical information about the item, such as its width
        or rotation. You can only specify the width of the text item as the height
        is dynamically updated based on the content.
      properties:
        rotation:
          type: number
          format: double
          description: Rotation angle of an item, in degrees, relative to the board.
            You can rotate items clockwise (right) and counterclockwise (left) by
            specifying positive and negative values, respectively.
        width:
          type: number
          format: double
          description: 'Width of the item, in pixels.

            The minimum `width` of a `text` widget is relative to the font size of
            the `text` widget. The width must be at least 1.7 times wider than the
            font size.

            For example, if the font size of the `text` item is `14`, the minimum
            `width` is `24`.'
    createdBy:
      type: object
      description: Contains information about the user who created the item.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: '3458764517517852417'
        type:
          type: string
          description: Indicates the type of object returned. In this case, `type`
            returns `user`.
          example: user
    modifiedBy:
      type: object
      description: Contains information about the user who last modified the item.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: '3458764517517852417'
        type:
          type: string
          description: Indicates the type of object returned. In this case, `type`
            returns `user`.
          example: user
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
