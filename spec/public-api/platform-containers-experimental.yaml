openapi: 3.0.1
info:
  title: Platform Containers Experimental
  version: v2.0
x-settings:
  skip-tests: true
servers:
- url: https://api.miro.com
security:
- bearerAuth: []
paths:
  /v2-experimental/boards/{board_id}/items:
    parameters:
    - schema:
        type: string
      name: board_id
      in: path
      required: true
      description: Unique identifier (ID) of the board from which you want to retrieve
        the child nodes of a mind map node.
components:
  schemas:
    MindmapCursorPaged:
      type: object
      properties:
        data:
          type: array
          description: Contains the result data.
          items:
            $ref: '#/components/schemas/MindmapItem'
        total:
          type: integer
          format: int64
          description: Total number of results available. If the value of the `total`
            parameter is higher than the value of the `size` parameter, this means
            that there are more results that you can retrieve. To retrieve more results,
            you can make another request and set the `offset` value accordingly. For
            example, if there are `30` results, and the request has the `offset` set
            to `0` and the `limit` set to `20`, the `size` parameter will return `20`
            and the `total` parameter will return `30`. This means that there are
            9 more results to retrieve (as the offset is zero-based).
        size:
          type: integer
          format: int32
          description: Number of results returned in the response considering the
            `cursor` and the `limit` values sent in the request. For example, if there
            are `20` results, the request does not have a `cursor` value, and the
            `limit` set to `10`, the `size` of the results will be `10`.<br>In this
            example, the response will also return a cursor value that can be used
            to retrieve the next set of 10 remaining results in the collection.
        cursor:
          type: string
          description: A cursor-paginated method returns a portion of the total set
            of results based on the `limit` specified and a `cursor` that points to
            the next portion of the results. To retrieve the next set of results of
            the collection, set the `cursor` parameter in your next request to the
            value returned in this parameter.
        limit:
          type: integer
          format: int32
          description: Maximum number of results returned based on the `limit` specified
            in the request. For example, if there are `20` results, the request has
            no `cursor` value, and the `limit` is set to `20`,the `size` of the results
            will be `20`. The rest of the results will not be returned. To retrieve
            the rest of the results, you must make another request and set the appropriate
            value for the `cursor` parameter value that you obtained from the response.
        links:
          $ref: '#/components/schemas/PageLinks'
    PageLinks:
      type: object
      description: Contains pagination links for the collection.
      properties:
        first:
          type: string
          description: Link to retrieve information in the first page of the collection.
        last:
          type: string
          description: Link to the retrieve information in the last page of the collection.
        next:
          type: string
          description: Link to retrieve information in the next page of the collection.
        prev:
          type: string
          description: Link to retrieve information in the previous page of the collection.
        self:
          type: string
          description: Link to retrieve information in the current page of the collection.
    CreatedBy:
      type: object
      description: Contains information about the user who created the item.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: '3458764517517852417'
        type:
          type: string
          description: Indicates the type of object returned. In this case, `type`
            returns `user`.
    ModifiedBy:
      type: object
      description: Contains information about the user who last modified the item.
      properties:
        id:
          type: string
          description: Unique identifier (ID) of the user.
          example: '3458764517517852417'
        type:
          type: string
          description: Indicates the type of object returned. In this case, `type`
            returns `user`.
    ParentLinksEnvelope:
      type: object
      properties:
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of the parent mind map node for the
            item.
          example: 3074457362577955300
        links:
          $ref: '#/components/schemas/SelfLink'
      description: Contains information about the parent mind map node for the item.
    SelfLink:
      type: object
      description: Contains applicable links for the current object.
      properties:
        self:
          type: string
          description: Link to obtain more information about the current object.
    MindmapItem:
      type: object
      properties:
        id:
          type: string
          format: int64
          description: Unique identifier (ID) of an item.
          example: 3074457362577955300
        data:
          $ref: '#/components/schemas/MindmapData'
        createdAt:
          type: string
          format: date-time
          description: 'Date and time when the item was created. <br>Format: UTC,
            adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        createdBy:
          $ref: '#/components/schemas/CreatedBy'
        modifiedAt:
          type: string
          format: date-time
          description: 'Date and time when the item was last modified. <br>Format:
            UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes
            a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).'
        modifiedBy:
          $ref: '#/components/schemas/ModifiedBy'
        parent:
          $ref: '#/components/schemas/ParentLinksEnvelope'
        links:
          $ref: '#/components/schemas/WidgetLinks'
        type:
          type: string
          description: Type of item that is returned.
      required:
      - id
      - type
    MindmapData:
      type: object
      description: Contains mind map node data, such as `nodeView` or `isRoot`.
      properties:
        nodeView:
          $ref: '#/components/schemas/MindmapNodeView'
        isRoot:
          type: boolean
          description: Indicates whether this node is the root node of the mind map.
        direction:
          type: string
          description: Indicates where this node is positioned relative to the root
            node. `start` indicates that this node must be positioned at the start
            of the root node, which is either the left or top of the root node. `end`
            indicates that this node must be positioned at the emd of the root node,
            which is either the right or bottom of the root node.
          enum:
          - start
          - end
    WidgetLinks:
      type: object
      description: Contains applicable links for the item.
      properties:
        related:
          type: string
          description: Link to obtain information about the child nodes.
        self:
          type: string
    MindmapNodeView:
      type: object
      description: Contains information about the item used as a mind map node.
      properties:
        type:
          type: string
          description: Type of mind map node. Currently, `type` can only be set to
            `text`.
        data:
          $ref: '#/components/schemas/WidgetDataOutput'
    WidgetDataOutput:
      oneOf:
      - $ref: '#/components/schemas/TextData'
      description: Contains the item data, such as the item title, content, or description.
    TextData:
      type: object
      description: Contains text item data.
      properties:
        content:
          type: string
          description: The actual text (content) that appears in the text item.
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
